
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -L PendulumDump.txt --output-exec=start --intel-hex --output pendulum.hex pendulum.asm
; Sun Apr 06 14:18:13 2025

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: pendulum.asm


;******  Processing file: setup.asm

=$01					MMU_IO_CTRL 	= $01						;MMU I/O Control
=$d000					VKY_MSTR_CTRL_0 = $d000						; Vicky Master Control Register 0
=$d001					VKY_MSTR_CTRL_1 = $d001						; Vicky Master Control Register 1
=$d004					VKY_BRDR_CTRL   = $d004						; Vicky Border Control Register
=$d00d					VKY_BKG_COL_B   = $d00d						; Vicky Graphics Background Color Blue
=$d00e					VKY_BKG_COL_G   = $d00e						; Vicky Graphics Background Color Green
=$d00f					VKY_BKG_COL_R   = $d00f						; Vicky Graphics Background Color Red
=$d002					VKY_LAYER_CTRL_0= $d002
=$d003					VKY_LAYER_CTRL_1= $d003
=$d280					VKY_TS0_AD_L	= $d280						; Vicky Tile 0 Image Start Address LOW BYTE
=$d281					VKY_TS0_AD_M	= $d281						; Vicky Tile 0 Image Start Address MEDIUM BYTE
=$d282					VKY_TS0_AD_H	= $d282						; Vicky Tile 0 Image Start Address HIGH BYTE
=$d284					VKY_TS1_AD_L	= $d284						; Vicky Tile 1 Image Start Address LOW BYTE
=$d285					VKY_TS1_AD_M	= $d285						; Vicky Tile 1 Image Start Address MEDIUM BYTE
=$d286					VKY_TS1_AD_H	= $d286						; Vicky Tile 1 Image Start Address HIGH BYTE
=$d288					VKY_TS2_AD_L	= $d288						; Vicky Tile 2 Image Start Address LOW BYTE
=$d289					VKY_TS2_AD_M	= $d289						; Vicky Tile 2 Image Start Address MEDIUM BYTE
=$d28a					VKY_TS2_AD_H	= $d28a						; Vicky Tile 2 Image Start Address HIGH BYTE
=$d200					VKY_TM0_CTRL	= $d200						; Tile Map 0 Control
=$d201					VKY_TM0_AD_L	= $d201						; Tile Map 0 Start Address LOW BYTE
=$d202					VKY_TM0_AD_M	= $d202						; Tile Map 0 Start Address MEDIUM BYTE
=$d203					VKY_TM0_AD_H	= $d203						; Tile Map 0 Start Address HIGH BYTE
=$d204					VKY_TM0_SZ_X	= $d204						; Tile Map 0 Size X
=$d206					VKY_TM0_SZ_Y	= $d206						; Tile Map 0 Size Y
=$d208					VKY_TM0_POS_X_L = $d208						; Tile Map 0 X Position & Scroll LOW BYTE
=$d209					VKY_TM0_POS_X_H = $d209						; Tile Map 0 X Position & Scroll HIGH BYTE
=$d20a					VKY_TM0_POS_Y_L = $d20a						; Tile Map 0 Y Position & Scroll LOW BYTE
=$d20b					VKY_TM0_POS_Y_H = $d20b						; Tile Map 0 Y Position & Scroll HIGH BYTE
=$d20c					VKY_TM1_CTRL	= $d20c						; Tile Map 1 Control
=$d20d					VKY_TM1_AD_L	= $d20d						; Tile Map 1 Start Address LOW BYTE
=$d20e					VKY_TM1_AD_M	= $d20e						; Tile Map 1 Start Address MEDIUM BYTE
=$d20f					VKY_TM1_AD_H	= $d20f						; Tile Map 1 Start Address HIGH BYTE
=$d210					VKY_TM1_SZ_X	= $d210						; Tile Map 1 Size X
=$d212					VKY_TM1_SZ_Y	= $d212						; Tile Map 1 Size Y
=$d214					VKY_TM1_POS_X_L = $d214						; Tile Map 1 X Position & Scroll LOW BYTE
=$d215					VKY_TM1_POS_X_H = $d215						; Tile Map 1 X Position & Scroll HIGH BYTE
=$d216					VKY_TM1_POS_Y_L = $d216						; Tile Map 1 Y Position & Scroll LOW BYTE
=$d217					VKY_TM1_POS_Y_H = $d217						; Tile Map 1 Y Position & Scroll HIGH BYTE
=$d218					VKY_TM2_CTRL	= $d218						; Tile Map 2 Control
=$d219					VKY_TM2_AD_L	= $d219						; Tile Map 2 Start Address LOW BYTE
=$d21a					VKY_TM2_AD_M	= $d21a						; Tile Map 2 Start Address MEDIUM BYTE
=$d21b					VKY_TM2_AD_H	= $d21b						; Tile Map 2 Start Address HIGH BYTE
=$d21c					VKY_TM2_SZ_X	= $d21c						; Tile Map 2 Size X
=$d21e					VKY_TM2_SZ_Y	= $d21e						; Tile Map 2 Size Y
=$d220					VKY_TM2_POS_X_L = $d220						; Tile Map 2 X Position & Scroll LOW BYTE
=$d221					VKY_TM2_POS_X_H = $d221						; Tile Map 2 X Position & Scroll HIGH BYTE
=$d222					VKY_TM2_POS_Y_L = $d222						; Tile Map 2 Y Position & Scroll LOW BYTE
=$d223					VKY_TM2_POS_Y_H = $d223						; Tile Map 2 Y Position & Scroll HIGH BYTE
=$d900					VKY_SP0         = $d900                     ; start of sprite register locations / each new aprite is a multiple of 8
=$00					SP_CTRL         = $00                       ; control register              7-x, 6/5-size, 4/3-layer, 2/1-lut, 0-enable
=$01					SP_AD_L         = $01                       ; image address location
=$02					SP_AD_M         = $02
=$03					SP_AD_H         = $03
=$04					SP_POS_X_L      = $04                       ; x position
=$05					SP_POS_X_H      = $05
=$06					SP_POS_Y_L      = $06                       ; y position
=$07					SP_POS_Y_H      = $07
=$d9a0					playerSP        = $d9a0                     ; the sprite registers for the player
=$d000					VKY_GR_CLUT_0  	= $d000						; Graphics LUT #0 in I/O page 1
=$d400					VKY_GR_CLUT_1  	= $d400						; Graphics LUT #1 in I/O page 1
=$d400					SID_L1_FREQ_L   = $d400                     ; Left Sid Registers
=$d401					SID_L1_FREQ_H   = $d401
=$d402					SID_L1_PULS_L   = $d402
=$d403					SID_L1_PULS_H   = $d403
=$d404					SID_L1_GATE     = $d404
=$d405					SID_L1_ATDL     = $d405
=$d406					SID_L1_STRL     = $d406
=$d407					SID_L2_FREQ_L   = $d407
=$d408					SID_L2_FREQ_H   = $d408
=$d409					SID_L2_PULS_L   = $d409
=$d40a					SID_L2_PULS_H   = $d40a
=$d40b					SID_L2_GATE     = $d40b
=$d40c					SID_L2_ATDL     = $d40c
=$d40d					SID_L2_STRL     = $d40d
=$d40e					SID_L3_FREQ_L   = $d40e
=$d40f					SID_L3_FREQ_H   = $d40f
=$d410					SID_L3_PULS_L   = $d410
=$d411					SID_L3_PULS_H   = $d411
=$d412					SID_L3_GATE     = $d412
=$d413					SID_L3_ATDL     = $d413
=$d414					SID_L3_STRL     = $d414
=$d415					SID_L_FLT_L     = $d415
=$d416					SID_L_FLT_H     = $d416
=$d417					SID_L_RES       = $d417
=$d418					SID_L_VOL       = $d418
=$d500					SID_R1_FREQ_L   = $d500                     ; Right Sid Registers
=$d501					SID_R1_FREQ_H   = $d501
=$d502					SID_R1_PULS_L   = $d502
=$d503					SID_R1_PULS_H   = $d503
=$d504					SID_R1_GATE     = $d504
=$d505					SID_R1_ATDL     = $d505
=$d506					SID_R1_STRL     = $d506
=$d507					SID_R2_FREQ_L   = $d507
=$d508					SID_R2_FREQ_H   = $d508
=$d509					SID_R2_PULS_L   = $d509
=$d50a					SID_R2_PULS_H   = $d50a
=$d50b					SID_R2_GATE     = $d50b
=$d50c					SID_R2_ATDL     = $d50c
=$d50d					SID_R2_STRL     = $d50d
=$d50e					SID_R3_FREQ_L   = $d50e
=$d50f					SID_R3_FREQ_H   = $d50f
=$d510					SID_R3_PULS_L   = $d510
=$d511					SID_R3_PULS_H   = $d511
=$d512					SID_R3_GATE     = $d512
=$d513					SID_R3_ATDL     = $d513
=$d514					SID_R3_STRL     = $d514
=$d515					SID_R_FLT_L     = $d515
=$d516					SID_R_FLT_H     = $d516
=$d517					SID_R_RES       = $d517
=$d518					SID_R_VOL       = $d518
=$d600					PSG_L           = $d600
=$d610					PSG_R           = $d610
=$d608					PSG_LR          = $d608
=$80					PSG1_FREQ_LO    = %10000000                 ; OR with low 4 bits
=$00					PSG1_FREQ_HI    = %00000000                 ; OR with low 6 bits
=$90					PSG1_VOLUME     = %10010000                 ; OR with low 4 bits / default is full  - 0 = full, f = silent
=$a0					PSG2_FREQ_LO    = %10100000                 ; OR with low 4 bits
=$00					PSG2_FREQ_HI    = %00000000                 ; OR with low 6 bits
=$b0					PSG2_VOLUME     = %10110000                 ; OR with low 4 bits / default is full  - 0 = full, f = silent
=$c0					PSG3_FREQ_LO    = %11000000                 ; OR with low 4 bits
=$00					PSG3_FREQ_HI    = %00000000                 ; OR with low 6 bits
=$d0					PSG3_VOLUME     = %11010000                 ; OR with low 4 bits / default is full  - 0 = full, f = silent
=$dda1					MIDI_COM        = $dda1                     ; midi command
=$fffe					VIRQ			= $fffe						; Pointer to IRQ routine (LOW Byte)
=$d660					INT_PEND_0		= $d660						; Pending register for interrupts 0-7
=$d661					INT_PEND_1		= $d661						; Pending register for interrupts 8-15
=$d66c					INT_MASK_0		= $d66c						; Mask register for interrupts 0-7
=$d66d					INT_MASK_1		= $d66d						; Mask register for interrupts 8-15
=$de00					MULU_A_L		= $de00						; unsigned A LOW byte
=$de01					MULU_A_H		= $de01						; unsigned A HIGH Byte
=$de02					MULU_B_L		= $de02						; unsigned B LOW byte
=$de03					MULU_B_H		= $de03						; unsigned B HIGH byte
=$de10					MULU_LL			= $de10						; A x B byte 0
=$de11					MULU_LH			= $de11						; A x B byte 1
=$de12					MULU_HL			= $de12						; A x B byte 3
=$de13					MULU_HH			= $de13						; A x B byte 4
=$de08					ADD_A_LL		= $de08
=$de09					ADD_A_LH		= $de09
=$de0a					ADD_A_HL		= $de0a
=$de0b					ADD_A_HH		= $de0b
=$de0c					ADD_B_LL		= $de0c
=$de0d					ADD_B_LH		= $de0d
=$de0e					ADD_B_HL		= $de0e
=$de0f					ADD_B_HH		= $de0f
=$de18					ADD_R_LL		= $de18
=$de19					ADD_R_LH		= $de19
=$de1a					ADD_R_HL		= $de1a
=$de1b					ADD_R_HH		= $de1b
=$d6a6					Random_Reg		= $d6a6
=$d6a4					Random_L		= $d6a4
=$80					ptr_src			= $80						; A pointer to read data
=$82					ptr_dst			= $82						; A pointer to write data

;******  Return to file: pendulum.asm

.1ffd					start:
.1ffd	4c 0b 20	jmp $200b			jmp SC								; Start of the program - We put this jump here so you can load the PGZ into the computer.

;******  Processing file: api.asm

>ff00					NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04					ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08					ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c					Yield       .fill   4   ; Give unused time to the kernel.
>ff10					Putch       .fill   4   ; deprecated
>ff14					RunBlock    .fill   4   ; Chain to resident program by block ID.
>ff18					RunNamed    .fill   4   ; Chain to resident program by name.
>ff1c					            .fill   4   ; reserved
>ff20					List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24					GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28					GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c					Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30					Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34					Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38					Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c					List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40					GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44					MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48					CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c					Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50					Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54					ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58					WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c					Open        .fill   4   ; Open the given file for read, create, or append.
>ff60					Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64					Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68					Close       .fill   4   ; Close an open file.
>ff6c					Rename      .fill   4   ; Rename a closed file.
>ff70					Delete      .fill   4   ; Delete a closed file.
>ff74					Seek        .fill   4   ; Seek to a specific position in a file.
>ff78					Open        .fill   4   ; Open a directory for reading.
>ff7c					Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff80					Close       .fill   4   ; Close a directory once finished reading.
>ff84					MkDir       .fill   4   ; Create a directory
>ff88					RmDir       .fill   4   ; Delete a directory
>ff8c					            .fill   4   ; call gate
>ff90					GetIP       .fill   4   ; Get the local IP address.
>ff94					SetIP       .fill   4   ; Set the local IP address.
>ff98					GetDNS      .fill   4   ; Get the configured DNS IP address.
>ff9c					SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa0					SendICMP    .fill   4
>ffa4					Match       .fill   4
>ffa8					Init        .fill   4
>ffac					Send        .fill   4
>ffb0					Recv        .fill   4
>ffb4					Open        .fill   4
>ffb8					Accept      .fill   4
>ffbc					Reject      .fill   4
>ffc0					Send        .fill   4
>ffc4					Recv        .fill   4
>ffc8					Close       .fill   4
>ffcc					Reset       .fill   4   ; Re-init the display
>ffd0					GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ffd4					DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ffd8					DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ffdc					GetTime     .fill   4
>ffe0					SetTime     .fill   4
>ffe4					            .fill   12  ; 65816 vectors
>fff0					SetTimer    .fill   4
.00f0					args
.00f0					events
>00f0					dest        .word       ?   ; GetNextEvent copies event data here
>00f2					pending     .byte       ?   ; Negative count of pending events
.00f3					end
.00f3					run
>00f3					block_id    .byte   ?
.00f3					recv
=$fb					buf         = args.buf
=$fd					buflen      = args.buflen
.00f3					fs
.00f3					format
>00f3					drive       .byte       ?
>00f4					cookie      .byte       ?
=$fb					label       = args.buf
=$fd					label_len   = args.buflen
.00f3					mkfs
>00f3					drive       .byte       ?
>00f4					cookie      .byte       ?
=$fb					label       = args.buf
=$fd					label_len   = args.buflen
.00f3					file
.00f3					open
>00f3					drive       .byte       ?
>00f4					cookie      .byte       ?
=$fb					fname       = args.buf
=$fd					fname_len   = args.buflen
>00f5					mode        .byte       ?
=0					READ        = 0
=1					WRITE       = 1
=2					END         = 2
.00f3					read
>00f3					stream      .byte       ?
>00f4					buflen      .byte       ?
.00f3					write
>00f3					stream      .byte       ?
=$fb					buf         = args.buf
=$fd					buflen      = args.buflen
.00f3					seek
>00f3					stream      .byte       ?
>00f4					position    .dword      ?
.00f3					close
>00f3					stream      .byte       ?
.00f3					rename
>00f3					drive       .byte       ?
>00f4					cookie      .byte       ?
=$fb					old         = args.buf
=$fd					old_len     = args.buflen
=$f8					new         = args.ext
=$fa					new_len     = args.extlen
.00f3					delete
>00f3					drive       .byte       ?
>00f4					cookie      .byte       ?
=$fb					fname       = args.buf
=$fd					fname_len   = args.buflen
>00f5					mode        .byte       ?
=0					READ        = 0
=1					WRITE       = 1
=2					END         = 2
.00f3					directory
.00f3					open
>00f3					drive       .byte       ?
>00f4					cookie      .byte       ?
=$fb					path        = args.buf
=$fd					path_len    = args.buflen
.00f3					read
>00f3					stream      .byte       ?
>00f4					buflen      .byte       ?
.00f3					close
>00f3					stream      .byte       ?
.00f3					mkdir
>00f3					drive       .byte       ?
>00f4					cookie      .byte       ?
=$fb					path        = args.buf
=$fd					path_len    = args.buflen
.00f3					rmdir
>00f3					drive       .byte       ?
>00f4					cookie      .byte       ?
=$fb					path        = args.buf
=$fd					path_len    = args.buflen
.00f3					display
>00f3					x           .byte       ?   ; coordinate or size
>00f4					y           .byte       ?   ; coordinate or size
=$fb					text        = args.buf      ; text
=$f8					color       = args.ext      ; color
=$fb					buf         = args.buf      ; deprecated
=$f8					buf2        = args.ext      ; deprecated
=$fd					buflen      = args.buflen
.00f3					net
=$fb					socket      = args.buf
>00f3					src_port    .word       ?
>00f5					dest_port   .word       ?
>00f7					dest_ip     .fill       4
>00f3					accepted    .byte       ?
=$f8					buf         = args.ext
=$fa					buflen      = args.extlen
.00f3					config
.00f3					timer
>00f3					units       .byte       ?
=0					FRAMES      = 0
=1					SECONDS     = 1
=128					QUERY       = 128
>00f4					absolute    .byte       ?
>00f5					cookie      .byte       ?
=$f8					ext         = $f8
=$fa					extlen      = $fa
=$fb					buf         = $fb
=$fd					buflen      = $fd
=$fe					ptr         = $fe
.0000					events
>0000					dest        .word       ?   ; GetNextEvent copies event data here
>0002					pending     .byte       ?   ; Negative count of pending events
.0003					end
.0003					run
>0003					block_id    .byte   ?
.0003					recv
=$fb					buf         = args.buf
=$fd					buflen      = args.buflen
.0003					fs
.0003					format
>0003					drive       .byte       ?
>0004					cookie      .byte       ?
=$fb					label       = args.buf
=$fd					label_len   = args.buflen
.0003					mkfs
>0003					drive       .byte       ?
>0004					cookie      .byte       ?
=$fb					label       = args.buf
=$fd					label_len   = args.buflen
.0003					file
.0003					open
>0003					drive       .byte       ?
>0004					cookie      .byte       ?
=$fb					fname       = args.buf
=$fd					fname_len   = args.buflen
>0005					mode        .byte       ?
=0					READ        = 0
=1					WRITE       = 1
=2					END         = 2
.0003					read
>0003					stream      .byte       ?
>0004					buflen      .byte       ?
.0003					write
>0003					stream      .byte       ?
=$fb					buf         = args.buf
=$fd					buflen      = args.buflen
.0003					seek
>0003					stream      .byte       ?
>0004					position    .dword      ?
.0003					close
>0003					stream      .byte       ?
.0003					rename
>0003					drive       .byte       ?
>0004					cookie      .byte       ?
=$fb					old         = args.buf
=$fd					old_len     = args.buflen
=$f8					new         = args.ext
=$fa					new_len     = args.extlen
.0003					delete
>0003					drive       .byte       ?
>0004					cookie      .byte       ?
=$fb					fname       = args.buf
=$fd					fname_len   = args.buflen
>0005					mode        .byte       ?
=0					READ        = 0
=1					WRITE       = 1
=2					END         = 2
.0003					directory
.0003					open
>0003					drive       .byte       ?
>0004					cookie      .byte       ?
=$fb					path        = args.buf
=$fd					path_len    = args.buflen
.0003					read
>0003					stream      .byte       ?
>0004					buflen      .byte       ?
.0003					close
>0003					stream      .byte       ?
.0003					mkdir
>0003					drive       .byte       ?
>0004					cookie      .byte       ?
=$fb					path        = args.buf
=$fd					path_len    = args.buflen
.0003					rmdir
>0003					drive       .byte       ?
>0004					cookie      .byte       ?
=$fb					path        = args.buf
=$fd					path_len    = args.buflen
.0003					display
>0003					x           .byte       ?   ; coordinate or size
>0004					y           .byte       ?   ; coordinate or size
=$fb					text        = args.buf      ; text
=$f8					color       = args.ext      ; color
=$fb					buf         = args.buf      ; deprecated
=$f8					buf2        = args.ext      ; deprecated
=$fd					buflen      = args.buflen
.0003					net
=$fb					socket      = args.buf
>0003					src_port    .word       ?
>0005					dest_port   .word       ?
>0007					dest_ip     .fill       4
>0003					accepted    .byte       ?
=$f8					buf         = args.ext
=$fa					buflen      = args.extlen
.0003					config
.0003					timer
>0003					units       .byte       ?
=0					FRAMES      = 0
=1					SECONDS     = 1
=128					QUERY       = 128
>0004					absolute    .byte       ?
>0005					cookie      .byte       ?
=$f8					ext         = $f8
=$fa					extlen      = $fa
=$fb					buf         = $fb
=$fd					buflen      = $fd
=$fe					ptr         = $fe
>0000					dest        .word       ?   ; GetNextEvent copies event data here
>0002					pending     .byte       ?   ; Negative count of pending events
.0003					end
=$fb					buf         = args.buf
=$fd					buflen      = args.buflen
>0000					block_id    .byte   ?
.0000					format
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					label       = args.buf
=$fd					label_len   = args.buflen
.0000					mkfs
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					label       = args.buf
=$fd					label_len   = args.buflen
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					label       = args.buf
=$fd					label_len   = args.buflen
.0000					open
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					fname       = args.buf
=$fd					fname_len   = args.buflen
>0002					mode        .byte       ?
=0					READ        = 0
=1					WRITE       = 1
=2					END         = 2
.0000					read
>0000					stream      .byte       ?
>0001					buflen      .byte       ?
.0000					write
>0000					stream      .byte       ?
=$fb					buf         = args.buf
=$fd					buflen      = args.buflen
.0000					seek
>0000					stream      .byte       ?
>0001					position    .dword      ?
.0000					close
>0000					stream      .byte       ?
.0000					rename
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					old         = args.buf
=$fd					old_len     = args.buflen
=$f8					new         = args.ext
=$fa					new_len     = args.extlen
.0000					delete
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					fname       = args.buf
=$fd					fname_len   = args.buflen
>0002					mode        .byte       ?
=0					READ        = 0
=1					WRITE       = 1
=2					END         = 2
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					fname       = args.buf
=$fd					fname_len   = args.buflen
>0002					mode        .byte       ?
=0					READ        = 0
=1					WRITE       = 1
=2					END         = 2
>0000					stream      .byte       ?
>0001					buflen      .byte       ?
>0000					stream      .byte       ?
=$fb					buf         = args.buf
=$fd					buflen      = args.buflen
>0000					stream      .byte       ?
>0001					position    .dword      ?
>0000					stream      .byte       ?
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					old         = args.buf
=$fd					old_len     = args.buflen
=$f8					new         = args.ext
=$fa					new_len     = args.extlen
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					fnane       = args.buf
=$fd					fname_len   = args.buflen
.0000					open
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					path        = args.buf
=$fd					path_len    = args.buflen
.0000					read
>0000					stream      .byte       ?
>0001					buflen      .byte       ?
.0000					close
>0000					stream      .byte       ?
.0000					mkdir
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					path        = args.buf
=$fd					path_len    = args.buflen
.0000					rmdir
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					path        = args.buf
=$fd					path_len    = args.buflen
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					path        = args.buf
=$fd					path_len    = args.buflen
>0000					stream      .byte       ?
>0001					buflen      .byte       ?
>0000					stream      .byte       ?
>0000					x           .byte       ?   ; coordinate or size
>0001					y           .byte       ?   ; coordinate or size
=$fb					text        = args.buf      ; text
=$f8					color       = args.ext      ; color
=$fb					buf         = args.buf      ; deprecated
=$f8					buf2        = args.ext      ; deprecated
=$fd					buflen      = args.buflen
=$fb					socket      = args.buf
>0000					src_port    .word       ?
>0002					dest_port   .word       ?
>0004					dest_ip     .fill       4
>0000					accepted    .byte       ?
=$f8					buf         = args.ext
=$fa					buflen      = args.extlen
>0000					units       .byte       ?
=0					FRAMES      = 0
=1					SECONDS     = 1
=128					QUERY       = 128
>0001					absolute    .byte       ?
>0002					cookie      .byte       ?
>0000					century     .byte       ?
>0001					year        .byte       ?
>0002					month       .byte       ?
>0003					day         .byte       ?
>0004					hours       .byte       ?
>0005					minutes     .byte       ?
>0006					seconds     .byte       ?
>0007					centis      .byte       ?
.0008					size
>0000					            .word   ?   ; Reserved
>0002					            .word   ?   ; Deprecated
>0004					JOYSTICK    .word   ?   ; Game Controller changes.
>0006					DEVICE      .word   ?   ; Device added/removed.
>0008					PRESSED     .word   ?   ; Key pressed
>000a					RELEASED    .word   ?   ; Key released.
>000c					DELTA       .word   ?   ; Regular mouse move and button state
>000e					CLICKS      .word   ?   ; Click counts
>0010					NAME        .word   ?
>0012					SIZE        .word   ?
>0014					DATA        .word   ?   ; The read request has succeeded.
>0016					WROTE       .word   ?   ; The write request has completed.
>0018					FORMATTED   .word   ?   ; The low-level format has completed.
>001a					ERROR       .word   ?
>001c					SIZE        .word   ?
>001e					CREATED     .word   ?
>0020					CHECKED     .word   ?
>0022					DATA        .word   ?   ; The read request has succeeded.
>0024					WROTE       .word   ?   ; The write request has completed.
>0026					ERROR       .word   ?
>0028					NOT_FOUND   .word   ?   ; The file file was not found.
>002a					OPENED      .word   ?   ; The file was successfully opened.
>002c					DATA        .word   ?   ; The read request has succeeded.
>002e					WROTE       .word   ?   ; The write request has completed.
>0030					EOF         .word   ?   ; All file data has been read.
>0032					CLOSED      .word   ?   ; The close request has completed.
>0034					RENAMED     .word   ?   ; The rename request has completed.
>0036					DELETED     .word   ?   ; The delete request has completed.
>0038					ERROR       .word   ?   ; An error occured; close the file if opened.
>003a					SEEK        .word   ?   ; The seek request has completed.
>003c					OPENED      .word   ?   ; The directory open request succeeded.
>003e					VOLUME      .word   ?   ; A volume record was found.
>0040					FILE        .word   ?   ; A file record was found.
>0042					FREE        .word   ?   ; A file-system free-space record was found.
>0044					EOF         .word   ?   ; All data has been read.
>0046					CLOSED      .word   ?   ; The directory file has been closed.
>0048					ERROR       .word   ?   ; An error occured; user should close.
>004a					CREATED     .word   ?   ; The directory has been created.
>004c					DELETED     .word   ?   ; The directory has been deleted.
>004e					TCP         .word   ?
>0050					UDP         .word   ?
>0052					EXPIRED     .word   ?
>0054					TICK        .word   ?
>0000					type        .byte   ?   ; Enum above
>0001					buf         .byte   ?   ; page id or zero
>0002					ext         .byte   ?   ; page id or zero
.0003					key
>0003					keyboard    .byte   ?   ; Keyboard ID
>0004					raw         .byte   ?   ; Raw key ID
>0005					ascii       .byte   ?   ; ASCII value
>0006					flags       .byte   ?   ; Flags (META)
=$80					META        = $80       ; Meta key; no associated ASCII value.
.0003					mouse
.0003					delta
>0003					x           .byte   ?
>0004					y           .byte   ?
>0005					z           .byte   ?
>0006					buttons     .byte   ?
.0003					clicks
>0003					inner       .byte   ?
>0004					middle      .byte   ?
>0005					outer       .byte   ?
.0003					joystick
>0003					joy0        .byte   ?
>0004					joy1        .byte   ?
.0003					udp
>0003					token       .byte   ?   ; TODO: break out into fields
.0003					tcp
>0003					len         .byte   ?   ; Raw packet length.
.0003					file
>0003					stream      .byte   ?
>0004					cookie      .byte   ?
.0005					data
>0005					requested   .byte   ?   ; Requested number of bytes to read
>0006					read        .byte   ?   ; Number of bytes actually read
.0005					wrote
>0005					requested   .byte   ?   ; Requested number of bytes to read
>0006					wrote       .byte   ?   ; Number of bytes actually read
.0003					directory
>0003					stream      .byte   ?
>0004					cookie      .byte   ?
.0005					volume
>0005					len         .byte   ?   ; Length of volname (in buf)
>0006					flags       .byte   ?   ; block size, text encoding
.0005					file
>0005					len         .byte   ?
>0006					flags       .byte   ?   ; block scale, text encoding, approx size
.0005					free
>0005					flags       .byte   ?   ; block scale, text encoding, approx size
.0003					timer
>0003					value       .byte   ?
>0004					cookie      .byte   ?
>0000					keyboard    .byte   ?   ; Keyboard ID
>0001					raw         .byte   ?   ; Raw key ID
>0002					ascii       .byte   ?   ; ASCII value
>0003					flags       .byte   ?   ; Flags (META)
=$80					META        = $80       ; Meta key; no associated ASCII value.
.0000					delta
>0000					x           .byte   ?
>0001					y           .byte   ?
>0002					z           .byte   ?
>0003					buttons     .byte   ?
.0000					clicks
>0000					inner       .byte   ?
>0001					middle      .byte   ?
>0002					outer       .byte   ?
>0000					x           .byte   ?
>0001					y           .byte   ?
>0002					z           .byte   ?
>0003					buttons     .byte   ?
>0000					inner       .byte   ?
>0001					middle      .byte   ?
>0002					outer       .byte   ?
>0000					joy0        .byte   ?
>0001					joy1        .byte   ?
>0000					stream      .byte   ?
>0001					cookie      .byte   ?
.0002					data
>0002					requested   .byte   ?   ; Requested number of bytes to read
>0003					read        .byte   ?   ; Number of bytes actually read
.0002					wrote
>0002					requested   .byte   ?   ; Requested number of bytes to read
>0003					wrote       .byte   ?   ; Number of bytes actually read
>0000					requested   .byte   ?   ; Requested number of bytes to read
>0001					read        .byte   ?   ; Number of bytes actually read
>0000					requested   .byte   ?   ; Requested number of bytes to read
>0001					wrote       .byte   ?   ; Number of bytes actually read
>0000					stream      .byte   ?
>0001					cookie      .byte   ?
.0002					volume
>0002					len         .byte   ?   ; Length of volname (in buf)
>0003					flags       .byte   ?   ; block size, text encoding
.0002					file
>0002					len         .byte   ?
>0003					flags       .byte   ?   ; block scale, text encoding, approx size
.0002					free
>0002					flags       .byte   ?   ; block scale, text encoding, approx size
>0000					len         .byte   ?   ; Length of volname (in buf)
>0001					flags       .byte   ?   ; block size, text encoding
>0000					len         .byte   ?
>0001					flags       .byte   ?   ; block scale, text encoding, approx size
>0000					flags       .byte   ?   ; block scale, text encoding, approx size
>0000					free        .fill   6   ; blocks used/free
>0000					token       .byte   ?   ; TODO: break out into fields
>0000					len         .byte   ?   ; Raw packet length.
>0000					value       .byte   ?
>0001					cookie      .byte   ?

;******  Return to file: pendulum.asm

.00a0					event:
>00a0					type        .byte   ?   ; Enum above
>00a1					buf         .byte   ?   ; page id or zero
>00a2					ext         .byte   ?   ; page id or zero
.00a3					key
>00a3					keyboard    .byte   ?   ; Keyboard ID
>00a4					raw         .byte   ?   ; Raw key ID
>00a5					ascii       .byte   ?   ; ASCII value
>00a6					flags       .byte   ?   ; Flags (META)
=$80					META        = $80       ; Meta key; no associated ASCII value.
.00a3					mouse
.00a3					delta
>00a3					x           .byte   ?
>00a4					y           .byte   ?
>00a5					z           .byte   ?
>00a6					buttons     .byte   ?
.00a3					clicks
>00a3					inner       .byte   ?
>00a4					middle      .byte   ?
>00a5					outer       .byte   ?
.00a3					joystick
>00a3					joy0        .byte   ?
>00a4					joy1        .byte   ?
.00a3					udp
>00a3					token       .byte   ?   ; TODO: break out into fields
.00a3					tcp
>00a3					len         .byte   ?   ; Raw packet length.
.00a3					file
>00a3					stream      .byte   ?
>00a4					cookie      .byte   ?
.00a5					data
>00a5					requested   .byte   ?   ; Requested number of bytes to read
>00a6					read        .byte   ?   ; Number of bytes actually read
.00a5					wrote
>00a5					requested   .byte   ?   ; Requested number of bytes to read
>00a6					wrote       .byte   ?   ; Number of bytes actually read
.00a3					directory
>00a3					stream      .byte   ?
>00a4					cookie      .byte   ?
.00a5					volume
>00a5					len         .byte   ?   ; Length of volname (in buf)
>00a6					flags       .byte   ?   ; block size, text encoding
.00a5					file
>00a5					len         .byte   ?
>00a6					flags       .byte   ?   ; block scale, text encoding, approx size
.00a5					free
>00a5					flags       .byte   ?   ; block scale, text encoding, approx size
.00a3					timer
>00a3					value       .byte   ?
>00a4					cookie      .byte   ?
>2000	f2 56						.byte $f2,$56						; Required bytes for the Kernel to identify
>2002	04 01						.byte $04,$01						; how big is the program in 8K sections, What slot to map to
>2004	0b 20						.byte $0b,$20						; the starting address of your program
>2006	00 00 00 00					.byte $00,$00,$00,$00				; reserved
>200a	00						.byte $00							; terminating byte
.200b					SC:
.200b	64 01		stz $01				stz MMU_IO_CTRL						; should do this on every program
.200d	a9 a0		lda #$a0	        lda #<event
.200f	85 f0		sta $f0		        sta kernel.args.events
.2011	a9 00		lda #$00	        lda #>event
.2013	85 f1		sta $f1		        sta kernel.args.events+1
.2015	a9 27		lda #$27			lda #%00100111						; Graphic, Sprites Engine enabled  			|xx|GM|SP|TL|BM|GR|OV|TX|
.2017	8d 00 d0	sta $d000			sta VKY_MSTR_CTRL_0					; Text overlay enabled						| 0| 0| 1| 0| 0| 1| 1| 1|
.201a	a9 06		lda #$06			lda #%00000110						; Text mode options for the overlay 		|xx|xx|FS|FO|MS|2Y|2X|70|
.201c	8d 01 d0	sta $d001			sta VKY_MSTR_CTRL_1					; 320 x 240, 60 Hz, dbl X & Y				| 0| 0| 0| 0| 0| 1| 1| 0|
.201f	9c 04 d0	stz $d004			stz VKY_BRDR_CTRL					; No Border
.2022	a9 00		lda #$00			lda #$00							; Set the background color
.2024	8d 0f d0	sta $d00f			sta VKY_BKG_COL_R
.2027	a9 00		lda #$00			lda #$00
.2029	8d 0e d0	sta $d00e			sta VKY_BKG_COL_G
.202c	a9 00		lda #$00			lda #$00
.202e	8d 0d d0	sta $d00d			sta VKY_BKG_COL_B
.2031	20 b2 23	jsr $23b2			jsr clrScreen
.2034	a9 2c		lda #$2c			lda #<sprite1						; location of the first sprite
.2036	8d a8 26	sta $26a8			sta spriteLoc
.2039	a9 2b		lda #$2b			lda #>sprite1
.203b	8d a9 26	sta $26a9			sta spriteLoc+1
.203e	a2 00		ldx #$00			ldx #$00							; set x to zero to start
.2040					spriteLoop:
.2040	8a		txa				txa									; transfer to A and multiply by 8
.2041	0a		asl a				asl
.2042	0a		asl a				asl
.2043	0a		asl a				asl
.2044	a8		tay				tay									; transfer result to Y, sprite control data is every 8 bytes
.2045	a9 61		lda #$61			lda #%01100001						; 8x8 sprite, layer 0, lut 0, enable on
.2047	99 00 d9	sta $d900,y			sta VKY_SP0,y 						; from sprite 0 in Vicky indexed to y
.204a	bd 65 25	lda $2565,x			lda ballXLO,x
.204d	99 04 d9	sta $d904,y			sta VKY_SP0+SP_POS_X_L,Y
.2050	a9 00		lda #$00			lda #$00
.2052	99 05 d9	sta $d905,y			sta VKY_SP0+SP_POS_X_H,y
.2055	bd 95 25	lda $2595,x			lda ballYLO,X
.2058	99 06 d9	sta $d906,y			sta VKY_SP0+SP_POS_Y_L,Y
.205b	bd ad 25	lda $25ad,x			lda ballYHI,X
.205e	99 07 d9	sta $d907,y			sta VKY_SP0+SP_POS_Y_H,Y
.2061	ad a8 26	lda $26a8			lda spriteLoc
.2064	99 01 d9	sta $d901,y			sta VKY_SP0+SP_AD_L,y
.2067	ad a9 26	lda $26a9			lda spriteLoc+1
.206a	99 02 d9	sta $d902,y			sta VKY_SP0+SP_AD_M,y
.206d	a9 00		lda #$00			lda #$00
.206f	99 03 d9	sta $d903,y			sta VKY_SP0+SP_AD_H,y
.2072	18		clc				clc
.2073	ad a8 26	lda $26a8			lda spriteLoc						; each ball has its own sprite. 8x8 sprites are 64 bytes
.2076	69 40		adc #$40			adc #64
.2078	8d a8 26	sta $26a8			sta spriteLoc
.207b	ad a9 26	lda $26a9			lda spriteLoc+1
.207e	69 00		adc #$00			adc #$00
.2080	8d a9 26	sta $26a9			sta spriteLoc+1
.2083	e8		inx				inx
.2084	e0 18		cpx #$18			cpx #24
.2086	d0 b8		bne $2040			bne spriteLoop
.2088	a9 01		lda #$01			lda #$01							; Change I/O control to page 1
.208a	85 01		sta $01				sta MMU_IO_CTRL
.208c	a9 ac		lda #$ac			lda #<CLUT0							; Set source pointer to CLUT for color information
.208e	85 80		sta $80				sta ptr_src
.2090	a9 2a		lda #$2a			lda #>CLUT0
.2092	85 81		sta $81				sta ptr_src+1
.2094	a9 00		lda #$00			lda #<VKY_GR_CLUT_0					; Set destination pointer to Graphics CLUT 0
.2096	85 82		sta $82				sta ptr_dst
.2098	a9 d0		lda #$d0			lda #>VKY_GR_CLUT_0
.209a	85 83		sta $83				sta ptr_dst+1
.209c	a2 00		ldx #$00			ldx #$00							; Y is the number of colors to copy, check for 32
.209e	a0 20		ldy #$20			ldy #32
.20a0					makeClut:
.20a0	8c a7 26	sty $26a7			sty totalColors
.20a3					color_loop:
.20a3	a0 00		ldy #$00			ldy #$00							; Y points to the color component (Blue Red Green Alpha)
.20a5					comp_loop:
.20a5	b1 80		lda ($80),y			lda (ptr_src),y						; Read byte from our color table
.20a7	91 82		sta ($82),y			sta (ptr_dst),y						; write byte to the Graphic CLUT
.20a9	c8		iny				iny
.20aa	c0 04		cpy #$04			cpy #$04							; Do 4 bytes for one color + Alpha
.20ac	d0 f7		bne $20a5			bne comp_loop
.20ae	e8		inx				inx
.20af	ec a7 26	cpx $26a7			cpx totalColors						; Loop for all colors of the CLUT
.20b2	f0 1d		beq $20d1			beq done_lut
.20b4	18		clc				clc									; Move the source pointer to the next Color
.20b5	a5 80		lda $80				lda ptr_src
.20b7	69 04		adc #$04			adc #$04
.20b9	85 80		sta $80				sta ptr_src
.20bb	a5 81		lda $81				lda ptr_src+1
.20bd	69 00		adc #$00			adc #$00
.20bf	85 81		sta $81				sta ptr_src+1
.20c1	18		clc				clc									; Move the destination pointer to the next Color
.20c2	a5 82		lda $82				lda ptr_dst
.20c4	69 04		adc #$04			adc #$04
.20c6	85 82		sta $82				sta ptr_dst
.20c8	a5 83		lda $83				lda ptr_dst+1
.20ca	69 00		adc #$00			adc #$00
.20cc	85 83		sta $83				sta ptr_dst+1
.20ce	4c a3 20	jmp $20a3			jmp color_loop						; and start copying the next color
.20d1					done_lut:
.20d1	64 01		stz $01				stz MMU_IO_CTRL
.20d3					setFont:
.20d3	a9 bc		lda #$bc			lda #<font
.20d5	85 80		sta $80				sta $80
.20d7	a9 26		lda #$26			lda #>font
.20d9	85 81		sta $81				sta $81
.20db	a9 c1		lda #$c1			lda #$c1
.20dd	64 82		stz $82				stz $82
.20df	85 83		sta $83				sta $83
.20e1	a0 00		ldy #$00			ldy #$00
.20e3	a2 03		ldx #$03			ldx #$03
.20e5	a9 01		lda #$01			lda #$01
.20e7	85 01		sta $01				sta MMU_IO_CTRL
.20e9					_sfLoop:
.20e9	b1 80		lda ($80),y			lda ($80),y
.20eb	91 82		sta ($82),y			sta ($82),y
.20ed	c8		iny				iny
.20ee	d0 f9		bne $20e9			bne _sfLoop
.20f0	e6 81		inc $81				inc $81
.20f2	e6 83		inc $83				inc $83
.20f4	ca		dex				dex
.20f5	d0 f2		bne $20e9			bne _sfLoop
.20f7	64 01		stz $01				stz MMU_IO_CTRL
.20f9	20 8b 23	jsr $238b			jsr setBalls
.20fc	20 f3 22	jsr $22f3			jsr setMidiInstrument
.20ff	a9 00		lda #$00			lda #kernel.args.timer.FRAMES		; set the Timer to Frames
.2101	09 80		ora #$80			ora #kernel.args.timer.QUERY		; and query what frame we're on
.2103	85 f3		sta $f3				sta kernel.args.timer.units			; store in units parameter
.2105	20 f0 ff	jsr $fff0			jsr kernel.Clock.SetTimer			; jsr to Kernel Routine
.2108	b0 04		bcs $210e			bcs skipSet							; If Carry set, ignore
.210a	69 01		adc #$01			adc #$01							; if not add 1 to Accumulator for next frame
.210c	85 d0		sta $d0				sta $d0
.210e					skipSet:
.210e	20 7b 23	jsr $237b			jsr SetTimer						; Let's get the kernel set up for the timer
.2111					loop:
.2111	20 17 21	jsr $2117			jsr handle_events					; This is my game loop
.2114	4c 11 21	jmp $2111			jmp loop
.2117					handle_events:
.2117	a5 f2		lda $f2				lda kernel.args.events.pending		; Peek at the queue to see if anything is pending
.2119	10 0b		bpl $2126			bpl done_handle_events				; Nothing to do
.211b	20 00 ff	jsr $ff00			jsr kernel.NextEvent				; Get the next event.
.211e	b0 06		bcs $2126			bcs done_handle_events				; If Carry is set, skip the handler
.2120	20 27 21	jsr $2127			jsr dispatch						; Handle the event
.2123	4c 17 21	jmp $2117			jmp handle_events					; go and check for another event
.2126					done_handle_events:
.2126	60		rts				rts
.2127					dispatch:
.2127	a5 a0		lda $a0				lda event.type						; get the event type from Kernel
.2129	c9 52		cmp #$52			cmp #kernel.event.timer.EXPIRED		; is the event timer.EXPIRED?
.212b	f0 05		beq $2132			beq UpdateScreenJmp					; run the screen update
.212d	c9 08		cmp #$08			cmp #kernel.event.key.PRESSED
.212f	f0 11		beq $2142	        beq keypress
.2131	60		rts				rts
.2132					UpdateScreenJmp
.2132	4c 11 22	jmp $2211			jmp UpdateScreen					; jmp because conditional is to far
.2135					quit:
.2135	64 01		stz $01				stz MMU_IO_CTRL						; reset mmu to zero
.2137	a9 01		lda #$01			lda #$01
.2139	8d 00 d0	sta $d000			sta VKY_MSTR_CTRL_0					; reset the graphics chip
.213c	9c 01 d0	stz $d001			stz VKY_MSTR_CTRL_1					; reset text size
.213f	4c 20 e0	jmp $e020			jmp $e020							; jump to kernel reset
.2142					keypress:
.2142	ad ab 26	lda $26ab			lda menuFlag
.2145	f0 5b		beq $21a2			beq checkTab
.2147	a5 a6		lda $a6		        lda event.key.flags               	; Once a key is pressed, we can get the ascii value by loading the byte from the
.2149	a5 a5		lda $a5		        lda event.key.ascii                 ; event.key.ascii location assigned by the kernel. We then check to see if it's a
.214b	c9 10		cmp #$10			cmp #16								; These are the ascii characters for the menu input!
.214d	f0 5c		beq $21ab			beq moreGap
.214f	c9 0e		cmp #$0e			cmp #14
.2151	f0 19		beq $216c			beq lessGapJmp						; TAB does not work here. These do not work when the menu is off.
.2153	c9 06		cmp #$06			cmp #6
.2155	f0 65		beq $21bc			beq moreSpeed
.2157	c9 02		cmp #$02			cmp #2
.2159	f0 7d		beq $21d8			beq lessSpeed
.215b	c9 69		cmp #$69			cmp #105
.215d	f0 10		beq $216f			beq nextInst
.215f	c9 49		cmp #$49			cmp #73
.2161	f0 20		beq $2183			beq lastInst
.2163	c9 71		cmp #$71			cmp #113
.2165	f0 ce		beq $2135			beq quit
.2167	c9 0d		cmp #$0d			cmp #13
.2169	f0 2a		beq $2195			beq restart
.216b					keyDone:
.216b	60		rts				rts
.216c					lessGapJmp
.216c	4c f9 21	jmp $21f9			jmp lessGap							; jmp because conditional is too far away
.216f					nextInst:
.216f	18		clc				clc
.2170	ad a6 26	lda $26a6			lda midiInst
.2173	69 01		adc #$01			adc #$01
.2175	c9 34		cmp #$34			cmp #52
.2177	b0 03		bcs $217c			bcs nInstDone
.2179	8d a6 26	sta $26a6			sta midiInst
.217c					nInstDone:
.217c	20 a4 24	jsr $24a4			jsr printMidiInst
.217f	20 f3 22	jsr $22f3			jsr setMidiInstrument
.2182	60		rts				rts
.2183					lastInst:
.2183	38		sec				sec
.2184	ad a6 26	lda $26a6			lda midiInst
.2187	e9 01		sbc #$01			sbc #$01
.2189	30 03		bmi $218e			bmi lInstDone
.218b	8d a6 26	sta $26a6			sta midiInst
.218e					lInstDone:
.218e	20 a4 24	jsr $24a4			jsr printMidiInst
.2191	20 f3 22	jsr $22f3			jsr setMidiInstrument
.2194	60		rts				rts
.2195					restart:
.2195	20 b2 23	jsr $23b2			jsr clrScreen						; and restarts the balls from 0
.2198	20 eb 24	jsr $24eb			jsr resetBalls
.219b	20 8b 23	jsr $238b			jsr setBalls
.219e	9c ab 26	stz $26ab			stz menuFlag
.21a1	60		rts				rts
.21a2					checkTab:
.21a2	a5 a6		lda $a6				lda event.key.flags               	; Once a key is pressed, we can get the ascii value by loading the byte from the
.21a4	a5 a5		lda $a5				lda event.key.ascii                 ; event.key.ascii location assigned by the kernel. We then check to see if it's a
.21a6	c9 09		cmp #$09			cmp #9
.21a8	f0 60		beq $220a			beq runMenu
.21aa	60		rts				rts
.21ab					moreGap:
.21ab	18		clc				clc									; This does not take effect until RETURN is hit
.21ac	ad a3 26	lda $26a3			lda speedRatio
.21af	69 04		adc #$04			adc #$04
.21b1	c9 a4		cmp #$a4			cmp #$a4
.21b3	b0 03		bcs $21b8			bcs topGap
.21b5	8d a3 26	sta $26a3			sta speedRatio
.21b8					topGap:
.21b8	20 76 24	jsr $2476			jsr printGap
.21bb	60		rts				rts
.21bc					moreSpeed:
.21bc	18		clc				clc									; will adjust with the gap setting once RETURN is hit
.21bd	ad a1 26	lda $26a1			lda speedBase
.21c0	69 08		adc #$08			adc #$08
.21c2	8d a1 26	sta $26a1			sta speedBase
.21c5	ad a2 26	lda $26a2			lda speedBase+1
.21c8	69 00		adc #$00			adc #$00
.21ca	8d a2 26	sta $26a2			sta speedbase+1
.21cd	c9 03		cmp #$03			cmp #$03
.21cf	d0 03		bne $21d4			bne mSDone
.21d1	9c a1 26	stz $26a1			stz speedBase
.21d4					mSDone:
.21d4	20 37 24	jsr $2437			jsr printSpeed
.21d7	60		rts				rts
.21d8					lessSpeed:
.21d8	38		sec				sec									; will adjust once the RETURN is hit.
.21d9	ad a1 26	lda $26a1			lda speedBase
.21dc	e9 08		sbc #$08			sbc #$08
.21de	8d a1 26	sta $26a1			sta speedbase
.21e1	ad a2 26	lda $26a2			lda speedbase+1
.21e4	e9 00		sbc #$00			sbc #$00
.21e6	8d a2 26	sta $26a2			sta speedbase+1
.21e9	d0 0a		bne $21f5			bne lSpeedDone
.21eb					checkSpeedLO:
.21eb	ad a1 26	lda $26a1			lda speedBase
.21ee	d0 05		bne $21f5			bne lSpeedDone
.21f0	a9 08		lda #$08			lda #$08
.21f2	8d a1 26	sta $26a1			sta speedBase
.21f5					lSpeedDone:
.21f5	20 37 24	jsr $2437			jsr printSpeed
.21f8	60		rts				rts
.21f9					lessGap:
.21f9	38		sec				sec									; take affect until RETURN is hit.
.21fa	ad a3 26	lda $26a3			lda speedRatio
.21fd	e9 04		sbc #$04			sbc #$04
.21ff	c9 04		cmp #$04			cmp #$04
.2201	90 03		bcc $2206			bcc bottomGap
.2203	8d a3 26	sta $26a3			sta speedRatio
.2206					bottomGap:
.2206	20 76 24	jsr $2476			jsr printGap
.2209	60		rts				rts
.220a					runMenu:
.220a	20 e6 23	jsr $23e6			jsr printMenu
.220d	ee ab 26	inc $26ab			inc menuFlag
.2210	60		rts				rts
.2211					UpdateScreen:
.2211	20 7b 23	jsr $237b			jsr SetTimer						; reset timer for next SOF
.2214	20 18 22	jsr $2218			jsr moveBalls						; move the balls
.2217					noMove:
.2217	60		rts				rts
.2218					moveBalls:
.2218	a2 00		ldx #$00			ldx #$00							; set X to zero to loop 24 balls
.221a					mbLoop:
.221a	8a		txa				txa									; transfer x to A
.221b	0a		asl a				asl									; and multiply by 8
.221c	0a		asl a				asl 								;		sprite control is 8 bytes large
.221d	0a		asl a				asl									;       this sets y at the start of each sprite
.221e	a8		tay				tay									; 		and store in y
.221f	bd 05 25	lda $2505,x			lda ballDir,x 						; Get the ball direction 1 for right FF for left
.2222	c9 ff		cmp #$ff			cmp #$ff							; check if we're going left
.2224	f0 37		beq $225d			beq goBack							; if yest, go to left routine
.2226					goForward:
.2226	18		clc				clc									; go right routine
.2227	bd 4d 25	lda $254d,x			lda ballXFR,x						; we're going to add the speed to the X paramter
.222a	7d 1d 25	adc $251d,x			adc ballSdF,x 						; using a single byte fixed point fraction
.222d	9d 4d 25	sta $254d,x			sta ballXFR,x
.2230	bd 65 25	lda $2565,x			lda ballXLO,x
.2233	7d 35 25	adc $2535,x			adc ballSdL,x
.2236	9d 65 25	sta $2565,x			sta ballXLO,x
.2239	bd 7d 25	lda $257d,x			lda ballXHI,x
.223c	69 00		adc #$00			adc #$00
.223e	9d 7d 25	sta $257d,x			sta ballxHI,x
.2241	bd 65 25	lda $2565,x			lda ballXLO,x 						; see if we hit the right side of the screen
.2244	c9 59		cmp #$59			cmp #$59
.2246	90 4a		bcc $2292			bcc placeBall						; no, let's set the sprite on the screen
.2248	bd 7d 25	lda $257d,x			lda ballxHI,x 						; need to check HI byte as well
.224b	f0 45		beq $2292			beq placeBall						; no, place sprite on screen
.224d	a9 ff		lda #$ff			lda #$ff							; yes, change the direction flag to $ff
.224f	9d 05 25	sta $2505,x			sta ballDir,x
.2252	20 ad 22	jsr $22ad			jsr reverseBack
.2255	20 02 23	jsr $2302			jsr makeMusic						; hit the note on the SAM chip
.2258	20 13 23	jsr $2313			jsr makeColor						; fill the ball with the correct color
.225b	80 35		bra $2292			bra placeBall						; and drop down to the opposite direction
.225d					goBack:
.225d	38		sec				sec 								; go left direction
.225e	bd 4d 25	lda $254d,x			lda ballXFR,x						; subtract the ball speed from the x potition
.2261	fd 1d 25	sbc $251d,x			sbc ballSdF,x
.2264	9d 4d 25	sta $254d,x			sta ballXFR,x
.2267	bd 65 25	lda $2565,x			lda ballXLO,x
.226a	fd 35 25	sbc $2535,x			sbc ballSdL,x
.226d	9d 65 25	sta $2565,x			sta ballXLO,x
.2270	bd 7d 25	lda $257d,x			lda ballXHI,x
.2273	e9 00		sbc #$00			sbc #$00
.2275	9d 7d 25	sta $257d,x			sta ballxHI,x
.2278	bd 65 25	lda $2565,x			lda ballXLO,x 						; check if we hit the left side of the screen
.227b	c9 1f		cmp #$1f			cmp #$1f
.227d	b0 13		bcs $2292			bcs placeBall						; no, place the sprite
.227f	bd 7d 25	lda $257d,x			lda ballxHI,x 						; we need to check the hi byte too
.2282	d0 0e		bne $2292			bne placeBall						; no, place the sprite
.2284	a9 01		lda #$01			lda #$01							; change the ball direction to right
.2286	9d 05 25	sta $2505,x			sta ballDir,x
.2289	20 d0 22	jsr $22d0			jsr reverseForward
.228c	20 02 23	jsr $2302			jsr makeMusic						; hit the note on the SAM chip
.228f	20 13 23	jsr $2313			jsr makeColor						; fill the ball with the correct color
.2292					placeBall:
.2292	bd 65 25	lda $2565,x			lda ballXLO,X						; set the sprite position parameter
.2295	99 04 d9	sta $d904,y			sta VKY_SP0+SP_POS_X_L,Y
.2298	bd 7d 25	lda $257d,x			lda ballxHI,X
.229b	99 05 d9	sta $d905,y			sta VKY_SP0+SP_POS_X_H,y
.229e	20 26 23	jsr $2326			jsr dropColor						; reduce the color intesity as it travels away from the edge
.22a1	20 54 23	jsr $2354			jsr assignColor						; and assign the color to the CLUT
.22a4	e8		inx				inx									; go to next ball in sequence
.22a5	e0 18		cpx #$18			cpx #24								; have we gone through all 24 balls
.22a7	f0 03		beq $22ac			beq doneBallLoop					; yes skip the jmp command to top
.22a9	4c 1a 22	jmp $221a			jmp mbLoop
.22ac					doneBallLoop:
.22ac	60		rts				rts
.22ad					reverseBack:
.22ad	38		sec				sec
.22ae	bd 4d 25	lda $254d,x			lda ballXFR,x
.22b1	e9 00		sbc #$00			sbc #$00
.22b3	8d a4 26	sta $26a4			sta resultFR
.22b6	bd 65 25	lda $2565,x			lda ballXLO,x
.22b9	e9 59		sbc #$59			sbc #$59
.22bb	8d a5 26	sta $26a5			sta resultLO
.22be	38		sec				sec
.22bf	a9 00		lda #$00			lda #$00
.22c1	ed a4 26	sbc $26a4			sbc resultFR
.22c4	9d 4d 25	sta $254d,x			sta ballXFR,x
.22c7	a9 59		lda #$59			lda #$59
.22c9	ed a5 26	sbc $26a5			sbc resultLO
.22cc	9d 65 25	sta $2565,x			sta ballXLO,x
.22cf	60		rts				rts
.22d0					reverseForward:
.22d0	38		sec				sec
.22d1	a9 00		lda #$00			lda #$00
.22d3	fd 4d 25	sbc $254d,x			sbc ballXFR,x
.22d6	8d a4 26	sta $26a4			sta resultFR
.22d9	a9 1f		lda #$1f			lda #$1f
.22db	fd 65 25	sbc $2565,x			sbc ballXLO,x
.22de	8d a5 26	sta $26a5			sta resultLO
.22e1	18		clc				clc
.22e2	a9 00		lda #$00			lda #$00
.22e4	6d a4 26	adc $26a4			adc resultFR
.22e7	9d 4d 25	sta $254d,x			sta ballXFR,x
.22ea	a9 1f		lda #$1f			lda #$1f
.22ec	6d a5 26	adc $26a5			adc resultLO
.22ef	9d 65 25	sta $2565,x			sta ballXLO,x
.22f2	60		rts				rts
.22f3					setMidiInstrument:
.22f3	a9 c0		lda #$c0			lda #$c0							; set the instrument for channel 0
.22f5	8d a1 dd	sta $dda1			sta MIDI_COM
.22f8	ae a6 26	ldx $26a6			ldx midiInst								; this is the instrument number
.22fb	bd 25 26	lda $2625,x			lda midiTable,x
.22fe	8d a1 dd	sta $dda1			sta MIDI_COM
.2301	60		rts				rts
.2302					makeMusic:
.2302	a9 90		lda #$90			lda #$90							; strike a note on channel 0
.2304	8d a1 dd	sta $dda1			sta MIDI_COM
.2307	bd c5 25	lda $25c5,x			lda ballNote,X						; send note value based on what ball hit the edge
.230a	8d a1 dd	sta $dda1			sta MIDI_COM
.230d	a9 40		lda #$40			lda #$40							; set strike velocity ($40 is the default value)
.230f	8d a1 dd	sta $dda1			sta MIDI_COM
.2312	60		rts				rts
.2313					makeColor:
.2313	bd 59 26	lda $2659,x			lda colorG,X						; get the reference color
.2316	9d dd 25	sta $25dd,x			sta ballG,X							; and store it in the ball
.2319	bd 71 26	lda $2671,x			lda colorR,X						; for all three colors
.231c	9d f5 25	sta $25f5,x			sta ballR,X
.231f	bd 89 26	lda $2689,x			lda colorB,X
.2322	9d 0d 26	sta $260d,x			sta ballB,X
.2325	60		rts				rts
.2326					dropColor:
.2326	de dd 25	dec $25dd,x			dec ballG,X							; each cycle reduce the color value by one
.2329	de f5 25	dec $25f5,x			dec ballR,x
.232c	de 0d 26	dec $260d,x			dec ballB,x
.232f	bd dd 25	lda $25dd,x			lda ballG,X							; check if we've gone too far
.2332	c9 ff		cmp #$ff			cmp #$ff							; and reset to zero
.2334	d0 05		bne $233b			bne checkRed
.2336	a9 00		lda #$00			lda #$00
.2338	9d dd 25	sta $25dd,x			sta ballG,x
.233b					checkRed:
.233b	bd f5 25	lda $25f5,x			lda ballR,x
.233e	c9 ff		cmp #$ff			cmp #$ff
.2340	d0 05		bne $2347			bne checkBlue
.2342	a9 00		lda #$00			lda #$00
.2344	9d f5 25	sta $25f5,x			sta ballR,x
.2347					checkBlue:
.2347	bd 0d 26	lda $260d,x			lda ballB,x
.234a	c9 ff		cmp #$ff			cmp #$ff
.234c	d0 05		bne $2353			bne colorDone
.234e	a9 00		lda #$00			lda #$00
.2350	9d 0d 26	sta $260d,x			sta ballB,x
.2353					colorDone:
.2353	60		rts				rts
.2354					assignColor:
.2354	a9 01		lda #$01			lda #$01							; Change I/O control to page 1
.2356	85 01		sta $01				sta MMU_IO_CTRL
.2358	8a		txa				txa									; grab which ball we have
.2359	18		clc				clc
.235a	69 02		adc #$02			adc #$02							; and add two for the first color to first ball
.235c	0a		asl a				asl									; then multiply by 4 to get to the right
.235d	0a		asl a				asl									; location for the RGBA bytes for each color
.235e	a8		tay				tay									; and transfer to Y for indirect indexing
.235f	a9 00		lda #$00			lda #<VKY_GR_CLUT_0					; Set destination pointer to Graphics CLUT 0
.2361	85 82		sta $82				sta ptr_dst
.2363	a9 d0		lda #$d0			lda #>VKY_GR_CLUT_0
.2365	85 83		sta $83				sta ptr_dst+1
.2367	bd 0d 26	lda $260d,x			lda ballB,x 						; get the ball color
.236a	91 82		sta ($82),y			sta (ptr_dst),y						; and store it in the CLUT
.236c	c8		iny				iny									; incrment y for next color component
.236d	bd f5 25	lda $25f5,x			lda ballR,x 						; and repeat
.2370	91 82		sta ($82),y			sta (ptr_dst),y
.2372	c8		iny				iny
.2373	bd dd 25	lda $25dd,x			lda ballG,x
.2376	91 82		sta ($82),y			sta (ptr_dst),y
.2378	64 01		stz $01				stz MMU_IO_CTRL						; reset mmu IO to zero
.237a	60		rts				rts
.237b					SetTimer:
.237b	e6 d0		inc $d0				inc $d0
.237d	a5 d0		lda $d0				lda $d0
.237f	85 f4		sta $f4				sta kernel.args.timer.absolute		; store in timer.absolute paramter
.2381	85 f5		sta $f5				sta kernel.args.timer.cookie		; saved as a cookie to the kernel (same as frame number)
.2383	a9 00		lda #$00			lda #kernel.args.timer.FRAMES		; set the Timer to Frames
.2385	85 f3		sta $f3				sta kernel.args.timer.units			; store in units parameter
.2387	20 f0 ff	jsr $fff0			jsr kernel.Clock.SetTimer			; jsr to Kernel routine to set timer
.238a	60		rts				rts
.238b					setBalls:
.238b	ad a1 26	lda $26a1			lda speedBase
.238e	a2 17		ldx #$17			ldx #23
.2390	9d 1d 25	sta $251d,x			sta ballSdF,X
.2393	ad a2 26	lda $26a2			lda speedBase+1
.2396	9d 35 25	sta $2535,x			sta ballSdL,X
.2399	ca		dex				dex
.239a					sbLoop:
.239a	18		clc				clc									; Then we'll add the speed ratio to each ball up the chain
.239b	bd 1e 25	lda $251e,x			lda ballSdF+1,X						; so each ball is faster than the previous.
.239e	6d a3 26	adc $26a3			adc speedRatio						; save these values in our speed table
.23a1	9d 1d 25	sta $251d,x			sta ballSdF,X
.23a4	bd 36 25	lda $2536,x			lda ballSdL+1,X
.23a7	69 00		adc #$00			adc #$00
.23a9	9d 35 25	sta $2535,x			sta ballSdL,X
.23ac	ca		dex				dex
.23ad	30 02		bmi $23b1			bmi sbDone
.23af	80 e9		bra $239a			bra sbLoop
.23b1					sbDone:
.23b1	60		rts				rts
.23b2					clrScreen:
.23b2	a2 00		ldx #$00			ldx #$00							; set x for indexing
.23b4					csLoop:
.23b4	a9 02		lda #$02			lda #$02							; set the output to character matrix
.23b6	85 01		sta $01				sta MMU_IO_CTRL
.23b8	a9 20		lda #$20			lda #$20							; set a to a blank character
.23ba	9d 00 c0	sta $c000,x			sta $c000+$000,x 					; and save every 240 memory locations
.23bd	9d f0 c0	sta $c0f0,x			sta $c000+$0f0,x 					;
.23c0	9d e0 c1	sta $c1e0,x			sta $c000+$1e0,x 					; We're only going to loop once instead of
.23c3	9d d0 c2	sta $c2d0,x			sta $c000+$2d0,x 					; nesting loops
.23c6	9d c0 c3	sta $c3c0,x			sta $c000+$3c0,x
.23c9	a9 03		lda #$03			lda #$03							; set the output to the color matrix
.23cb	85 01		sta $01				sta MMU_IO_CTRL
.23cd	a9 f0		lda #$f0			lda #$f0							; pick white
.23cf	9d 00 c0	sta $c000,x			sta $c000+$000,x 					; do the same save groups
.23d2	9d f0 c0	sta $c0f0,x			sta $c000+$0f0,x
.23d5	9d e0 c1	sta $c1e0,x			sta $c000+$1e0,x
.23d8	9d d0 c2	sta $c2d0,x			sta $c000+$2d0,x
.23db	9d c0 c3	sta $c3c0,x			sta $c000+$3c0,x
.23de	e8		inx				inx									; inc x
.23df	e0 f1		cpx #$f1			cpx #$f1 							; and check if we've hit 241
.23e1	90 d1		bcc $23b4			bcc csLoop							; if less, continue looping
.23e3	64 01		stz $01				stz MMU_IO_CTRL						; reset IO to 0
.23e5	60		rts				rts
.23e6					printMenu:
.23e6	a2 00		ldx #$00			ldx #$00
.23e8					pMenuLoop:
.23e8	bd bc 29	lda $29bc,x			lda menu,x
.23eb	c9 ff		cmp #$ff			cmp #$ff
.23ed	f0 21		beq $2410			beq pMenuDone
.23ef	85 82		sta $82				sta ptr_dst
.23f1	e8		inx				inx
.23f2	bd bc 29	lda $29bc,x			lda menu,x
.23f5	85 83		sta $83				sta ptr_dst+1
.23f7	e8		inx				inx
.23f8	bd bc 29	lda $29bc,x			lda menu,x
.23fb	85 80		sta $80				sta ptr_src
.23fd	e8		inx				inx
.23fe	bd bc 29	lda $29bc,x			lda menu,x
.2401	85 81		sta $81				sta ptr_src+1
.2403	e8		inx				inx
.2404	bd bc 29	lda $29bc,x			lda menu,x
.2407	8d aa 26	sta $26aa			sta txtColor
.240a	20 1a 24	jsr $241a			jsr outputText
.240d	e8		inx				inx
.240e	80 d8		bra $23e8			bra pMenuLoop
.2410					pMenuDone:
.2410	20 37 24	jsr $2437			jsr printSpeed
.2413	20 76 24	jsr $2476			jsr printGap
.2416	20 a4 24	jsr $24a4			jsr printMidiInst
.2419	60		rts				rts
.241a					outputText:
.241a	a9 02		lda #$02			lda #$02
.241c	85 01		sta $01				sta MMU_IO_CTRL
.241e	a0 00		ldy #$00			ldy #$00
.2420					oTextLoop:
.2420	b1 80		lda ($80),y			lda (ptr_src),y
.2422	c9 5e		cmp #$5e			cmp #94
.2424	f0 0e		beq $2434			beq oTextDone
.2426	91 82		sta ($82),y			sta (ptr_dst),y
.2428	e6 01		inc $01				inc MMU_IO_CTRL
.242a	ad aa 26	lda $26aa			lda txtColor
.242d	91 82		sta ($82),y			sta (ptr_dst),y
.242f	c6 01		dec $01				dec MMU_IO_CTRL
.2431	c8		iny				iny
.2432	80 ec		bra $2420			bra oTextLoop
.2434					oTextDone:
.2434	64 01		stz $01				stz MMU_IO_CTRL
.2436	60		rts				rts
.2437					printSpeed:
.2437	a9 02		lda #$02			lda #$02
.2439	85 01		sta $01				sta MMU_IO_CTRL
.243b	ad a2 26	lda $26a2			lda speedbase+1
.243e	29 0f		and #$0f			and #$0f
.2440	aa		tax				tax
.2441	bd ac 26	lda $26ac,x			lda hex,x
.2444	8d 61 c1	sta $c161			sta $c161
.2447	ad a1 26	lda $26a1			lda speedbase
.244a	4a		lsr a				lsr
.244b	4a		lsr a				lsr
.244c	4a		lsr a				lsr
.244d	4a		lsr a				lsr
.244e	aa		tax				tax
.244f	bd ac 26	lda $26ac,x			lda hex,X
.2452	8d 62 c1	sta $c162			sta $c161+1
.2455	ad a1 26	lda $26a1			lda speedbase
.2458	29 0f		and #$0f			and #$0f
.245a	aa		tax				tax
.245b	bd ac 26	lda $26ac,x			lda hex,x
.245e	8d 63 c1	sta $c163			sta $c161+2
.2461	e6 01		inc $01				inc MMU_IO_CTRL
.2463	a9 b0		lda #$b0			lda #$b0
.2465	8d 60 c1	sta $c160			sta $c160
.2468	8d 61 c1	sta $c161			sta $c161
.246b	8d 62 c1	sta $c162			sta $c162
.246e	8d 63 c1	sta $c163			sta $c163
.2471	64 01		stz $01				stz MMU_IO_CTRL
.2473	64 01		stz $01				stz MMU_IO_CTRL
.2475	60		rts				rts
.2476					printgap:
.2476	a9 02		lda #$02			lda #$02
.2478	85 01		sta $01				sta MMU_IO_CTRL
.247a	ad a3 26	lda $26a3			lda speedRatio
.247d	4a		lsr a				lsr
.247e	4a		lsr a				lsr
.247f	4a		lsr a				lsr
.2480	4a		lsr a				lsr
.2481	aa		tax				tax
.2482	bd ac 26	lda $26ac,x			lda hex,x
.2485	8d b1 c1	sta $c1b1			sta $c1b1
.2488	ad a3 26	lda $26a3			lda speedRatio
.248b	29 0f		and #$0f			and #$0f
.248d	aa		tax				tax
.248e	bd ac 26	lda $26ac,x			lda hex,x
.2491	8d b2 c1	sta $c1b2			sta $c1b1+1
.2494	e6 01		inc $01				inc MMU_IO_CTRL
.2496	a9 b0		lda #$b0			lda #$b0
.2498	8d b0 c1	sta $c1b0			sta $c1b0
.249b	8d b1 c1	sta $c1b1			sta $c1b1
.249e	8d b2 c1	sta $c1b2			sta $c1b2
.24a1	64 01		stz $01				stz MMU_IO_CTRL
.24a3	60		rts				rts
.24a4					printMidiInst:
.24a4	ae a6 26	ldx $26a6			ldx midiInst
.24a7	bd 25 26	lda $2625,x			lda midiTable,x
.24aa	8d 00 de	sta $de00			sta MULU_A_L
.24ad	9c 01 de	stz $de01			stz MULU_A_H
.24b0	a9 17		lda #$17			lda #23
.24b2	8d 02 de	sta $de02			sta MULU_B_L
.24b5	9c 03 de	stz $de03			stz MULU_B_H
.24b8	18		clc				clc
.24b9	ad 10 de	lda $de10			lda MULU_LL
.24bc	69 2c		adc #$2c			adc #<instrumentList
.24be	85 80		sta $80				sta ptr_src
.24c0	ad 11 de	lda $de11			lda MULU_LH
.24c3	69 31		adc #$31			adc #>instrumentList
.24c5	85 81		sta $81				sta ptr_src+1
.24c7	a9 33		lda #$33			lda #$33
.24c9	85 82		sta $82				sta ptr_dst
.24cb	a9 c2		lda #$c2			lda #$c2
.24cd	85 83		sta $83				sta ptr_dst+1
.24cf	a9 02		lda #$02			lda #$02
.24d1	85 01		sta $01				sta MMU_IO_CTRL
.24d3	a0 00		ldy #$00			ldy #$00
.24d5					pMidiLoop:
.24d5	a9 02		lda #$02			lda #$02
.24d7	85 01		sta $01				sta MMU_IO_CTRL
.24d9	b1 80		lda ($80),y			lda (ptr_src),y
.24db	91 82		sta ($82),y			sta (ptr_dst),y
.24dd	e6 01		inc $01				inc MMU_IO_CTRL
.24df	a9 b0		lda #$b0			lda #$b0
.24e1	91 82		sta ($82),y			sta (ptr_dst),y
.24e3	c8		iny				iny
.24e4	c0 17		cpy #$17			cpy #23
.24e6	90 ed		bcc $24d5			bcc pMidiLoop
.24e8	64 01		stz $01				stz MMU_IO_CTRL
.24ea	60		rts				rts
.24eb					resetBalls:
.24eb	a2 00		ldx #$00			ldx #00
.24ed					rBallLoop:
.24ed	a9 20		lda #$20			lda #$20
.24ef	9d 65 25	sta $2565,x			sta ballXLO,X
.24f2	a9 00		lda #$00			lda #$00
.24f4	9d 7d 25	sta $257d,x			sta ballxHI,x
.24f7	9d 4d 25	sta $254d,x			sta ballXFR,x
.24fa	a9 01		lda #$01			lda #$01
.24fc	9d 05 25	sta $2505,x			sta ballDir,x
.24ff	e8		inx				inx
.2500	e0 18		cpx #$18			cpx #24
.2502	90 e9		bcc $24ed			bcc rBallLoop
.2504	60		rts				rts
>2505	01 01 01 01 01 01 01 01		ballDir:	.byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
>250d	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01
>251d	00 f0 e0 d0 c0 b0 a0 90		ballSdF:	.byte $00,$f0,$e0,$d0,$c0,$b0,$a0,$90,$80,$70,$60,$50,$40,$30,$20,$10,$00,$f0,$e0,$d0,$c0,$b0,$a0,$90
>2525	80 70 60 50 40 30 20 10 00 f0 e0 d0 c0 b0 a0 90
>2535	02 01 01 01 01 01 01 01		ballSdL:	.byte $02,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00
>253d	01 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00
>254d	00 00 00 00 00 00 00 00		ballXFR:	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>2555	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>2565	20 20 20 20 20 20 20 20		ballXLO:	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
>256d	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>257d	00 00 00 00 00 00 00 00		ballXHI:	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>2585	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>2595	21 2b 35 3f 49 53 5d 67		ballYLO:	.byte $21,$2b,$35,$3f,$49,$53,$5d,$67,$71,$7b,$85,$8f,$99,$a3,$ad,$b7,$c1,$cb,$d5,$df,$e9,$f3,$fd,$07
>259d	71 7b 85 8f 99 a3 ad b7 c1 cb d5 df e9 f3 fd 07
>25ad	00 00 00 00 00 00 00 00		ballYHI:	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01
>25b5	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>25c5	3c 3b 3a 39 38 37 36 35		ballNote:	.byte 60, 59, 58, 57, 56, 55, 54, 53, 52 ,51 ,50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37
>25cd	34 33 32 31 30 2f 2e 2d 2c 2b 2a 29 28 27 26 25
>25dd	00 00 00 00 00 00 00 00		ballG:		.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>25e5	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>25f5	00 00 00 00 00 00 00 00		ballR:		.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>25fd	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>260d	00 00 00 00 00 00 00 00		ballB:		.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>2615	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>2625	00 01 02 03 04 05 06 07		midiTable:	.byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,24,25,26,27,28,32,33,34,35,36,37,38,39,45,46,47     ;31
>262d	08 09 0a 0b 0c 0d 0e 0f 18 19 1a 1b 1c 20 21 22
>263d	23 24 25 26 27 2d 2e 2f
>2645	58 60 62 63 64 67 68 69					.byte 88,96,98,99,100,103,104,105,106,107,108,112,113,114,115,116,117,118,123,127				;51
>264d	6a 6b 6c 70 71 72 73 74 75 76 7b 7f
>2659	00 00 00 00 00 00 3f 7f		colorG:		.byte $00,$00,        $00,       $00,     $00, $00,   $3F,   $7F,   $BF,    $FF, $FF,    $FF,     $FF,$FF,      $FF,   $FF,  $FF,   $BF,       $7F, $3F,   $00,  $00,    $00,     $00
>2661	bf ff ff ff ff ff ff ff ff bf 7f 3f 00 00 00 00
>2671	ff bf 7f 3f 00 00 00 00		colorR:		.byte $FF,$BF,        $7F,       $3F,     $00, $00,   $00,   $00,   $00,    $00, $00,    $00,     $00,$3F,      $7F,   $BF,  $FF,   $FF,       $FF, $FF,   $FF,  $FF,    $FF,     $FF
>2679	00 00 00 00 00 3f 7f bf ff ff ff ff ff ff ff ff
>2689	ff ff ff ff ff bf bf bf		colorB:		.byte $FF,$FF,        $FF,       $FF,     $FF, $BF,   $BF,   $BF,   $BF,    $BF, $7F,    $7F,     $7F,$7F,      $3F,   $3F,  $3F,   $3F,       $00, $00,   $00,  $00,    $00,     $00
>2691	bf bf 7f 7f 7f 7f 3f 3f 3f 3f 00 00 00 00 00 00
>26a1	90 00				speedBase:		.word $0090 					; The slowest ball speed
>26a3	10				speedRatio:		.byte $10						; the amount between balls
>26a4	00				resultFR:		.byte $00
>26a5	00				resultLO:		.byte $00
>26a6	0b				midiInst:		.byte 11
>26a7	20				totalColors:	.byte 32
>26a8	00 00				spriteLoc:		.word $0000
>26aa	00				txtColor:		.byte $00
>26ab	00				menuFlag:		.byte $00
>26ac	30 31 32 33 34 35 36 37		hex:			.text "0123456789abcdef"
>26b4	38 39 61 62 63 64 65 66
.26bc					font:
>26bc	00 00 00 00 00 00 00 00		.binary "atari.bin"
>26c4	00 18 18 18 18 00 18 00 00 66 66 66 00 00 00 00
>26d4	00 66 ff 66 66 ff 66 00 18 3e 60 3c 06 7c 18 00
>26e4	00 66 6c 18 30 66 46 00 1c 36 1c 38 6f 66 3b 00
>26f4	00 18 18 18 00 00 00 00 0c 18 30 30 30 18 0c 00
>2704	30 18 0c 0c 0c 18 30 00 00 66 3c ff 3c 66 00 00
>2714	00 18 18 7e 18 18 00 00 00 00 00 00 00 18 18 30
>2724	00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>2734	00 03 06 0c 18 30 60 00 00 3c 66 6e 76 66 3c 00
>2744	00 18 38 18 18 18 7e 00 00 3c 66 0c 18 30 7e 00
>2754	00 7e 0c 18 0c 66 3c 00 00 0c 1c 3c 6c 7e 0c 00
>2764	00 7e 60 7c 06 66 3c 00 00 3c 60 7c 66 66 3c 00
>2774	00 7e 06 0c 18 30 30 00 00 3c 66 3c 66 66 3c 00
>2784	00 3c 66 3e 06 0c 38 00 00 00 18 00 00 18 00 00
>2794	00 00 18 00 00 18 18 30 0c 18 30 60 30 18 0c 00
>27a4	00 00 7e 00 7e 00 00 00 30 18 0c 06 0c 18 30 00
>27b4	3c 66 06 0c 18 00 18 00 00 3c 66 6e 6e 60 3e 00
>27c4	00 18 3c 66 66 7e 66 00 00 7c 66 7c 66 66 7c 00
>27d4	00 3c 66 60 60 66 3c 00 00 78 6c 66 66 6c 78 00
>27e4	00 7e 60 7c 60 60 7e 00 00 7e 60 7c 60 60 60 00
>27f4	00 3e 60 60 6e 66 3c 00 00 66 66 7e 66 66 66 00
>2804	00 7e 18 18 18 18 7e 00 00 06 06 06 06 66 3c 00
>2814	00 66 6c 78 78 6c 66 00 00 60 60 60 60 60 7e 00
>2824	00 63 77 7f 6b 63 63 00 00 66 76 7e 7e 6e 66 00
>2834	00 3c 66 66 66 66 3c 00 00 7c 66 66 7c 60 60 00
>2844	00 3c 66 66 66 6c 36 00 00 7c 66 66 7c 6c 66 00
>2854	00 3c 60 3c 06 06 3c 00 00 7e 18 18 18 18 18 00
>2864	00 66 66 66 66 66 7e 00 00 66 66 66 66 3c 18 00
>2874	00 63 63 6b 7f 77 63 00 00 66 66 3c 3c 66 66 00
>2884	00 66 66 3c 18 18 18 00 00 7e 0c 18 30 60 7e 00
>2894	3c 30 30 30 30 30 3c 00 00 60 30 18 0c 06 03 00
>28a4	3c 0c 0c 0c 0c 0c 3c 00 00 18 3c 66 00 00 00 00
>28b4	33 99 cc 66 33 99 cc 66 00 18 18 18 00 00 00 00
>28c4	00 00 3c 06 3e 66 3e 00 00 60 60 7c 66 66 7c 00
>28d4	00 00 3c 60 60 60 3c 00 00 06 06 3e 66 66 3e 00
>28e4	00 00 3c 66 7e 60 3c 00 00 0e 18 3e 18 18 18 00
>28f4	00 00 3e 66 66 3e 06 7c 00 60 60 7c 66 66 66 00
>2904	00 18 00 38 18 18 3c 00 00 06 00 06 06 06 06 3c
>2914	00 60 60 6c 78 6c 66 00 00 38 18 18 18 18 3c 00
>2924	00 00 66 7f 7f 6b 63 00 00 00 7c 66 66 66 66 00
>2934	00 00 3c 66 66 66 3c 00 00 00 7c 66 66 7c 60 60
>2944	00 00 3e 66 66 3e 06 06 00 00 7c 66 60 60 60 00
>2954	00 00 3e 60 3c 06 7c 00 00 18 7e 18 18 18 0e 00
>2964	00 00 66 66 66 66 3e 00 00 00 66 66 66 3c 18 00
>2974	00 00 63 6b 7f 3e 36 00 00 00 66 3c 18 3c 66 00
>2984	00 00 66 66 66 3e 0c 78 00 00 7e 0c 18 30 7e 00
>2994	0c 10 10 20 10 10 0c 00 10 10 10 10 10 10 10 10
>29a4	30 08 08 04 08 08 30 00 00 00 30 49 06 00 00 00
>29b4	08 04 04 08 10 10 08 00

;******  Processing file: menu.s

.29bc					menu:
>29bc	60 c0 e5 29			            .word $c060,mTitle
>29c0	70				            .byte $70
>29c1	41 c1 ee 29			            .word $c141,mSpeed
>29c5	f0				            .byte $f0
>29c6	91 c1 0f 2a			            .word $c191,gap
>29ca	f0				            .byte $f0
>29cb	e1 c1 30 2a			            .word $c1e1,inst
>29cf	f0				            .byte $f0
>29d0	a1 c3 54 2a			            .word $c3a1,prStart
>29d4	f0				            .byte $f0
>29d5	a9 c2 6b 2a			            .word $c2a9,prTab
>29d9	f0				            .byte $f0
>29da	d1 c2 89 2a			            .word $c2d1,quitP
>29de	50				            .byte $50
>29df	9f c4 9b 2a			            .word $c49f,dfs
>29e3	50				            .byte $50
>29e4	ff				            .byte $ff
>29e5	50 45 4e 44 55 4c 55 4d		mTitle:     .text   "PENDULUM^"
>29ed	5e
>29ee	55 73 65 20 4c 45 46 54		mSpeed:     .text   "Use LEFT/RIGHT to set speed.   $^"
>29f6	2f 52 49 47 48 54 20 74 6f 20 73 65 74 20 73 70
>2a06	65 65 64 2e 20 20 20 24 5e
>2a0f	55 73 65 20 55 50 2f 44		gap:        .text   "Use UP/DOWN to set the gap.    $^"
>2a17	4f 57 4e 20 74 6f 20 73 65 74 20 74 68 65 20 67
>2a27	61 70 2e 20 20 20 20 24 5e
>2a30	55 73 65 20 49 2f 53 48		inst:       .text   "Use I/SHIFT I to change instrument.^"
>2a38	49 46 54 20 49 20 74 6f 20 63 68 61 6e 67 65 20
>2a48	69 6e 73 74 72 75 6d 65 6e 74 2e 5e
>2a54	50 52 45 53 53 20 52 45		prStart:    .text   "PRESS RETURN TO START.^"
>2a5c	54 55 52 4e 20 54 4f 20 53 54 41 52 54 2e 5e
>2a6b	54 41 42 20 77 69 6c 6c		prTab:      .text   "TAB will return to this menu.^"
>2a73	20 72 65 74 75 72 6e 20 74 6f 20 74 68 69 73 20
>2a83	6d 65 6e 75 2e 5e
>2a89	50 72 65 73 73 20 27 71		quitP       .text   "Press 'q' to quit^"
>2a91	27 20 74 6f 20 71 75 69 74 5e
>2a9b	44 65 66 69 61 6e 63 65		dfs:        .text   "DefianceStudios^"
>2aa3	53 74 75 64 69 6f 73 5e
>2aab	ff				.byte $ff

;******  Return to file: pendulum.asm


;******  Processing file: ball.s

.2aac					CLUT0:
>2aac	00 00 00 ff				.byte	$0,$0,$0,$ff
>2ab0	ff ff ff ff				.byte	$ff,$ff,$ff,$ff
>2ab4	3c 28 45 ff				.byte	$3c,$28,$45,$ff
>2ab8	31 39 66 ff				.byte	$31,$39,$66,$ff
>2abc	3b 56 8f ff				.byte	$3b,$56,$8f,$ff
>2ac0	26 71 df ff				.byte	$26,$71,$df,$ff
>2ac4	66 a0 d9 ff				.byte	$66,$a0,$d9,$ff
>2ac8	9a c3 ee ff				.byte	$9a,$c3,$ee,$ff
>2acc	36 f2 fb ff				.byte	$36,$f2,$fb,$ff
>2ad0	50 e5 99 ff				.byte	$50,$e5,$99,$ff
>2ad4	30 be 6a ff				.byte	$30,$be,$6a,$ff
>2ad8	6e 94 37 ff				.byte	$6e,$94,$37,$ff
>2adc	2f 69 4b ff				.byte	$2f,$69,$4b,$ff
>2ae0	24 4b 52 ff				.byte	$24,$4b,$52,$ff
>2ae4	39 3c 32 ff				.byte	$39,$3c,$32,$ff
>2ae8	74 3f 3f ff				.byte	$74,$3f,$3f,$ff
>2aec	82 60 30 ff				.byte	$82,$60,$30,$ff
>2af0	e1 6e 5b ff				.byte	$e1,$6e,$5b,$ff
>2af4	ff 9b 63 ff				.byte	$ff,$9b,$63,$ff
>2af8	e4 cd 5f ff				.byte	$e4,$cd,$5f,$ff
>2afc	fc db cb ff				.byte	$fc,$db,$cb,$ff
>2b00	ba 7b d7 ff				.byte	$ba,$7b,$d7,$ff
>2b04	b7 ad 9b ff				.byte	$b7,$ad,$9b,$ff
>2b08	87 7e 84 ff				.byte	$87,$7e,$84,$ff
>2b0c	6a 6a 69 ff				.byte	$6a,$6a,$69,$ff
>2b10	52 56 59 ff				.byte	$52,$56,$59,$ff
>2b14	8a 42 76 ff				.byte	$8a,$42,$76,$ff
>2b18	32 32 ac ff				.byte	$32,$32,$ac,$ff
>2b1c	63 57 d9 ff				.byte	$63,$57,$d9,$ff
>2b20	ba 7b d7 ff				.byte	$ba,$7b,$d7,$ff
>2b24	4a 97 8f ff				.byte	$4a,$97,$8f,$ff
>2b28	30 6f 8a ff				.byte	$30,$6f,$8a,$ff
.2b2c					sprite1:
>2b2c	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2b34	00 01 02 02 02 02 01 00			.byte	$0,$1,$2,$2,$2,$2,$1,$0
>2b3c	01 02 02 02 02 02 02 01			.byte	$1,$2,$2,$2,$2,$2,$2,$1
>2b44	01 02 02 02 02 02 02 01			.byte	$1,$2,$2,$2,$2,$2,$2,$1
>2b4c	01 02 02 02 02 02 02 01			.byte	$1,$2,$2,$2,$2,$2,$2,$1
>2b54	01 02 02 02 02 02 02 01			.byte	$1,$2,$2,$2,$2,$2,$2,$1
>2b5c	00 01 02 02 02 02 01 00			.byte	$0,$1,$2,$2,$2,$2,$1,$0
>2b64	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2b6c					sprite2:
>2b6c	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2b74	00 01 03 03 03 03 01 00			.byte	$0,$1,$3,$3,$3,$3,$1,$0
>2b7c	01 03 03 03 03 03 03 01			.byte	$1,$3,$3,$3,$3,$3,$3,$1
>2b84	01 03 03 03 03 03 03 01			.byte	$1,$3,$3,$3,$3,$3,$3,$1
>2b8c	01 03 03 03 03 03 03 01			.byte	$1,$3,$3,$3,$3,$3,$3,$1
>2b94	01 03 03 03 03 03 03 01			.byte	$1,$3,$3,$3,$3,$3,$3,$1
>2b9c	00 01 03 03 03 03 01 00			.byte	$0,$1,$3,$3,$3,$3,$1,$0
>2ba4	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2bac					sprite3:
>2bac	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2bb4	00 01 04 04 04 04 01 00			.byte	$0,$1,$4,$4,$4,$4,$1,$0
>2bbc	01 04 04 04 04 04 04 01			.byte	$1,$4,$4,$4,$4,$4,$4,$1
>2bc4	01 04 04 04 04 04 04 01			.byte	$1,$4,$4,$4,$4,$4,$4,$1
>2bcc	01 04 04 04 04 04 04 01			.byte	$1,$4,$4,$4,$4,$4,$4,$1
>2bd4	01 04 04 04 04 04 04 01			.byte	$1,$4,$4,$4,$4,$4,$4,$1
>2bdc	00 01 04 04 04 04 01 00			.byte	$0,$1,$4,$4,$4,$4,$1,$0
>2be4	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2bec					sprite4:
>2bec	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2bf4	00 01 05 05 05 05 01 00			.byte	$0,$1,$5,$5,$5,$5,$1,$0
>2bfc	01 05 05 05 05 05 05 01			.byte	$1,$5,$5,$5,$5,$5,$5,$1
>2c04	01 05 05 05 05 05 05 01			.byte	$1,$5,$5,$5,$5,$5,$5,$1
>2c0c	01 05 05 05 05 05 05 01			.byte	$1,$5,$5,$5,$5,$5,$5,$1
>2c14	01 05 05 05 05 05 05 01			.byte	$1,$5,$5,$5,$5,$5,$5,$1
>2c1c	00 01 05 05 05 05 01 00			.byte	$0,$1,$5,$5,$5,$5,$1,$0
>2c24	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2c2c					sprite5:
>2c2c	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2c34	00 01 06 06 06 06 01 00			.byte	$0,$1,$6,$6,$6,$6,$1,$0
>2c3c	01 06 06 06 06 06 06 01			.byte	$1,$6,$6,$6,$6,$6,$6,$1
>2c44	01 06 06 06 06 06 06 01			.byte	$1,$6,$6,$6,$6,$6,$6,$1
>2c4c	01 06 06 06 06 06 06 01			.byte	$1,$6,$6,$6,$6,$6,$6,$1
>2c54	01 06 06 06 06 06 06 01			.byte	$1,$6,$6,$6,$6,$6,$6,$1
>2c5c	00 01 06 06 06 06 01 00			.byte	$0,$1,$6,$6,$6,$6,$1,$0
>2c64	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2c6c					sprite6:
>2c6c	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2c74	00 01 07 07 07 07 01 00			.byte	$0,$1,$7,$7,$7,$7,$1,$0
>2c7c	01 07 07 07 07 07 07 01			.byte	$1,$7,$7,$7,$7,$7,$7,$1
>2c84	01 07 07 07 07 07 07 01			.byte	$1,$7,$7,$7,$7,$7,$7,$1
>2c8c	01 07 07 07 07 07 07 01			.byte	$1,$7,$7,$7,$7,$7,$7,$1
>2c94	01 07 07 07 07 07 07 01			.byte	$1,$7,$7,$7,$7,$7,$7,$1
>2c9c	00 01 07 07 07 07 01 00			.byte	$0,$1,$7,$7,$7,$7,$1,$0
>2ca4	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2cac					sprite7:
>2cac	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2cb4	00 01 08 08 08 08 01 00			.byte	$0,$1,$8,$8,$8,$8,$1,$0
>2cbc	01 08 08 08 08 08 08 01			.byte	$1,$8,$8,$8,$8,$8,$8,$1
>2cc4	01 08 08 08 08 08 08 01			.byte	$1,$8,$8,$8,$8,$8,$8,$1
>2ccc	01 08 08 08 08 08 08 01			.byte	$1,$8,$8,$8,$8,$8,$8,$1
>2cd4	01 08 08 08 08 08 08 01			.byte	$1,$8,$8,$8,$8,$8,$8,$1
>2cdc	00 01 08 08 08 08 01 00			.byte	$0,$1,$8,$8,$8,$8,$1,$0
>2ce4	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2cec					sprite8:
>2cec	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2cf4	00 01 09 09 09 09 01 00			.byte	$0,$1,$9,$9,$9,$9,$1,$0
>2cfc	01 09 09 09 09 09 09 01			.byte	$1,$9,$9,$9,$9,$9,$9,$1
>2d04	01 09 09 09 09 09 09 01			.byte	$1,$9,$9,$9,$9,$9,$9,$1
>2d0c	01 09 09 09 09 09 09 01			.byte	$1,$9,$9,$9,$9,$9,$9,$1
>2d14	01 09 09 09 09 09 09 01			.byte	$1,$9,$9,$9,$9,$9,$9,$1
>2d1c	00 01 09 09 09 09 01 00			.byte	$0,$1,$9,$9,$9,$9,$1,$0
>2d24	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2d2c					sprite9:
>2d2c	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2d34	00 01 0a 0a 0a 0a 01 00			.byte	$0,$1,$a,$a,$a,$a,$1,$0
>2d3c	01 0a 0a 0a 0a 0a 0a 01			.byte	$1,$a,$a,$a,$a,$a,$a,$1
>2d44	01 0a 0a 0a 0a 0a 0a 01			.byte	$1,$a,$a,$a,$a,$a,$a,$1
>2d4c	01 0a 0a 0a 0a 0a 0a 01			.byte	$1,$a,$a,$a,$a,$a,$a,$1
>2d54	01 0a 0a 0a 0a 0a 0a 01			.byte	$1,$a,$a,$a,$a,$a,$a,$1
>2d5c	00 01 0a 0a 0a 0a 01 00			.byte	$0,$1,$a,$a,$a,$a,$1,$0
>2d64	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2d6c					sprite10:
>2d6c	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2d74	00 01 0b 0b 0b 0b 01 00			.byte	$0,$1,$b,$b,$b,$b,$1,$0
>2d7c	01 0b 0b 0b 0b 0b 0b 01			.byte	$1,$b,$b,$b,$b,$b,$b,$1
>2d84	01 0b 0b 0b 0b 0b 0b 01			.byte	$1,$b,$b,$b,$b,$b,$b,$1
>2d8c	01 0b 0b 0b 0b 0b 0b 01			.byte	$1,$b,$b,$b,$b,$b,$b,$1
>2d94	01 0b 0b 0b 0b 0b 0b 01			.byte	$1,$b,$b,$b,$b,$b,$b,$1
>2d9c	00 01 0b 0b 0b 0b 01 00			.byte	$0,$1,$b,$b,$b,$b,$1,$0
>2da4	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2dac					sprite11:
>2dac	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2db4	00 01 0c 0c 0c 0c 01 00			.byte	$0,$1,$c,$c,$c,$c,$1,$0
>2dbc	01 0c 0c 0c 0c 0c 0c 01			.byte	$1,$c,$c,$c,$c,$c,$c,$1
>2dc4	01 0c 0c 0c 0c 0c 0c 01			.byte	$1,$c,$c,$c,$c,$c,$c,$1
>2dcc	01 0c 0c 0c 0c 0c 0c 01			.byte	$1,$c,$c,$c,$c,$c,$c,$1
>2dd4	01 0c 0c 0c 0c 0c 0c 01			.byte	$1,$c,$c,$c,$c,$c,$c,$1
>2ddc	00 01 0c 0c 0c 0c 01 00			.byte	$0,$1,$c,$c,$c,$c,$1,$0
>2de4	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2dec					sprite12:
>2dec	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2df4	00 01 0d 0d 0d 0d 01 00			.byte	$0,$1,$d,$d,$d,$d,$1,$0
>2dfc	01 0d 0d 0d 0d 0d 0d 01			.byte	$1,$d,$d,$d,$d,$d,$d,$1
>2e04	01 0d 0d 0d 0d 0d 0d 01			.byte	$1,$d,$d,$d,$d,$d,$d,$1
>2e0c	01 0d 0d 0d 0d 0d 0d 01			.byte	$1,$d,$d,$d,$d,$d,$d,$1
>2e14	01 0d 0d 0d 0d 0d 0d 01			.byte	$1,$d,$d,$d,$d,$d,$d,$1
>2e1c	00 01 0d 0d 0d 0d 01 00			.byte	$0,$1,$d,$d,$d,$d,$1,$0
>2e24	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2e2c					sprite13:
>2e2c	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2e34	00 01 0e 0e 0e 0e 01 00			.byte	$0,$1,$e,$e,$e,$e,$1,$0
>2e3c	01 0e 0e 0e 0e 0e 0e 01			.byte	$1,$e,$e,$e,$e,$e,$e,$1
>2e44	01 0e 0e 0e 0e 0e 0e 01			.byte	$1,$e,$e,$e,$e,$e,$e,$1
>2e4c	01 0e 0e 0e 0e 0e 0e 01			.byte	$1,$e,$e,$e,$e,$e,$e,$1
>2e54	01 0e 0e 0e 0e 0e 0e 01			.byte	$1,$e,$e,$e,$e,$e,$e,$1
>2e5c	00 01 0e 0e 0e 0e 01 00			.byte	$0,$1,$e,$e,$e,$e,$1,$0
>2e64	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2e6c					sprite14:
>2e6c	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2e74	00 01 0f 0f 0f 0f 01 00			.byte	$0,$1,$f,$f,$f,$f,$1,$0
>2e7c	01 0f 0f 0f 0f 0f 0f 01			.byte	$1,$f,$f,$f,$f,$f,$f,$1
>2e84	01 0f 0f 0f 0f 0f 0f 01			.byte	$1,$f,$f,$f,$f,$f,$f,$1
>2e8c	01 0f 0f 0f 0f 0f 0f 01			.byte	$1,$f,$f,$f,$f,$f,$f,$1
>2e94	01 0f 0f 0f 0f 0f 0f 01			.byte	$1,$f,$f,$f,$f,$f,$f,$1
>2e9c	00 01 0f 0f 0f 0f 01 00			.byte	$0,$1,$f,$f,$f,$f,$1,$0
>2ea4	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2eac					sprite15:
>2eac	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2eb4	00 01 10 10 10 10 01 00			.byte	$0,$1,$10,$10,$10,$10,$1,$0
>2ebc	01 10 10 10 10 10 10 01			.byte	$1,$10,$10,$10,$10,$10,$10,$1
>2ec4	01 10 10 10 10 10 10 01			.byte	$1,$10,$10,$10,$10,$10,$10,$1
>2ecc	01 10 10 10 10 10 10 01			.byte	$1,$10,$10,$10,$10,$10,$10,$1
>2ed4	01 10 10 10 10 10 10 01			.byte	$1,$10,$10,$10,$10,$10,$10,$1
>2edc	00 01 10 10 10 10 01 00			.byte	$0,$1,$10,$10,$10,$10,$1,$0
>2ee4	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2eec					sprite16:
>2eec	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2ef4	00 01 11 11 11 11 01 00			.byte	$0,$1,$11,$11,$11,$11,$1,$0
>2efc	01 11 11 11 11 11 11 01			.byte	$1,$11,$11,$11,$11,$11,$11,$1
>2f04	01 11 11 11 11 11 11 01			.byte	$1,$11,$11,$11,$11,$11,$11,$1
>2f0c	01 11 11 11 11 11 11 01			.byte	$1,$11,$11,$11,$11,$11,$11,$1
>2f14	01 11 11 11 11 11 11 01			.byte	$1,$11,$11,$11,$11,$11,$11,$1
>2f1c	00 01 11 11 11 11 01 00			.byte	$0,$1,$11,$11,$11,$11,$1,$0
>2f24	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2f2c					sprite17:
>2f2c	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2f34	00 01 12 12 12 12 01 00			.byte	$0,$1,$12,$12,$12,$12,$1,$0
>2f3c	01 12 12 12 12 12 12 01			.byte	$1,$12,$12,$12,$12,$12,$12,$1
>2f44	01 12 12 12 12 12 12 01			.byte	$1,$12,$12,$12,$12,$12,$12,$1
>2f4c	01 12 12 12 12 12 12 01			.byte	$1,$12,$12,$12,$12,$12,$12,$1
>2f54	01 12 12 12 12 12 12 01			.byte	$1,$12,$12,$12,$12,$12,$12,$1
>2f5c	00 01 12 12 12 12 01 00			.byte	$0,$1,$12,$12,$12,$12,$1,$0
>2f64	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2f6c					sprite18:
>2f6c	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2f74	00 01 13 13 13 13 01 00			.byte	$0,$1,$13,$13,$13,$13,$1,$0
>2f7c	01 13 13 13 13 13 13 01			.byte	$1,$13,$13,$13,$13,$13,$13,$1
>2f84	01 13 13 13 13 13 13 01			.byte	$1,$13,$13,$13,$13,$13,$13,$1
>2f8c	01 13 13 13 13 13 13 01			.byte	$1,$13,$13,$13,$13,$13,$13,$1
>2f94	01 13 13 13 13 13 13 01			.byte	$1,$13,$13,$13,$13,$13,$13,$1
>2f9c	00 01 13 13 13 13 01 00			.byte	$0,$1,$13,$13,$13,$13,$1,$0
>2fa4	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2fac					sprite19:
>2fac	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2fb4	00 01 14 14 14 14 01 00			.byte	$0,$1,$14,$14,$14,$14,$1,$0
>2fbc	01 14 14 14 14 14 14 01			.byte	$1,$14,$14,$14,$14,$14,$14,$1
>2fc4	01 14 14 14 14 14 14 01			.byte	$1,$14,$14,$14,$14,$14,$14,$1
>2fcc	01 14 14 14 14 14 14 01			.byte	$1,$14,$14,$14,$14,$14,$14,$1
>2fd4	01 14 14 14 14 14 14 01			.byte	$1,$14,$14,$14,$14,$14,$14,$1
>2fdc	00 01 14 14 14 14 01 00			.byte	$0,$1,$14,$14,$14,$14,$1,$0
>2fe4	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2fec					sprite20:
>2fec	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2ff4	00 01 15 15 15 15 01 00			.byte	$0,$1,$15,$15,$15,$15,$1,$0
>2ffc	01 15 15 15 15 15 15 01			.byte	$1,$15,$15,$15,$15,$15,$15,$1
>3004	01 15 15 15 15 15 15 01			.byte	$1,$15,$15,$15,$15,$15,$15,$1
>300c	01 15 15 15 15 15 15 01			.byte	$1,$15,$15,$15,$15,$15,$15,$1
>3014	01 15 15 15 15 15 15 01			.byte	$1,$15,$15,$15,$15,$15,$15,$1
>301c	00 01 15 15 15 15 01 00			.byte	$0,$1,$15,$15,$15,$15,$1,$0
>3024	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.302c					sprite21:
>302c	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>3034	00 01 16 16 16 16 01 00			.byte	$0,$1,$16,$16,$16,$16,$1,$0
>303c	01 16 16 16 16 16 16 01			.byte	$1,$16,$16,$16,$16,$16,$16,$1
>3044	01 16 16 16 16 16 16 01			.byte	$1,$16,$16,$16,$16,$16,$16,$1
>304c	01 16 16 16 16 16 16 01			.byte	$1,$16,$16,$16,$16,$16,$16,$1
>3054	01 16 16 16 16 16 16 01			.byte	$1,$16,$16,$16,$16,$16,$16,$1
>305c	00 01 16 16 16 16 01 00			.byte	$0,$1,$16,$16,$16,$16,$1,$0
>3064	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.306c					sprite22:
>306c	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>3074	00 01 17 17 17 17 01 00			.byte	$0,$1,$17,$17,$17,$17,$1,$0
>307c	01 17 17 17 17 17 17 01			.byte	$1,$17,$17,$17,$17,$17,$17,$1
>3084	01 17 17 17 17 17 17 01			.byte	$1,$17,$17,$17,$17,$17,$17,$1
>308c	01 17 17 17 17 17 17 01			.byte	$1,$17,$17,$17,$17,$17,$17,$1
>3094	01 17 17 17 17 17 17 01			.byte	$1,$17,$17,$17,$17,$17,$17,$1
>309c	00 01 17 17 17 17 01 00			.byte	$0,$1,$17,$17,$17,$17,$1,$0
>30a4	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.30ac					sprite23:
>30ac	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>30b4	00 01 18 18 18 18 01 00			.byte	$0,$1,$18,$18,$18,$18,$1,$0
>30bc	01 18 18 18 18 18 18 01			.byte	$1,$18,$18,$18,$18,$18,$18,$1
>30c4	01 18 18 18 18 18 18 01			.byte	$1,$18,$18,$18,$18,$18,$18,$1
>30cc	01 18 18 18 18 18 18 01			.byte	$1,$18,$18,$18,$18,$18,$18,$1
>30d4	01 18 18 18 18 18 18 01			.byte	$1,$18,$18,$18,$18,$18,$18,$1
>30dc	00 01 18 18 18 18 01 00			.byte	$0,$1,$18,$18,$18,$18,$1,$0
>30e4	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.30ec					sprite24:
>30ec	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>30f4	00 01 19 19 19 19 01 00			.byte	$0,$1,$19,$19,$19,$19,$1,$0
>30fc	01 19 19 19 19 19 19 01			.byte	$1,$19,$19,$19,$19,$19,$19,$1
>3104	01 19 19 19 19 19 19 01			.byte	$1,$19,$19,$19,$19,$19,$19,$1
>310c	01 19 19 19 19 19 19 01			.byte	$1,$19,$19,$19,$19,$19,$19,$1
>3114	01 19 19 19 19 19 19 01			.byte	$1,$19,$19,$19,$19,$19,$19,$1
>311c	00 01 19 19 19 19 01 00			.byte	$0,$1,$19,$19,$19,$19,$1,$0
>3124	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0

;******  Return to file: pendulum.asm


;******  Processing file: midi_instruments.s

.312c					instrumentList:
>312c	41 63 6f 75 73 74 69 63		.text "Acoustic Grand Piano   "
>3134	20 47 72 61 6e 64 20 50 69 61 6e 6f 20 20 20
>3143	42 72 69 67 68 74 20 41		.text "Bright Acoustic Piano  "
>314b	63 6f 75 73 74 69 63 20 50 69 61 6e 6f 20 20
>315a	45 6c 65 63 74 72 69 63		.text "Electric Grand Piano   "
>3162	20 47 72 61 6e 64 20 50 69 61 6e 6f 20 20 20
>3171	48 6f 6e 6b 79 2d 74 6f		.text "Honky-tonk Piano       "
>3179	6e 6b 20 50 69 61 6e 6f 20 20 20 20 20 20 20
>3188	45 6c 65 63 74 72 69 63		.text "Electric Piano 1       "
>3190	20 50 69 61 6e 6f 20 31 20 20 20 20 20 20 20
>319f	45 6c 65 63 74 72 69 63		.text "Electric Piano 2       "
>31a7	20 50 69 61 6e 6f 20 32 20 20 20 20 20 20 20
>31b6	48 61 72 70 73 69 63 68		.text "Harpsichord            "
>31be	6f 72 64 20 20 20 20 20 20 20 20 20 20 20 20
>31cd	43 6c 61 76 69 20 20 20		.text "Clavi                  "
>31d5	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>31e4	43 65 6c 65 73 74 61 20		.text "Celesta                "
>31ec	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>31fb	47 6c 6f 63 6b 65 6e 73		.text "Glockenspiel           "
>3203	70 69 65 6c 20 20 20 20 20 20 20 20 20 20 20
>3212	4d 75 73 69 63 20 42 6f		.text "Music Box              "
>321a	78 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3229	56 69 62 72 61 70 68 6f		.text "Vibraphone             "
>3231	6e 65 20 20 20 20 20 20 20 20 20 20 20 20 20
>3240	4d 61 72 69 6d 62 61 20		.text "Marimba                "
>3248	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3257	58 79 6c 6f 70 68 6f 6e		.text "Xylophone              "
>325f	65 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>326e	54 75 62 75 6c 61 72 20		.text "Tubular Bells          "
>3276	42 65 6c 6c 73 20 20 20 20 20 20 20 20 20 20
>3285	44 75 6c 63 69 6d 65 72		.text "Dulcimer               "
>328d	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>329c	44 72 61 77 62 61 72 20		.text "Drawbar Organ          "
>32a4	4f 72 67 61 6e 20 20 20 20 20 20 20 20 20 20
>32b3	50 65 72 63 75 73 73 69		.text "Percussive Organ       "
>32bb	76 65 20 4f 72 67 61 6e 20 20 20 20 20 20 20
>32ca	52 6f 63 6b 20 4f 72 67		.text "Rock Organ             "
>32d2	61 6e 20 20 20 20 20 20 20 20 20 20 20 20 20
>32e1	43 68 75 72 63 68 20 4f		.text "Church Organ           "
>32e9	72 67 61 6e 20 20 20 20 20 20 20 20 20 20 20
>32f8	52 65 65 64 20 4f 72 67		.text "Reed Organ             "
>3300	61 6e 20 20 20 20 20 20 20 20 20 20 20 20 20
>330f	41 63 63 6f 72 64 69 6f		.text "Accordion              "
>3317	6e 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3326	48 61 72 6d 6f 6e 69 63		.text "Harmonica              "
>332e	61 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>333d	54 61 6e 67 6f 20 41 63		.text "Tango Accordion        "
>3345	63 6f 72 64 69 6f 6e 20 20 20 20 20 20 20 20
>3354	41 63 6f 75 73 74 69 63		.text "Acoustic Guitar (nylon)"
>335c	20 47 75 69 74 61 72 20 28 6e 79 6c 6f 6e 29
>336b	41 63 6f 75 73 74 69 63		.text "Acoustic Guitar (steel)"
>3373	20 47 75 69 74 61 72 20 28 73 74 65 65 6c 29
>3382	45 6c 65 63 74 72 69 63		.text "Electric Guitar (jazz) "
>338a	20 47 75 69 74 61 72 20 28 6a 61 7a 7a 29 20
>3399	45 6c 65 63 74 72 69 63		.text "Electric Guitar (clean)"
>33a1	20 47 75 69 74 61 72 20 28 63 6c 65 61 6e 29
>33b0	45 6c 65 63 74 72 69 63		.text "Electric Guitar (muted)"
>33b8	20 47 75 69 74 61 72 20 28 6d 75 74 65 64 29
>33c7	4f 76 65 72 64 72 69 76		.text "Overdriven Guitar      "
>33cf	65 6e 20 47 75 69 74 61 72 20 20 20 20 20 20
>33de	44 69 73 74 6f 72 74 69		.text "Distortion Guitar      "
>33e6	6f 6e 20 47 75 69 74 61 72 20 20 20 20 20 20
>33f5	47 75 69 74 61 72 20 68		.text "Guitar harmonics       "
>33fd	61 72 6d 6f 6e 69 63 73 20 20 20 20 20 20 20
>340c	41 63 6f 75 73 74 69 63		.text "Acoustic Bass          "
>3414	20 42 61 73 73 20 20 20 20 20 20 20 20 20 20
>3423	45 6c 65 63 74 72 69 63		.text "Electric Bass (finger) "
>342b	20 42 61 73 73 20 28 66 69 6e 67 65 72 29 20
>343a	45 6c 65 63 74 72 69 63		.text "Electric Bass (pick)   "
>3442	20 42 61 73 73 20 28 70 69 63 6b 29 20 20 20
>3451	46 72 65 74 6c 65 73 73		.text "Fretless Bass          "
>3459	20 42 61 73 73 20 20 20 20 20 20 20 20 20 20
>3468	53 6c 61 70 20 42 61 73		.text "Slap Bass 1            "
>3470	73 20 31 20 20 20 20 20 20 20 20 20 20 20 20
>347f	53 6c 61 70 20 42 61 73		.text "Slap Bass 2            "
>3487	73 20 32 20 20 20 20 20 20 20 20 20 20 20 20
>3496	53 79 6e 74 68 20 42 61		.text "Synth Bass 1           "
>349e	73 73 20 31 20 20 20 20 20 20 20 20 20 20 20
>34ad	53 79 6e 74 68 20 42 61		.text "Synth Bass 2           "
>34b5	73 73 20 32 20 20 20 20 20 20 20 20 20 20 20
>34c4	56 69 6f 6c 69 6e 20 20		.text "Violin                 "
>34cc	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>34db	56 69 6f 6c 61 20 20 20		.text "Viola                  "
>34e3	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>34f2	43 65 6c 6c 6f 20 20 20		.text "Cello                  "
>34fa	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3509	43 6f 6e 74 72 61 62 61		.text "Contrabass             "
>3511	73 73 20 20 20 20 20 20 20 20 20 20 20 20 20
>3520	54 72 65 6d 6f 6c 6f 20		.text "Tremolo Strings        "
>3528	53 74 72 69 6e 67 73 20 20 20 20 20 20 20 20
>3537	50 69 7a 7a 69 63 61 74		.text "Pizzicato Strings      "
>353f	6f 20 53 74 72 69 6e 67 73 20 20 20 20 20 20
>354e	4f 72 63 68 65 73 74 72		.text "Orchestral Harp        "
>3556	61 6c 20 48 61 72 70 20 20 20 20 20 20 20 20
>3565	54 69 6d 70 61 6e 69 20		.text "Timpani                "
>356d	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>357c	53 74 72 69 6e 67 20 45		.text "String Ensemble 1      "
>3584	6e 73 65 6d 62 6c 65 20 31 20 20 20 20 20 20
>3593	53 74 72 69 6e 67 20 45		.text "String Ensemble 2      "
>359b	6e 73 65 6d 62 6c 65 20 32 20 20 20 20 20 20
>35aa	53 79 6e 74 68 53 74 72		.text "SynthStrings 1         "
>35b2	69 6e 67 73 20 31 20 20 20 20 20 20 20 20 20
>35c1	53 79 6e 74 68 53 74 72		.text "SynthStrings 2         "
>35c9	69 6e 67 73 20 32 20 20 20 20 20 20 20 20 20
>35d8	43 68 6f 69 72 20 41 61		.text "Choir Aahs             "
>35e0	68 73 20 20 20 20 20 20 20 20 20 20 20 20 20
>35ef	56 6f 69 63 65 20 4f 6f		.text "Voice Oohs             "
>35f7	68 73 20 20 20 20 20 20 20 20 20 20 20 20 20
>3606	53 79 6e 74 68 20 56 6f		.text "Synth Voice            "
>360e	69 63 65 20 20 20 20 20 20 20 20 20 20 20 20
>361d	4f 72 63 68 65 73 74 72		.text "Orchestra Hit          "
>3625	61 20 48 69 74 20 20 20 20 20 20 20 20 20 20
>3634	54 72 75 6d 70 65 74 20		.text "Trumpet                "
>363c	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>364b	54 72 6f 6d 62 6f 6e 65		.text "Trombone               "
>3653	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3662	54 75 62 61 20 20 20 20		.text "Tuba                   "
>366a	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3679	4d 75 74 65 64 20 54 72		.text "Muted Trumpet          "
>3681	75 6d 70 65 74 20 20 20 20 20 20 20 20 20 20
>3690	46 72 65 6e 63 68 20 48		.text "French Horn            "
>3698	6f 72 6e 20 20 20 20 20 20 20 20 20 20 20 20
>36a7	42 72 61 73 73 20 53 65		.text "Brass Section          "
>36af	63 74 69 6f 6e 20 20 20 20 20 20 20 20 20 20
>36be	53 79 6e 74 68 42 72 61		.text "SynthBrass 1           "
>36c6	73 73 20 31 20 20 20 20 20 20 20 20 20 20 20
>36d5	53 79 6e 74 68 42 72 61		.text "SynthBrass 2           "
>36dd	73 73 20 32 20 20 20 20 20 20 20 20 20 20 20
>36ec	53 6f 70 72 61 6e 6f 20		.text "Soprano Sax            "
>36f4	53 61 78 20 20 20 20 20 20 20 20 20 20 20 20
>3703	41 6c 74 6f 20 53 61 78		.text "Alto Sax               "
>370b	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>371a	54 65 6e 6f 72 20 53 61		.text "Tenor Sax              "
>3722	78 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3731	42 61 72 69 74 6f 6e 65		.text "Baritone Sax           "
>3739	20 53 61 78 20 20 20 20 20 20 20 20 20 20 20
>3748	4f 62 6f 65 20 20 20 20		.text "Oboe                   "
>3750	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>375f	45 6e 67 6c 69 73 68 20		.text "English Horn           "
>3767	48 6f 72 6e 20 20 20 20 20 20 20 20 20 20 20
>3776	42 61 73 73 6f 6f 6e 20		.text "Bassoon                "
>377e	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>378d	43 6c 61 72 69 6e 65 74		.text "Clarinet               "
>3795	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>37a4	50 69 63 63 6f 6c 6f 20		.text "Piccolo                "
>37ac	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>37bb	46 6c 75 74 65 20 20 20		.text "Flute                  "
>37c3	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>37d2	52 65 63 6f 72 64 65 72		.text "Recorder               "
>37da	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>37e9	50 61 6e 20 46 6c 75 74		.text "Pan Flute              "
>37f1	65 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3800	42 6c 6f 77 6e 20 42 6f		.text "Blown Bottle           "
>3808	74 74 6c 65 20 20 20 20 20 20 20 20 20 20 20
>3817	53 68 61 6b 75 68 61 63		.text "Shakuhachi             "
>381f	68 69 20 20 20 20 20 20 20 20 20 20 20 20 20
>382e	57 68 69 73 74 6c 65 20		.text "Whistle                "
>3836	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3845	4f 63 61 72 69 6e 61 20		.text "Ocarina                "
>384d	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>385c	4c 65 61 64 20 31 20 28		.text "Lead 1 (square)        "
>3864	73 71 75 61 72 65 29 20 20 20 20 20 20 20 20
>3873	4c 65 61 64 20 32 20 28		.text "Lead 2 (sawtooth)      "
>387b	73 61 77 74 6f 6f 74 68 29 20 20 20 20 20 20
>388a	4c 65 61 64 20 33 20 28		.text "Lead 3 (calliope)      "
>3892	63 61 6c 6c 69 6f 70 65 29 20 20 20 20 20 20
>38a1	4c 65 61 64 20 34 20 28		.text "Lead 4 (chiff)         "
>38a9	63 68 69 66 66 29 20 20 20 20 20 20 20 20 20
>38b8	4c 65 61 64 20 35 20 28		.text "Lead 5 (charang)       "
>38c0	63 68 61 72 61 6e 67 29 20 20 20 20 20 20 20
>38cf	4c 65 61 64 20 36 20 28		.text "Lead 6 (voice)         "
>38d7	76 6f 69 63 65 29 20 20 20 20 20 20 20 20 20
>38e6	4c 65 61 64 20 37 20 28		.text "Lead 7 (fifths)        "
>38ee	66 69 66 74 68 73 29 20 20 20 20 20 20 20 20
>38fd	4c 65 61 64 20 38 20 28		.text "Lead 8 (bass + lead)   "
>3905	62 61 73 73 20 2b 20 6c 65 61 64 29 20 20 20
>3914	50 61 64 20 31 20 28 6e		.text "Pad 1 (new age)        "
>391c	65 77 20 61 67 65 29 20 20 20 20 20 20 20 20
>392b	50 61 64 20 32 20 28 77		.text "Pad 2 (warm)           "
>3933	61 72 6d 29 20 20 20 20 20 20 20 20 20 20 20
>3942	50 61 64 20 33 20 28 70		.text "Pad 3 (polysynth)      "
>394a	6f 6c 79 73 79 6e 74 68 29 20 20 20 20 20 20
>3959	50 61 64 20 34 20 28 63		.text "Pad 4 (choir)          "
>3961	68 6f 69 72 29 20 20 20 20 20 20 20 20 20 20
>3970	50 61 64 20 35 20 28 62		.text "Pad 5 (bowed)          "
>3978	6f 77 65 64 29 20 20 20 20 20 20 20 20 20 20
>3987	50 61 64 20 36 20 28 6d		.text "Pad 6 (metallic)       "
>398f	65 74 61 6c 6c 69 63 29 20 20 20 20 20 20 20
>399e	50 61 64 20 37 20 28 68		.text "Pad 7 (halo)           "
>39a6	61 6c 6f 29 20 20 20 20 20 20 20 20 20 20 20
>39b5	50 61 64 20 38 20 28 73		.text "Pad 8 (sweep)          "
>39bd	77 65 65 70 29 20 20 20 20 20 20 20 20 20 20
>39cc	46 58 20 31 20 28 72 61		.text "FX 1 (rain)            "
>39d4	69 6e 29 20 20 20 20 20 20 20 20 20 20 20 20
>39e3	46 58 20 32 20 28 73 6f		.text "FX 2 (soundtrack)      "
>39eb	75 6e 64 74 72 61 63 6b 29 20 20 20 20 20 20
>39fa	46 58 20 33 20 28 63 72		.text "FX 3 (crystal)         "
>3a02	79 73 74 61 6c 29 20 20 20 20 20 20 20 20 20
>3a11	46 58 20 34 20 28 61 74		.text "FX 4 (atmosphere)      "
>3a19	6d 6f 73 70 68 65 72 65 29 20 20 20 20 20 20
>3a28	46 58 20 35 20 28 62 72		.text "FX 5 (brightness)      "
>3a30	69 67 68 74 6e 65 73 73 29 20 20 20 20 20 20
>3a3f	46 58 20 36 20 28 67 6f		.text "FX 6 (goblins)         "
>3a47	62 6c 69 6e 73 29 20 20 20 20 20 20 20 20 20
>3a56	46 58 20 37 20 28 65 63		.text "FX 7 (echoes)          "
>3a5e	68 6f 65 73 29 20 20 20 20 20 20 20 20 20 20
>3a6d	46 58 20 38 20 28 73 63		.text "FX 8 (sci-fi)          "
>3a75	69 2d 66 69 29 20 20 20 20 20 20 20 20 20 20
>3a84	53 69 74 61 72 20 20 20		.text "Sitar                  "
>3a8c	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3a9b	42 61 6e 6a 6f 20 20 20		.text "Banjo                  "
>3aa3	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3ab2	53 68 61 6d 69 73 65 6e		.text "Shamisen               "
>3aba	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3ac9	4b 6f 74 6f 20 20 20 20		.text "Koto                   "
>3ad1	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3ae0	4b 61 6c 69 6d 62 61 20		.text "Kalimba                "
>3ae8	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3af7	42 61 67 20 70 69 70 65		.text "Bag pipe               "
>3aff	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0e	46 69 64 64 6c 65 20 20		.text "Fiddle                 "
>3b16	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b25	53 68 61 6e 61 69 20 20		.text "Shanai                 "
>3b2d	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b3c	54 69 6e 6b 6c 65 20 42		.text "Tinkle Bell            "
>3b44	65 6c 6c 20 20 20 20 20 20 20 20 20 20 20 20
>3b53	41 67 6f 67 6f 20 20 20		.text "Agogo                  "
>3b5b	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b6a	53 74 65 65 6c 20 44 72		.text "Steel Drums            "
>3b72	75 6d 73 20 20 20 20 20 20 20 20 20 20 20 20
>3b81	57 6f 6f 64 62 6c 6f 63		.text "Woodblock              "
>3b89	6b 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b98	54 61 69 6b 6f 20 44 72		.text "Taiko Drum             "
>3ba0	75 6d 20 20 20 20 20 20 20 20 20 20 20 20 20
>3baf	4d 65 6c 6f 64 69 63 20		.text "Melodic Tom            "
>3bb7	54 6f 6d 20 20 20 20 20 20 20 20 20 20 20 20
>3bc6	53 79 6e 74 68 20 44 72		.text "Synth Drum             "
>3bce	75 6d 20 20 20 20 20 20 20 20 20 20 20 20 20
>3bdd	52 65 76 65 72 73 65 20		.text "Reverse Cymbal         "
>3be5	43 79 6d 62 61 6c 20 20 20 20 20 20 20 20 20
>3bf4	47 75 69 74 61 72 20 46		.text "Guitar Fret Noise      "
>3bfc	72 65 74 20 4e 6f 69 73 65 20 20 20 20 20 20
>3c0b	42 72 65 61 74 68 20 4e		.text "Breath Noise           "
>3c13	6f 69 73 65 20 20 20 20 20 20 20 20 20 20 20
>3c22	53 65 61 73 68 6f 72 65		.text "Seashore               "
>3c2a	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3c39	42 69 72 64 20 54 77 65		.text "Bird Tweet             "
>3c41	65 74 20 20 20 20 20 20 20 20 20 20 20 20 20
>3c50	54 65 6c 65 70 68 6f 6e		.text "Telephone Ring         "
>3c58	65 20 52 69 6e 67 20 20 20 20 20 20 20 20 20
>3c67	48 65 6c 69 63 6f 70 74		.text "Helicopter             "
>3c6f	65 72 20 20 20 20 20 20 20 20 20 20 20 20 20
>3c7e	41 70 70 6c 61 75 73 65		.text "Applause               "
>3c86	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3c95	47 75 6e 73 68 6f 74 20		.text "Gunshot                "
>3c9d	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20

;******  Return to file: pendulum.asm


;******  End of listing
