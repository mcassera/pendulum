
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -L PendulumDump.txt --output-exec=start --intel-hex --output pendulum.hex pendulum.asm
; Fri Apr 04 22:06:03 2025

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: pendulum.asm


;******  Processing file: setup.asm

=$01					MMU_IO_CTRL 	= $01						;MMU I/O Control
=$d000					VKY_MSTR_CTRL_0 = $d000						; Vicky Master Control Register 0
=$d001					VKY_MSTR_CTRL_1 = $d001						; Vicky Master Control Register 1
=$d004					VKY_BRDR_CTRL   = $d004						; Vicky Border Control Register
=$d00d					VKY_BKG_COL_B   = $d00d						; Vicky Graphics Background Color Blue
=$d00e					VKY_BKG_COL_G   = $d00e						; Vicky Graphics Background Color Green
=$d00f					VKY_BKG_COL_R   = $d00f						; Vicky Graphics Background Color Red
=$d002					VKY_LAYER_CTRL_0= $d002
=$d003					VKY_LAYER_CTRL_1= $d003
=$d280					VKY_TS0_AD_L	= $d280						; Vicky Tile 0 Image Start Address LOW BYTE
=$d281					VKY_TS0_AD_M	= $d281						; Vicky Tile 0 Image Start Address MEDIUM BYTE
=$d282					VKY_TS0_AD_H	= $d282						; Vicky Tile 0 Image Start Address HIGH BYTE
=$d284					VKY_TS1_AD_L	= $d284						; Vicky Tile 1 Image Start Address LOW BYTE
=$d285					VKY_TS1_AD_M	= $d285						; Vicky Tile 1 Image Start Address MEDIUM BYTE
=$d286					VKY_TS1_AD_H	= $d286						; Vicky Tile 1 Image Start Address HIGH BYTE
=$d288					VKY_TS2_AD_L	= $d288						; Vicky Tile 2 Image Start Address LOW BYTE
=$d289					VKY_TS2_AD_M	= $d289						; Vicky Tile 2 Image Start Address MEDIUM BYTE
=$d28a					VKY_TS2_AD_H	= $d28a						; Vicky Tile 2 Image Start Address HIGH BYTE
=$d200					VKY_TM0_CTRL	= $d200						; Tile Map 0 Control
=$d201					VKY_TM0_AD_L	= $d201						; Tile Map 0 Start Address LOW BYTE
=$d202					VKY_TM0_AD_M	= $d202						; Tile Map 0 Start Address MEDIUM BYTE
=$d203					VKY_TM0_AD_H	= $d203						; Tile Map 0 Start Address HIGH BYTE
=$d204					VKY_TM0_SZ_X	= $d204						; Tile Map 0 Size X
=$d206					VKY_TM0_SZ_Y	= $d206						; Tile Map 0 Size Y
=$d208					VKY_TM0_POS_X_L = $d208						; Tile Map 0 X Position & Scroll LOW BYTE
=$d209					VKY_TM0_POS_X_H = $d209						; Tile Map 0 X Position & Scroll HIGH BYTE
=$d20a					VKY_TM0_POS_Y_L = $d20a						; Tile Map 0 Y Position & Scroll LOW BYTE
=$d20b					VKY_TM0_POS_Y_H = $d20b						; Tile Map 0 Y Position & Scroll HIGH BYTE
=$d20c					VKY_TM1_CTRL	= $d20c						; Tile Map 1 Control
=$d20d					VKY_TM1_AD_L	= $d20d						; Tile Map 1 Start Address LOW BYTE
=$d20e					VKY_TM1_AD_M	= $d20e						; Tile Map 1 Start Address MEDIUM BYTE
=$d20f					VKY_TM1_AD_H	= $d20f						; Tile Map 1 Start Address HIGH BYTE
=$d210					VKY_TM1_SZ_X	= $d210						; Tile Map 1 Size X
=$d212					VKY_TM1_SZ_Y	= $d212						; Tile Map 1 Size Y
=$d214					VKY_TM1_POS_X_L = $d214						; Tile Map 1 X Position & Scroll LOW BYTE
=$d215					VKY_TM1_POS_X_H = $d215						; Tile Map 1 X Position & Scroll HIGH BYTE
=$d216					VKY_TM1_POS_Y_L = $d216						; Tile Map 1 Y Position & Scroll LOW BYTE
=$d217					VKY_TM1_POS_Y_H = $d217						; Tile Map 1 Y Position & Scroll HIGH BYTE
=$d218					VKY_TM2_CTRL	= $d218						; Tile Map 2 Control
=$d219					VKY_TM2_AD_L	= $d219						; Tile Map 2 Start Address LOW BYTE
=$d21a					VKY_TM2_AD_M	= $d21a						; Tile Map 2 Start Address MEDIUM BYTE
=$d21b					VKY_TM2_AD_H	= $d21b						; Tile Map 2 Start Address HIGH BYTE
=$d21c					VKY_TM2_SZ_X	= $d21c						; Tile Map 2 Size X
=$d21e					VKY_TM2_SZ_Y	= $d21e						; Tile Map 2 Size Y
=$d220					VKY_TM2_POS_X_L = $d220						; Tile Map 2 X Position & Scroll LOW BYTE
=$d221					VKY_TM2_POS_X_H = $d221						; Tile Map 2 X Position & Scroll HIGH BYTE
=$d222					VKY_TM2_POS_Y_L = $d222						; Tile Map 2 Y Position & Scroll LOW BYTE
=$d223					VKY_TM2_POS_Y_H = $d223						; Tile Map 2 Y Position & Scroll HIGH BYTE
=$d900					VKY_SP0         = $d900                     ; start of sprite register locations / each new aprite is a multiple of 8
=$00					SP_CTRL         = $00                       ; control register              7-x, 6/5-size, 4/3-layer, 2/1-lut, 0-enable
=$01					SP_AD_L         = $01                       ; image address location
=$02					SP_AD_M         = $02
=$03					SP_AD_H         = $03
=$04					SP_POS_X_L      = $04                       ; x position
=$05					SP_POS_X_H      = $05
=$06					SP_POS_Y_L      = $06                       ; y position
=$07					SP_POS_Y_H      = $07
=$d9a0					playerSP        = $d9a0                     ; the sprite registers for the player
=$d000					VKY_GR_CLUT_0  	= $d000						; Graphics LUT #0 in I/O page 1
=$d400					VKY_GR_CLUT_1  	= $d400						; Graphics LUT #1 in I/O page 1
=$d400					SID_L1_FREQ_L   = $d400                     ; Left Sid Registers
=$d401					SID_L1_FREQ_H   = $d401
=$d402					SID_L1_PULS_L   = $d402
=$d403					SID_L1_PULS_H   = $d403
=$d404					SID_L1_GATE     = $d404
=$d405					SID_L1_ATDL     = $d405
=$d406					SID_L1_STRL     = $d406
=$d407					SID_L2_FREQ_L   = $d407
=$d408					SID_L2_FREQ_H   = $d408
=$d409					SID_L2_PULS_L   = $d409
=$d40a					SID_L2_PULS_H   = $d40a
=$d40b					SID_L2_GATE     = $d40b
=$d40c					SID_L2_ATDL     = $d40c
=$d40d					SID_L2_STRL     = $d40d
=$d40e					SID_L3_FREQ_L   = $d40e
=$d40f					SID_L3_FREQ_H   = $d40f
=$d410					SID_L3_PULS_L   = $d410
=$d411					SID_L3_PULS_H   = $d411
=$d412					SID_L3_GATE     = $d412
=$d413					SID_L3_ATDL     = $d413
=$d414					SID_L3_STRL     = $d414
=$d415					SID_L_FLT_L     = $d415
=$d416					SID_L_FLT_H     = $d416
=$d417					SID_L_RES       = $d417
=$d418					SID_L_VOL       = $d418
=$d500					SID_R1_FREQ_L   = $d500                     ; Right Sid Registers
=$d501					SID_R1_FREQ_H   = $d501
=$d502					SID_R1_PULS_L   = $d502
=$d503					SID_R1_PULS_H   = $d503
=$d504					SID_R1_GATE     = $d504
=$d505					SID_R1_ATDL     = $d505
=$d506					SID_R1_STRL     = $d506
=$d507					SID_R2_FREQ_L   = $d507
=$d508					SID_R2_FREQ_H   = $d508
=$d509					SID_R2_PULS_L   = $d509
=$d50a					SID_R2_PULS_H   = $d50a
=$d50b					SID_R2_GATE     = $d50b
=$d50c					SID_R2_ATDL     = $d50c
=$d50d					SID_R2_STRL     = $d50d
=$d50e					SID_R3_FREQ_L   = $d50e
=$d50f					SID_R3_FREQ_H   = $d50f
=$d510					SID_R3_PULS_L   = $d510
=$d511					SID_R3_PULS_H   = $d511
=$d512					SID_R3_GATE     = $d512
=$d513					SID_R3_ATDL     = $d513
=$d514					SID_R3_STRL     = $d514
=$d515					SID_R_FLT_L     = $d515
=$d516					SID_R_FLT_H     = $d516
=$d517					SID_R_RES       = $d517
=$d518					SID_R_VOL       = $d518
=$d600					PSG_L           = $d600
=$d610					PSG_R           = $d610
=$d608					PSG_LR          = $d608
=$80					PSG1_FREQ_LO    = %10000000                 ; OR with low 4 bits
=$00					PSG1_FREQ_HI    = %00000000                 ; OR with low 6 bits
=$90					PSG1_VOLUME     = %10010000                 ; OR with low 4 bits / default is full  - 0 = full, f = silent
=$a0					PSG2_FREQ_LO    = %10100000                 ; OR with low 4 bits
=$00					PSG2_FREQ_HI    = %00000000                 ; OR with low 6 bits
=$b0					PSG2_VOLUME     = %10110000                 ; OR with low 4 bits / default is full  - 0 = full, f = silent
=$c0					PSG3_FREQ_LO    = %11000000                 ; OR with low 4 bits
=$00					PSG3_FREQ_HI    = %00000000                 ; OR with low 6 bits
=$d0					PSG3_VOLUME     = %11010000                 ; OR with low 4 bits / default is full  - 0 = full, f = silent
=$dda1					MIDI_COM        = $dda1                     ; midi command
=$fffe					VIRQ			= $fffe						; Pointer to IRQ routine (LOW Byte)
=$d660					INT_PEND_0		= $d660						; Pending register for interrupts 0-7
=$d661					INT_PEND_1		= $d661						; Pending register for interrupts 8-15
=$d66c					INT_MASK_0		= $d66c						; Mask register for interrupts 0-7
=$d66d					INT_MASK_1		= $d66d						; Mask register for interrupts 8-15
=$de00					MULU_A_L		= $de00						; unsigned A LOW byte
=$de01					MULU_A_H		= $de01						; unsigned A HIGH Byte
=$de02					MULU_B_L		= $de02						; unsigned B LOW byte
=$de03					MULU_B_H		= $de03						; unsigned B HIGH byte
=$de10					MULU_LL			= $de10						; A x B byte 0
=$de11					MULU_LH			= $de11						; A x B byte 1
=$de12					MULU_HL			= $de12						; A x B byte 3
=$de13					MULU_HH			= $de13						; A x B byte 4
=$de08					ADD_A_LL		= $de08
=$de09					ADD_A_LH		= $de09
=$de0a					ADD_A_HL		= $de0a
=$de0b					ADD_A_HH		= $de0b
=$de0c					ADD_B_LL		= $de0c
=$de0d					ADD_B_LH		= $de0d
=$de0e					ADD_B_HL		= $de0e
=$de0f					ADD_B_HH		= $de0f
=$de18					ADD_R_LL		= $de18
=$de19					ADD_R_LH		= $de19
=$de1a					ADD_R_HL		= $de1a
=$de1b					ADD_R_HH		= $de1b
=$d6a6					Random_Reg		= $d6a6
=$d6a4					Random_L		= $d6a4
=$80					ptr_src			= $80						; A pointer to read data
=$82					ptr_dst			= $82						; A pointer to write data

;******  Return to file: pendulum.asm

.1ffd					start:
.1ffd	4c 0b 20	jmp $200b			jmp SC								; Start of the program - We put this jump here so you can load the PGZ into the computer.

;******  Processing file: api.asm

>ff00					NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04					ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08					ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c					Yield       .fill   4   ; Give unused time to the kernel.
>ff10					Putch       .fill   4   ; deprecated
>ff14					RunBlock    .fill   4   ; Chain to resident program by block ID.
>ff18					RunNamed    .fill   4   ; Chain to resident program by name.
>ff1c					            .fill   4   ; reserved
>ff20					List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24					GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28					GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c					Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30					Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34					Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38					Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c					List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40					GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44					MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48					CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c					Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50					Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54					ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58					WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c					Open        .fill   4   ; Open the given file for read, create, or append.
>ff60					Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64					Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68					Close       .fill   4   ; Close an open file.
>ff6c					Rename      .fill   4   ; Rename a closed file.
>ff70					Delete      .fill   4   ; Delete a closed file.
>ff74					Seek        .fill   4   ; Seek to a specific position in a file.
>ff78					Open        .fill   4   ; Open a directory for reading.
>ff7c					Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff80					Close       .fill   4   ; Close a directory once finished reading.
>ff84					MkDir       .fill   4   ; Create a directory
>ff88					RmDir       .fill   4   ; Delete a directory
>ff8c					            .fill   4   ; call gate
>ff90					GetIP       .fill   4   ; Get the local IP address.
>ff94					SetIP       .fill   4   ; Set the local IP address.
>ff98					GetDNS      .fill   4   ; Get the configured DNS IP address.
>ff9c					SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa0					SendICMP    .fill   4
>ffa4					Match       .fill   4
>ffa8					Init        .fill   4
>ffac					Send        .fill   4
>ffb0					Recv        .fill   4
>ffb4					Open        .fill   4
>ffb8					Accept      .fill   4
>ffbc					Reject      .fill   4
>ffc0					Send        .fill   4
>ffc4					Recv        .fill   4
>ffc8					Close       .fill   4
>ffcc					Reset       .fill   4   ; Re-init the display
>ffd0					GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ffd4					DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ffd8					DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ffdc					GetTime     .fill   4
>ffe0					SetTime     .fill   4
>ffe4					            .fill   12  ; 65816 vectors
>fff0					SetTimer    .fill   4
.00f0					args
.00f0					events
>00f0					dest        .word       ?   ; GetNextEvent copies event data here
>00f2					pending     .byte       ?   ; Negative count of pending events
.00f3					end
.00f3					run
>00f3					block_id    .byte   ?
.00f3					recv
=$fb					buf         = args.buf
=$fd					buflen      = args.buflen
.00f3					fs
.00f3					format
>00f3					drive       .byte       ?
>00f4					cookie      .byte       ?
=$fb					label       = args.buf
=$fd					label_len   = args.buflen
.00f3					mkfs
>00f3					drive       .byte       ?
>00f4					cookie      .byte       ?
=$fb					label       = args.buf
=$fd					label_len   = args.buflen
.00f3					file
.00f3					open
>00f3					drive       .byte       ?
>00f4					cookie      .byte       ?
=$fb					fname       = args.buf
=$fd					fname_len   = args.buflen
>00f5					mode        .byte       ?
=0					READ        = 0
=1					WRITE       = 1
=2					END         = 2
.00f3					read
>00f3					stream      .byte       ?
>00f4					buflen      .byte       ?
.00f3					write
>00f3					stream      .byte       ?
=$fb					buf         = args.buf
=$fd					buflen      = args.buflen
.00f3					seek
>00f3					stream      .byte       ?
>00f4					position    .dword      ?
.00f3					close
>00f3					stream      .byte       ?
.00f3					rename
>00f3					drive       .byte       ?
>00f4					cookie      .byte       ?
=$fb					old         = args.buf
=$fd					old_len     = args.buflen
=$f8					new         = args.ext
=$fa					new_len     = args.extlen
.00f3					delete
>00f3					drive       .byte       ?
>00f4					cookie      .byte       ?
=$fb					fname       = args.buf
=$fd					fname_len   = args.buflen
>00f5					mode        .byte       ?
=0					READ        = 0
=1					WRITE       = 1
=2					END         = 2
.00f3					directory
.00f3					open
>00f3					drive       .byte       ?
>00f4					cookie      .byte       ?
=$fb					path        = args.buf
=$fd					path_len    = args.buflen
.00f3					read
>00f3					stream      .byte       ?
>00f4					buflen      .byte       ?
.00f3					close
>00f3					stream      .byte       ?
.00f3					mkdir
>00f3					drive       .byte       ?
>00f4					cookie      .byte       ?
=$fb					path        = args.buf
=$fd					path_len    = args.buflen
.00f3					rmdir
>00f3					drive       .byte       ?
>00f4					cookie      .byte       ?
=$fb					path        = args.buf
=$fd					path_len    = args.buflen
.00f3					display
>00f3					x           .byte       ?   ; coordinate or size
>00f4					y           .byte       ?   ; coordinate or size
=$fb					text        = args.buf      ; text
=$f8					color       = args.ext      ; color
=$fb					buf         = args.buf      ; deprecated
=$f8					buf2        = args.ext      ; deprecated
=$fd					buflen      = args.buflen
.00f3					net
=$fb					socket      = args.buf
>00f3					src_port    .word       ?
>00f5					dest_port   .word       ?
>00f7					dest_ip     .fill       4
>00f3					accepted    .byte       ?
=$f8					buf         = args.ext
=$fa					buflen      = args.extlen
.00f3					config
.00f3					timer
>00f3					units       .byte       ?
=0					FRAMES      = 0
=1					SECONDS     = 1
=128					QUERY       = 128
>00f4					absolute    .byte       ?
>00f5					cookie      .byte       ?
=$f8					ext         = $f8
=$fa					extlen      = $fa
=$fb					buf         = $fb
=$fd					buflen      = $fd
=$fe					ptr         = $fe
.0000					events
>0000					dest        .word       ?   ; GetNextEvent copies event data here
>0002					pending     .byte       ?   ; Negative count of pending events
.0003					end
.0003					run
>0003					block_id    .byte   ?
.0003					recv
=$fb					buf         = args.buf
=$fd					buflen      = args.buflen
.0003					fs
.0003					format
>0003					drive       .byte       ?
>0004					cookie      .byte       ?
=$fb					label       = args.buf
=$fd					label_len   = args.buflen
.0003					mkfs
>0003					drive       .byte       ?
>0004					cookie      .byte       ?
=$fb					label       = args.buf
=$fd					label_len   = args.buflen
.0003					file
.0003					open
>0003					drive       .byte       ?
>0004					cookie      .byte       ?
=$fb					fname       = args.buf
=$fd					fname_len   = args.buflen
>0005					mode        .byte       ?
=0					READ        = 0
=1					WRITE       = 1
=2					END         = 2
.0003					read
>0003					stream      .byte       ?
>0004					buflen      .byte       ?
.0003					write
>0003					stream      .byte       ?
=$fb					buf         = args.buf
=$fd					buflen      = args.buflen
.0003					seek
>0003					stream      .byte       ?
>0004					position    .dword      ?
.0003					close
>0003					stream      .byte       ?
.0003					rename
>0003					drive       .byte       ?
>0004					cookie      .byte       ?
=$fb					old         = args.buf
=$fd					old_len     = args.buflen
=$f8					new         = args.ext
=$fa					new_len     = args.extlen
.0003					delete
>0003					drive       .byte       ?
>0004					cookie      .byte       ?
=$fb					fname       = args.buf
=$fd					fname_len   = args.buflen
>0005					mode        .byte       ?
=0					READ        = 0
=1					WRITE       = 1
=2					END         = 2
.0003					directory
.0003					open
>0003					drive       .byte       ?
>0004					cookie      .byte       ?
=$fb					path        = args.buf
=$fd					path_len    = args.buflen
.0003					read
>0003					stream      .byte       ?
>0004					buflen      .byte       ?
.0003					close
>0003					stream      .byte       ?
.0003					mkdir
>0003					drive       .byte       ?
>0004					cookie      .byte       ?
=$fb					path        = args.buf
=$fd					path_len    = args.buflen
.0003					rmdir
>0003					drive       .byte       ?
>0004					cookie      .byte       ?
=$fb					path        = args.buf
=$fd					path_len    = args.buflen
.0003					display
>0003					x           .byte       ?   ; coordinate or size
>0004					y           .byte       ?   ; coordinate or size
=$fb					text        = args.buf      ; text
=$f8					color       = args.ext      ; color
=$fb					buf         = args.buf      ; deprecated
=$f8					buf2        = args.ext      ; deprecated
=$fd					buflen      = args.buflen
.0003					net
=$fb					socket      = args.buf
>0003					src_port    .word       ?
>0005					dest_port   .word       ?
>0007					dest_ip     .fill       4
>0003					accepted    .byte       ?
=$f8					buf         = args.ext
=$fa					buflen      = args.extlen
.0003					config
.0003					timer
>0003					units       .byte       ?
=0					FRAMES      = 0
=1					SECONDS     = 1
=128					QUERY       = 128
>0004					absolute    .byte       ?
>0005					cookie      .byte       ?
=$f8					ext         = $f8
=$fa					extlen      = $fa
=$fb					buf         = $fb
=$fd					buflen      = $fd
=$fe					ptr         = $fe
>0000					dest        .word       ?   ; GetNextEvent copies event data here
>0002					pending     .byte       ?   ; Negative count of pending events
.0003					end
=$fb					buf         = args.buf
=$fd					buflen      = args.buflen
>0000					block_id    .byte   ?
.0000					format
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					label       = args.buf
=$fd					label_len   = args.buflen
.0000					mkfs
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					label       = args.buf
=$fd					label_len   = args.buflen
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					label       = args.buf
=$fd					label_len   = args.buflen
.0000					open
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					fname       = args.buf
=$fd					fname_len   = args.buflen
>0002					mode        .byte       ?
=0					READ        = 0
=1					WRITE       = 1
=2					END         = 2
.0000					read
>0000					stream      .byte       ?
>0001					buflen      .byte       ?
.0000					write
>0000					stream      .byte       ?
=$fb					buf         = args.buf
=$fd					buflen      = args.buflen
.0000					seek
>0000					stream      .byte       ?
>0001					position    .dword      ?
.0000					close
>0000					stream      .byte       ?
.0000					rename
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					old         = args.buf
=$fd					old_len     = args.buflen
=$f8					new         = args.ext
=$fa					new_len     = args.extlen
.0000					delete
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					fname       = args.buf
=$fd					fname_len   = args.buflen
>0002					mode        .byte       ?
=0					READ        = 0
=1					WRITE       = 1
=2					END         = 2
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					fname       = args.buf
=$fd					fname_len   = args.buflen
>0002					mode        .byte       ?
=0					READ        = 0
=1					WRITE       = 1
=2					END         = 2
>0000					stream      .byte       ?
>0001					buflen      .byte       ?
>0000					stream      .byte       ?
=$fb					buf         = args.buf
=$fd					buflen      = args.buflen
>0000					stream      .byte       ?
>0001					position    .dword      ?
>0000					stream      .byte       ?
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					old         = args.buf
=$fd					old_len     = args.buflen
=$f8					new         = args.ext
=$fa					new_len     = args.extlen
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					fnane       = args.buf
=$fd					fname_len   = args.buflen
.0000					open
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					path        = args.buf
=$fd					path_len    = args.buflen
.0000					read
>0000					stream      .byte       ?
>0001					buflen      .byte       ?
.0000					close
>0000					stream      .byte       ?
.0000					mkdir
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					path        = args.buf
=$fd					path_len    = args.buflen
.0000					rmdir
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					path        = args.buf
=$fd					path_len    = args.buflen
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					path        = args.buf
=$fd					path_len    = args.buflen
>0000					stream      .byte       ?
>0001					buflen      .byte       ?
>0000					stream      .byte       ?
>0000					x           .byte       ?   ; coordinate or size
>0001					y           .byte       ?   ; coordinate or size
=$fb					text        = args.buf      ; text
=$f8					color       = args.ext      ; color
=$fb					buf         = args.buf      ; deprecated
=$f8					buf2        = args.ext      ; deprecated
=$fd					buflen      = args.buflen
=$fb					socket      = args.buf
>0000					src_port    .word       ?
>0002					dest_port   .word       ?
>0004					dest_ip     .fill       4
>0000					accepted    .byte       ?
=$f8					buf         = args.ext
=$fa					buflen      = args.extlen
>0000					units       .byte       ?
=0					FRAMES      = 0
=1					SECONDS     = 1
=128					QUERY       = 128
>0001					absolute    .byte       ?
>0002					cookie      .byte       ?
>0000					century     .byte       ?
>0001					year        .byte       ?
>0002					month       .byte       ?
>0003					day         .byte       ?
>0004					hours       .byte       ?
>0005					minutes     .byte       ?
>0006					seconds     .byte       ?
>0007					centis      .byte       ?
.0008					size
>0000					            .word   ?   ; Reserved
>0002					            .word   ?   ; Deprecated
>0004					JOYSTICK    .word   ?   ; Game Controller changes.
>0006					DEVICE      .word   ?   ; Device added/removed.
>0008					PRESSED     .word   ?   ; Key pressed
>000a					RELEASED    .word   ?   ; Key released.
>000c					DELTA       .word   ?   ; Regular mouse move and button state
>000e					CLICKS      .word   ?   ; Click counts
>0010					NAME        .word   ?
>0012					SIZE        .word   ?
>0014					DATA        .word   ?   ; The read request has succeeded.
>0016					WROTE       .word   ?   ; The write request has completed.
>0018					FORMATTED   .word   ?   ; The low-level format has completed.
>001a					ERROR       .word   ?
>001c					SIZE        .word   ?
>001e					CREATED     .word   ?
>0020					CHECKED     .word   ?
>0022					DATA        .word   ?   ; The read request has succeeded.
>0024					WROTE       .word   ?   ; The write request has completed.
>0026					ERROR       .word   ?
>0028					NOT_FOUND   .word   ?   ; The file file was not found.
>002a					OPENED      .word   ?   ; The file was successfully opened.
>002c					DATA        .word   ?   ; The read request has succeeded.
>002e					WROTE       .word   ?   ; The write request has completed.
>0030					EOF         .word   ?   ; All file data has been read.
>0032					CLOSED      .word   ?   ; The close request has completed.
>0034					RENAMED     .word   ?   ; The rename request has completed.
>0036					DELETED     .word   ?   ; The delete request has completed.
>0038					ERROR       .word   ?   ; An error occured; close the file if opened.
>003a					SEEK        .word   ?   ; The seek request has completed.
>003c					OPENED      .word   ?   ; The directory open request succeeded.
>003e					VOLUME      .word   ?   ; A volume record was found.
>0040					FILE        .word   ?   ; A file record was found.
>0042					FREE        .word   ?   ; A file-system free-space record was found.
>0044					EOF         .word   ?   ; All data has been read.
>0046					CLOSED      .word   ?   ; The directory file has been closed.
>0048					ERROR       .word   ?   ; An error occured; user should close.
>004a					CREATED     .word   ?   ; The directory has been created.
>004c					DELETED     .word   ?   ; The directory has been deleted.
>004e					TCP         .word   ?
>0050					UDP         .word   ?
>0052					EXPIRED     .word   ?
>0054					TICK        .word   ?
>0000					type        .byte   ?   ; Enum above
>0001					buf         .byte   ?   ; page id or zero
>0002					ext         .byte   ?   ; page id or zero
.0003					key
>0003					keyboard    .byte   ?   ; Keyboard ID
>0004					raw         .byte   ?   ; Raw key ID
>0005					ascii       .byte   ?   ; ASCII value
>0006					flags       .byte   ?   ; Flags (META)
=$80					META        = $80       ; Meta key; no associated ASCII value.
.0003					mouse
.0003					delta
>0003					x           .byte   ?
>0004					y           .byte   ?
>0005					z           .byte   ?
>0006					buttons     .byte   ?
.0003					clicks
>0003					inner       .byte   ?
>0004					middle      .byte   ?
>0005					outer       .byte   ?
.0003					joystick
>0003					joy0        .byte   ?
>0004					joy1        .byte   ?
.0003					udp
>0003					token       .byte   ?   ; TODO: break out into fields
.0003					tcp
>0003					len         .byte   ?   ; Raw packet length.
.0003					file
>0003					stream      .byte   ?
>0004					cookie      .byte   ?
.0005					data
>0005					requested   .byte   ?   ; Requested number of bytes to read
>0006					read        .byte   ?   ; Number of bytes actually read
.0005					wrote
>0005					requested   .byte   ?   ; Requested number of bytes to read
>0006					wrote       .byte   ?   ; Number of bytes actually read
.0003					directory
>0003					stream      .byte   ?
>0004					cookie      .byte   ?
.0005					volume
>0005					len         .byte   ?   ; Length of volname (in buf)
>0006					flags       .byte   ?   ; block size, text encoding
.0005					file
>0005					len         .byte   ?
>0006					flags       .byte   ?   ; block scale, text encoding, approx size
.0005					free
>0005					flags       .byte   ?   ; block scale, text encoding, approx size
.0003					timer
>0003					value       .byte   ?
>0004					cookie      .byte   ?
>0000					keyboard    .byte   ?   ; Keyboard ID
>0001					raw         .byte   ?   ; Raw key ID
>0002					ascii       .byte   ?   ; ASCII value
>0003					flags       .byte   ?   ; Flags (META)
=$80					META        = $80       ; Meta key; no associated ASCII value.
.0000					delta
>0000					x           .byte   ?
>0001					y           .byte   ?
>0002					z           .byte   ?
>0003					buttons     .byte   ?
.0000					clicks
>0000					inner       .byte   ?
>0001					middle      .byte   ?
>0002					outer       .byte   ?
>0000					x           .byte   ?
>0001					y           .byte   ?
>0002					z           .byte   ?
>0003					buttons     .byte   ?
>0000					inner       .byte   ?
>0001					middle      .byte   ?
>0002					outer       .byte   ?
>0000					joy0        .byte   ?
>0001					joy1        .byte   ?
>0000					stream      .byte   ?
>0001					cookie      .byte   ?
.0002					data
>0002					requested   .byte   ?   ; Requested number of bytes to read
>0003					read        .byte   ?   ; Number of bytes actually read
.0002					wrote
>0002					requested   .byte   ?   ; Requested number of bytes to read
>0003					wrote       .byte   ?   ; Number of bytes actually read
>0000					requested   .byte   ?   ; Requested number of bytes to read
>0001					read        .byte   ?   ; Number of bytes actually read
>0000					requested   .byte   ?   ; Requested number of bytes to read
>0001					wrote       .byte   ?   ; Number of bytes actually read
>0000					stream      .byte   ?
>0001					cookie      .byte   ?
.0002					volume
>0002					len         .byte   ?   ; Length of volname (in buf)
>0003					flags       .byte   ?   ; block size, text encoding
.0002					file
>0002					len         .byte   ?
>0003					flags       .byte   ?   ; block scale, text encoding, approx size
.0002					free
>0002					flags       .byte   ?   ; block scale, text encoding, approx size
>0000					len         .byte   ?   ; Length of volname (in buf)
>0001					flags       .byte   ?   ; block size, text encoding
>0000					len         .byte   ?
>0001					flags       .byte   ?   ; block scale, text encoding, approx size
>0000					flags       .byte   ?   ; block scale, text encoding, approx size
>0000					free        .fill   6   ; blocks used/free
>0000					token       .byte   ?   ; TODO: break out into fields
>0000					len         .byte   ?   ; Raw packet length.
>0000					value       .byte   ?
>0001					cookie      .byte   ?

;******  Return to file: pendulum.asm

.00a0					event:
>00a0					type        .byte   ?   ; Enum above
>00a1					buf         .byte   ?   ; page id or zero
>00a2					ext         .byte   ?   ; page id or zero
.00a3					key
>00a3					keyboard    .byte   ?   ; Keyboard ID
>00a4					raw         .byte   ?   ; Raw key ID
>00a5					ascii       .byte   ?   ; ASCII value
>00a6					flags       .byte   ?   ; Flags (META)
=$80					META        = $80       ; Meta key; no associated ASCII value.
.00a3					mouse
.00a3					delta
>00a3					x           .byte   ?
>00a4					y           .byte   ?
>00a5					z           .byte   ?
>00a6					buttons     .byte   ?
.00a3					clicks
>00a3					inner       .byte   ?
>00a4					middle      .byte   ?
>00a5					outer       .byte   ?
.00a3					joystick
>00a3					joy0        .byte   ?
>00a4					joy1        .byte   ?
.00a3					udp
>00a3					token       .byte   ?   ; TODO: break out into fields
.00a3					tcp
>00a3					len         .byte   ?   ; Raw packet length.
.00a3					file
>00a3					stream      .byte   ?
>00a4					cookie      .byte   ?
.00a5					data
>00a5					requested   .byte   ?   ; Requested number of bytes to read
>00a6					read        .byte   ?   ; Number of bytes actually read
.00a5					wrote
>00a5					requested   .byte   ?   ; Requested number of bytes to read
>00a6					wrote       .byte   ?   ; Number of bytes actually read
.00a3					directory
>00a3					stream      .byte   ?
>00a4					cookie      .byte   ?
.00a5					volume
>00a5					len         .byte   ?   ; Length of volname (in buf)
>00a6					flags       .byte   ?   ; block size, text encoding
.00a5					file
>00a5					len         .byte   ?
>00a6					flags       .byte   ?   ; block scale, text encoding, approx size
.00a5					free
>00a5					flags       .byte   ?   ; block scale, text encoding, approx size
.00a3					timer
>00a3					value       .byte   ?
>00a4					cookie      .byte   ?
>2000	f2 56						.byte $f2,$56						; Required bytes for the Kernel to identify
>2002	04 01						.byte $04,$01						; how big is the program in 8K sections, What slot to map to
>2004	0b 20						.byte $0b,$20						; the starting address of your program
>2006	00 00 00 00					.byte $00,$00,$00,$00				; reserved
>200a	00						.byte $00							; terminating byte
.200b					SC:
.200b	64 01		stz $01				stz MMU_IO_CTRL						; should do this on every program
.200d	a9 a0		lda #$a0	        lda #<event
.200f	85 f0		sta $f0		        sta kernel.args.events
.2011	a9 00		lda #$00	        lda #>event
.2013	85 f1		sta $f1		        sta kernel.args.events+1
.2015	a9 27		lda #$27			lda #%00100111						; Graphic, Sprites Engine enabled  			|xx|GM|SP|TL|BM|GR|OV|TX|
.2017	8d 00 d0	sta $d000			sta VKY_MSTR_CTRL_0					; Text overlay enabled						| 0| 0| 1| 0| 0| 1| 1| 1|
.201a	a9 06		lda #$06			lda #%00000110						; Text mode options for the overlay 		|xx|xx|FS|FO|MS|2Y|2X|70|
.201c	8d 01 d0	sta $d001			sta VKY_MSTR_CTRL_1					; 320 x 240, 60 Hz, dbl X & Y				| 0| 0| 0| 0| 0| 1| 1| 0|
.201f	9c 04 d0	stz $d004			stz VKY_BRDR_CTRL					; No Border
.2022	a9 00		lda #$00			lda #$00							; Set the background color
.2024	8d 0f d0	sta $d00f			sta VKY_BKG_COL_R
.2027	a9 00		lda #$00			lda #$00
.2029	8d 0e d0	sta $d00e			sta VKY_BKG_COL_G
.202c	a9 00		lda #$00			lda #$00
.202e	8d 0d d0	sta $d00d			sta VKY_BKG_COL_B
.2031	20 9e 23	jsr $239e			jsr clrScreen
.2034	a9 93		lda #$93			lda #<sprite1						; location of the first sprite
.2036	8d 2e 26	sta $262e			sta spriteLoc
.2039	a9 2a		lda #$2a			lda #>sprite1
.203b	8d 2f 26	sta $262f			sta spriteLoc+1
.203e	a2 00		ldx #$00			ldx #$00							; set x to zero to start
.2040					spriteLoop:
.2040	8a		txa				txa									; transfer to A and multiply by 8
.2041	0a		asl a				asl
.2042	0a		asl a				asl
.2043	0a		asl a				asl
.2044	a8		tay				tay									; transfer result to Y, sprite control data is every 8 bytes
.2045	a9 61		lda #$61			lda #%01100001						; 8x8 sprite, layer 0, lut 0, enable on
.2047	99 00 d9	sta $d900,y			sta VKY_SP0,y 						; from sprite 0 in Vicky indexed to y
.204a	bd 1f 25	lda $251f,x			lda ballXLO,x
.204d	99 04 d9	sta $d904,y			sta VKY_SP0+SP_POS_X_L,Y
.2050	a9 00		lda #$00			lda #$00
.2052	99 05 d9	sta $d905,y			sta VKY_SP0+SP_POS_X_H,y
.2055	bd 4f 25	lda $254f,x			lda ballYLO,X
.2058	99 06 d9	sta $d906,y			sta VKY_SP0+SP_POS_Y_L,Y
.205b	bd 67 25	lda $2567,x			lda ballYHI,X
.205e	99 07 d9	sta $d907,y			sta VKY_SP0+SP_POS_Y_H,Y
.2061	ad 2e 26	lda $262e			lda spriteLoc
.2064	99 01 d9	sta $d901,y			sta VKY_SP0+SP_AD_L,y
.2067	ad 2f 26	lda $262f			lda spriteLoc+1
.206a	99 02 d9	sta $d902,y			sta VKY_SP0+SP_AD_M,y
.206d	a9 00		lda #$00			lda #$00
.206f	99 03 d9	sta $d903,y			sta VKY_SP0+SP_AD_H,y
.2072	18		clc				clc
.2073	ad 2e 26	lda $262e			lda spriteLoc						; each ball has its own sprite. 8x8 sprites are 64 bytes
.2076	69 40		adc #$40			adc #64
.2078	8d 2e 26	sta $262e			sta spriteLoc
.207b	ad 2f 26	lda $262f			lda spriteLoc+1
.207e	69 00		adc #$00			adc #$00
.2080	8d 2f 26	sta $262f			sta spriteLoc+1
.2083	e8		inx				inx
.2084	e0 18		cpx #$18			cpx #24
.2086	d0 b8		bne $2040			bne spriteLoop
.2088	a9 01		lda #$01			lda #$01							; Change I/O control to page 1
.208a	85 01		sta $01				sta MMU_IO_CTRL
.208c	a9 13		lda #$13			lda #<CLUT0							; Set source pointer to CLUT for color information
.208e	85 80		sta $80				sta ptr_src
.2090	a9 2a		lda #$2a			lda #>CLUT0
.2092	85 81		sta $81				sta ptr_src+1
.2094	a9 00		lda #$00			lda #<VKY_GR_CLUT_0					; Set destination pointer to Graphics CLUT 0
.2096	85 82		sta $82				sta ptr_dst
.2098	a9 d0		lda #$d0			lda #>VKY_GR_CLUT_0
.209a	85 83		sta $83				sta ptr_dst+1
.209c	a2 00		ldx #$00			ldx #$00							; Y is the number of colors to copy, check for 32
.209e	a0 20		ldy #$20			ldy #32
.20a0					makeClut:
.20a0	8c 2d 26	sty $262d			sty totalColors
.20a3					color_loop:
.20a3	a0 00		ldy #$00			ldy #$00							; Y points to the color component (Blue Red Green Alpha)
.20a5					comp_loop:
.20a5	b1 80		lda ($80),y			lda (ptr_src),y						; Read byte from our color table
.20a7	91 82		sta ($82),y			sta (ptr_dst),y						; write byte to the Graphic CLUT
.20a9	c8		iny				iny
.20aa	c0 04		cpy #$04			cpy #$04							; Do 4 bytes for one color + Alpha
.20ac	d0 f7		bne $20a5			bne comp_loop
.20ae	e8		inx				inx
.20af	ec 2d 26	cpx $262d			cpx totalColors						; Loop for all colors of the CLUT
.20b2	f0 1d		beq $20d1			beq done_lut
.20b4	18		clc				clc									; Move the source pointer to the next Color
.20b5	a5 80		lda $80				lda ptr_src
.20b7	69 04		adc #$04			adc #$04
.20b9	85 80		sta $80				sta ptr_src
.20bb	a5 81		lda $81				lda ptr_src+1
.20bd	69 00		adc #$00			adc #$00
.20bf	85 81		sta $81				sta ptr_src+1
.20c1	18		clc				clc									; Move the destination pointer to the next Color
.20c2	a5 82		lda $82				lda ptr_dst
.20c4	69 04		adc #$04			adc #$04
.20c6	85 82		sta $82				sta ptr_dst
.20c8	a5 83		lda $83				lda ptr_dst+1
.20ca	69 00		adc #$00			adc #$00
.20cc	85 83		sta $83				sta ptr_dst+1
.20ce	4c a3 20	jmp $20a3			jmp color_loop						; and start copying the next color
.20d1					done_lut:
.20d1	64 01		stz $01				stz MMU_IO_CTRL
.20d3					setFont:
.20d3	a9 41		lda #$41			lda #<font
.20d5	85 80		sta $80				sta $80
.20d7	a9 26		lda #$26			lda #>font
.20d9	85 81		sta $81				sta $81
.20db	a9 c1		lda #$c1			lda #$c1
.20dd	64 82		stz $82				stz $82
.20df	85 83		sta $83				sta $83
.20e1	a0 00		ldy #$00			ldy #$00
.20e3	a2 03		ldx #$03			ldx #$03
.20e5	a9 01		lda #$01			lda #$01
.20e7	85 01		sta $01				sta MMU_IO_CTRL
.20e9					_sfLoop:
.20e9	b1 80		lda ($80),y			lda ($80),y
.20eb	91 82		sta ($82),y			sta ($82),y
.20ed	c8		iny				iny
.20ee	d0 f9		bne $20e9			bne _sfLoop
.20f0	e6 81		inc $81				inc $81
.20f2	e6 83		inc $83				inc $83
.20f4	ca		dex				dex
.20f5	d0 f2		bne $20e9			bne _sfLoop
.20f7	64 01		stz $01				stz MMU_IO_CTRL
.20f9	20 77 23	jsr $2377			jsr setBalls
.20fc	20 e2 22	jsr $22e2			jsr setMidiInstrument
.20ff	a9 00		lda #$00			lda #kernel.args.timer.FRAMES		; set the Timer to Frames
.2101	09 80		ora #$80			ora #kernel.args.timer.QUERY		; and query what frame we're on
.2103	85 f3		sta $f3				sta kernel.args.timer.units			; store in units parameter
.2105	20 f0 ff	jsr $fff0			jsr kernel.Clock.SetTimer			; jsr to Kernel Routine
.2108	b0 04		bcs $210e			bcs skipSet							; If Carry set, ignore
.210a	69 01		adc #$01			adc #$01							; if not add 1 to Accumulator for next frame
.210c	85 d0		sta $d0				sta $d0
.210e					skipSet:
.210e	20 67 23	jsr $2367			jsr SetTimer						; Let's get the kernel set up for the timer
.2111					loop:
.2111	20 17 21	jsr $2117			jsr handle_events					; This is my game loop
.2114	4c 11 21	jmp $2111			jmp loop
.2117					handle_events:
.2117	a5 f2		lda $f2				lda kernel.args.events.pending		; Peek at the queue to see if anything is pending
.2119	10 0b		bpl $2126			bpl done_handle_events				; Nothing to do
.211b	20 00 ff	jsr $ff00			jsr kernel.NextEvent				; Get the next event.
.211e	b0 06		bcs $2126			bcs done_handle_events				; If Carry is set, skip the handler
.2120	20 27 21	jsr $2127			jsr dispatch						; Handle the event
.2123	4c 17 21	jmp $2117			jmp handle_events					; go and check for another event
.2126					done_handle_events:
.2126	60		rts				rts
.2127					dispatch:
.2127	a5 a0		lda $a0				lda event.type						; get the event type from Kernel
.2129	c9 52		cmp #$52			cmp #kernel.event.timer.EXPIRED		; is the event timer.EXPIRED?
.212b	f0 05		beq $2132			beq UpdateScreenJmp					; run the screen update
.212d	c9 08		cmp #$08			cmp #kernel.event.key.PRESSED
.212f	f0 04		beq $2135	        beq keypress
.2131	60		rts				rts
.2132					UpdateScreenJmp
.2132	4c 00 22	jmp $2200			jmp UpdateScreen					; jmp because conditional is tto far
.2135					keypress:
.2135	ad 30 26	lda $2630			lda menuFlag
.2138	f0 57		beq $2191			beq checkTab
.213a	a5 a6		lda $a6		        lda event.key.flags               	; Once a key is pressed, we can get the ascii value by loading the byte from the
.213c	a5 a5		lda $a5		        lda event.key.ascii                 ; event.key.ascii location assigned by the kernel. We then check to see if it's a
.213e	c9 10		cmp #$10			cmp #16								; These are the ascii characters for the menu input!
.2140	f0 58		beq $219a			beq moreGap
.2142	c9 0e		cmp #$0e			cmp #14
.2144	f0 15		beq $215b			beq lessGapJmp						; TAB does not work here. These do not work when the menu is off.
.2146	c9 06		cmp #$06			cmp #6
.2148	f0 61		beq $21ab			beq moreSpeed
.214a	c9 02		cmp #$02			cmp #2
.214c	f0 79		beq $21c7			beq lessSpeed
.214e	c9 69		cmp #$69			cmp #105
.2150	f0 0c		beq $215e			beq nextInst
.2152	c9 49		cmp #$49			cmp #73
.2154	f0 1c		beq $2172			beq lastInst
.2156	c9 0d		cmp #$0d			cmp #13
.2158	f0 2a		beq $2184			beq restart
.215a					keyDone:
.215a	60		rts				rts
.215b					lessGapJmp
.215b	4c e8 21	jmp $21e8			jmp lessGap							; jmp because conditional is too far away
.215e					nextInst:
.215e	18		clc				clc
.215f	ad 2c 26	lda $262c			lda midiInst
.2162	69 01		adc #$01			adc #$01
.2164	c9 80		cmp #$80			cmp #128
.2166	b0 03		bcs $216b			bcs nInstDone
.2168	8d 2c 26	sta $262c			sta midiInst
.216b					nInstDone:
.216b	20 61 24	jsr $2461			jsr printMidiInst
.216e	20 e2 22	jsr $22e2			jsr setMidiInstrument
.2171	60		rts				rts
.2172					lastInst:
.2172	38		sec				sec
.2173	ad 2c 26	lda $262c			lda midiInst
.2176	e9 01		sbc #$01			sbc #$01
.2178	30 03		bmi $217d			bmi lInstDone
.217a	8d 2c 26	sta $262c			sta midiInst
.217d					lInstDone:
.217d	20 61 24	jsr $2461			jsr printMidiInst
.2180	20 e2 22	jsr $22e2			jsr setMidiInstrument
.2183	60		rts				rts
.2184					restart:
.2184	20 9e 23	jsr $239e			jsr clrScreen						; and restarts the balls from 0
.2187	20 a5 24	jsr $24a5			jsr resetBalls
.218a	20 77 23	jsr $2377			jsr setBalls
.218d	9c 30 26	stz $2630			stz menuFlag
.2190	60		rts				rts
.2191					checkTab:
.2191	a5 a6		lda $a6				lda event.key.flags               	; Once a key is pressed, we can get the ascii value by loading the byte from the
.2193	a5 a5		lda $a5				lda event.key.ascii                 ; event.key.ascii location assigned by the kernel. We then check to see if it's a
.2195	c9 09		cmp #$09			cmp #9
.2197	f0 60		beq $21f9			beq runMenu
.2199	60		rts				rts
.219a					moreGap:
.219a	18		clc				clc									; This does not take effect until RETURN is hit
.219b	ad 29 26	lda $2629			lda speedRatio
.219e	69 04		adc #$04			adc #$04
.21a0	c9 44		cmp #$44			cmp #$44
.21a2	b0 03		bcs $21a7			bcs topGap
.21a4	8d 29 26	sta $2629			sta speedRatio
.21a7					topGap:
.21a7	20 40 24	jsr $2440			jsr printGap
.21aa	60		rts				rts
.21ab					moreSpeed:
.21ab	18		clc				clc									; will adjust with the gap setting once RETURN is hit
.21ac	ad 27 26	lda $2627			lda speedBase
.21af	69 08		adc #$08			adc #$08
.21b1	8d 27 26	sta $2627			sta speedBase
.21b4	ad 28 26	lda $2628			lda speedBase+1
.21b7	69 00		adc #$00			adc #$00
.21b9	8d 28 26	sta $2628			sta speedbase+1
.21bc	c9 03		cmp #$03			cmp #$03
.21be	d0 03		bne $21c3			bne mSDone
.21c0	9c 27 26	stz $2627			stz speedBase
.21c3					mSDone:
.21c3	20 13 24	jsr $2413			jsr printSpeed
.21c6	60		rts				rts
.21c7					lessSpeed:
.21c7	38		sec				sec									; will adjust once the RETURN is hit.
.21c8	ad 27 26	lda $2627			lda speedBase
.21cb	e9 08		sbc #$08			sbc #$08
.21cd	8d 27 26	sta $2627			sta speedbase
.21d0	ad 28 26	lda $2628			lda speedbase+1
.21d3	e9 00		sbc #$00			sbc #$00
.21d5	8d 28 26	sta $2628			sta speedbase+1
.21d8	d0 0a		bne $21e4			bne lSpeedDone
.21da					checkSpeedLO:
.21da	ad 27 26	lda $2627			lda speedBase
.21dd	d0 05		bne $21e4			bne lSpeedDone
.21df	a9 08		lda #$08			lda #$08
.21e1	8d 27 26	sta $2627			sta speedBase
.21e4					lSpeedDone:
.21e4	20 13 24	jsr $2413			jsr printSpeed
.21e7	60		rts				rts
.21e8					lessGap:
.21e8	38		sec				sec									; take affect until RETURN is hit.
.21e9	ad 29 26	lda $2629			lda speedRatio
.21ec	e9 04		sbc #$04			sbc #$04
.21ee	c9 04		cmp #$04			cmp #$04
.21f0	90 03		bcc $21f5			bcc bottomGap
.21f2	8d 29 26	sta $2629			sta speedRatio
.21f5					bottomGap:
.21f5	20 40 24	jsr $2440			jsr printGap
.21f8	60		rts				rts
.21f9					runMenu:
.21f9	20 d2 23	jsr $23d2			jsr printMenu
.21fc	ee 30 26	inc $2630			inc menuFlag
.21ff	60		rts				rts
.2200					UpdateScreen:
.2200	20 67 23	jsr $2367			jsr SetTimer						; reset timer for next SOF
.2203	20 07 22	jsr $2207			jsr moveBalls						; move the balls
.2206					noMove:
.2206	60		rts				rts
.2207					moveBalls:
.2207	a2 00		ldx #$00			ldx #$00							; set X to zero to loop 24 balls
.2209					mbLoop:
.2209	8a		txa				txa									; transfer x to A
.220a	0a		asl a				asl									; and multiply by 8
.220b	0a		asl a				asl 								;		sprite control is 8 bytes large
.220c	0a		asl a				asl									;       this sets y at the start of each sprite
.220d	a8		tay				tay									; 		and store in y
.220e	bd bf 24	lda $24bf,x			lda ballDir,x 						; Get the ball direction 1 for right FF for left
.2211	c9 ff		cmp #$ff			cmp #$ff							; check if we're going left
.2213	f0 37		beq $224c			beq goBack							; if yest, go to left routine
.2215					goForward:
.2215	18		clc				clc									; go right routine
.2216	bd 07 25	lda $2507,x			lda ballXFR,x						; we're going to add the speed to the X paramter
.2219	7d d7 24	adc $24d7,x			adc ballSdF,x 						; using a single byte fixed point fraction
.221c	9d 07 25	sta $2507,x			sta ballXFR,x
.221f	bd 1f 25	lda $251f,x			lda ballXLO,x
.2222	7d ef 24	adc $24ef,x			adc ballSdL,x
.2225	9d 1f 25	sta $251f,x			sta ballXLO,x
.2228	bd 37 25	lda $2537,x			lda ballXHI,x
.222b	69 00		adc #$00			adc #$00
.222d	9d 37 25	sta $2537,x			sta ballxHI,x
.2230	bd 1f 25	lda $251f,x			lda ballXLO,x 						; see if we hit the right side of the screen
.2233	c9 59		cmp #$59			cmp #$59
.2235	90 4a		bcc $2281			bcc placeBall						; no, let's set the sprite on the screen
.2237	bd 37 25	lda $2537,x			lda ballxHI,x 						; need to check HI byte as well
.223a	f0 45		beq $2281			beq placeBall						; no, place sprite on screen
.223c	a9 ff		lda #$ff			lda #$ff							; yes, change the direction flag to $ff
.223e	9d bf 24	sta $24bf,x			sta ballDir,x
.2241	20 9c 22	jsr $229c			jsr reverseBack
.2244	20 ee 22	jsr $22ee			jsr makeMusic						; hit the note on the SAM chip
.2247	20 ff 22	jsr $22ff			jsr makeColor						; fill the ball with the correct color
.224a	80 35		bra $2281			bra placeBall						; and drop down to the opposite direction
.224c					goBack:
.224c	38		sec				sec 								; go left direction
.224d	bd 07 25	lda $2507,x			lda ballXFR,x						; subtract the ball speed from the x potition
.2250	fd d7 24	sbc $24d7,x			sbc ballSdF,x
.2253	9d 07 25	sta $2507,x			sta ballXFR,x
.2256	bd 1f 25	lda $251f,x			lda ballXLO,x
.2259	fd ef 24	sbc $24ef,x			sbc ballSdL,x
.225c	9d 1f 25	sta $251f,x			sta ballXLO,x
.225f	bd 37 25	lda $2537,x			lda ballXHI,x
.2262	e9 00		sbc #$00			sbc #$00
.2264	9d 37 25	sta $2537,x			sta ballxHI,x
.2267	bd 1f 25	lda $251f,x			lda ballXLO,x 						; check if we hit the left side of the screen
.226a	c9 1f		cmp #$1f			cmp #$1f
.226c	b0 13		bcs $2281			bcs placeBall						; no, place the sprite
.226e	bd 37 25	lda $2537,x			lda ballxHI,x 						; we need to check the hi byte too
.2271	d0 0e		bne $2281			bne placeBall						; no, place the sprite
.2273	a9 01		lda #$01			lda #$01							; change the ball direction to right
.2275	9d bf 24	sta $24bf,x			sta ballDir,x
.2278	20 bf 22	jsr $22bf			jsr reverseForward
.227b	20 ee 22	jsr $22ee			jsr makeMusic						; hit the note on the SAM chip
.227e	20 ff 22	jsr $22ff			jsr makeColor						; fill the ball with the correct color
.2281					placeBall:
.2281	bd 1f 25	lda $251f,x			lda ballXLO,X						; set the sprite position parameter
.2284	99 04 d9	sta $d904,y			sta VKY_SP0+SP_POS_X_L,Y
.2287	bd 37 25	lda $2537,x			lda ballxHI,X
.228a	99 05 d9	sta $d905,y			sta VKY_SP0+SP_POS_X_H,y
.228d	20 12 23	jsr $2312			jsr dropColor						; reduce the color intesity as it travels away from the edge
.2290	20 40 23	jsr $2340			jsr assignColor						; and assign the color to the CLUT
.2293	e8		inx				inx									; go to next ball in sequence
.2294	e0 18		cpx #$18			cpx #24								; have we gone through all 24 balls
.2296	f0 03		beq $229b			beq doneBallLoop					; yes skip the jmp command to top
.2298	4c 09 22	jmp $2209			jmp mbLoop
.229b					doneBallLoop:
.229b	60		rts				rts
.229c					reverseBack:
.229c	38		sec				sec
.229d	bd 07 25	lda $2507,x			lda ballXFR,x
.22a0	e9 00		sbc #$00			sbc #$00
.22a2	8d 2a 26	sta $262a			sta resultFR
.22a5	bd 1f 25	lda $251f,x			lda ballXLO,x
.22a8	e9 59		sbc #$59			sbc #$59
.22aa	8d 2b 26	sta $262b			sta resultLO
.22ad	38		sec				sec
.22ae	a9 00		lda #$00			lda #$00
.22b0	ed 2a 26	sbc $262a			sbc resultFR
.22b3	9d 07 25	sta $2507,x			sta ballXFR,x
.22b6	a9 59		lda #$59			lda #$59
.22b8	ed 2b 26	sbc $262b			sbc resultLO
.22bb	9d 1f 25	sta $251f,x			sta ballXLO,x
.22be	60		rts				rts
.22bf					reverseForward:
.22bf	38		sec				sec
.22c0	a9 00		lda #$00			lda #$00
.22c2	fd 07 25	sbc $2507,x			sbc ballXFR,x
.22c5	8d 2a 26	sta $262a			sta resultFR
.22c8	a9 1f		lda #$1f			lda #$1f
.22ca	fd 1f 25	sbc $251f,x			sbc ballXLO,x
.22cd	8d 2b 26	sta $262b			sta resultLO
.22d0	18		clc				clc
.22d1	a9 00		lda #$00			lda #$00
.22d3	6d 2a 26	adc $262a			adc resultFR
.22d6	9d 07 25	sta $2507,x			sta ballXFR,x
.22d9	a9 1f		lda #$1f			lda #$1f
.22db	6d 2b 26	adc $262b			adc resultLO
.22de	9d 1f 25	sta $251f,x			sta ballXLO,x
.22e1	60		rts				rts
.22e2					setMidiInstrument:
.22e2	a9 c0		lda #$c0			lda #$c0							; set the instrument for channel 0
.22e4	8d a1 dd	sta $dda1			sta MIDI_COM
.22e7	ad 2c 26	lda $262c			lda midiInst								; this is the instrument number
.22ea	8d a1 dd	sta $dda1			sta MIDI_COM
.22ed	60		rts				rts
.22ee					makeMusic:
.22ee	a9 90		lda #$90			lda #$90							; strike a note on channel 0
.22f0	8d a1 dd	sta $dda1			sta MIDI_COM
.22f3	bd 7f 25	lda $257f,x			lda ballNote,X						; send note value based on what ball hit the edge
.22f6	8d a1 dd	sta $dda1			sta MIDI_COM
.22f9	a9 40		lda #$40			lda #$40							; set strike velocity ($40 is the default value)
.22fb	8d a1 dd	sta $dda1			sta MIDI_COM
.22fe	60		rts				rts
.22ff					makeColor:
.22ff	bd df 25	lda $25df,x			lda colorG,X						; get the reference color
.2302	9d 97 25	sta $2597,x			sta ballG,X							; and store it in the ball
.2305	bd f7 25	lda $25f7,x			lda colorR,X						; for all three colors
.2308	9d af 25	sta $25af,x			sta ballR,X
.230b	bd 0f 26	lda $260f,x			lda colorB,X
.230e	9d c7 25	sta $25c7,x			sta ballB,X
.2311	60		rts				rts
.2312					dropColor:
.2312	de 97 25	dec $2597,x			dec ballG,X							; each cycle reduce the color value by one
.2315	de af 25	dec $25af,x			dec ballR,x
.2318	de c7 25	dec $25c7,x			dec ballB,x
.231b	bd 97 25	lda $2597,x			lda ballG,X							; check if we've gone too far
.231e	c9 ff		cmp #$ff			cmp #$ff							; and reset to zero
.2320	d0 05		bne $2327			bne checkRed
.2322	a9 00		lda #$00			lda #$00
.2324	9d 97 25	sta $2597,x			sta ballG,x
.2327					checkRed:
.2327	bd af 25	lda $25af,x			lda ballR,x
.232a	c9 ff		cmp #$ff			cmp #$ff
.232c	d0 05		bne $2333			bne checkBlue
.232e	a9 00		lda #$00			lda #$00
.2330	9d af 25	sta $25af,x			sta ballR,x
.2333					checkBlue:
.2333	bd c7 25	lda $25c7,x			lda ballB,x
.2336	c9 ff		cmp #$ff			cmp #$ff
.2338	d0 05		bne $233f			bne colorDone
.233a	a9 00		lda #$00			lda #$00
.233c	9d c7 25	sta $25c7,x			sta ballB,x
.233f					colorDone:
.233f	60		rts				rts
.2340					assignColor:
.2340	a9 01		lda #$01			lda #$01							; Change I/O control to page 1
.2342	85 01		sta $01				sta MMU_IO_CTRL
.2344	8a		txa				txa									; grab which ball we have
.2345	18		clc				clc
.2346	69 02		adc #$02			adc #$02							; and add two for the first color to first ball
.2348	0a		asl a				asl									; then multiply by 4 to get to the right
.2349	0a		asl a				asl									; location for the RGBA bytes for each color
.234a	a8		tay				tay									; and transfer to Y for indirect indexing
.234b	a9 00		lda #$00			lda #<VKY_GR_CLUT_0					; Set destination pointer to Graphics CLUT 0
.234d	85 82		sta $82				sta ptr_dst
.234f	a9 d0		lda #$d0			lda #>VKY_GR_CLUT_0
.2351	85 83		sta $83				sta ptr_dst+1
.2353	bd c7 25	lda $25c7,x			lda ballB,x 						; get the ball color
.2356	91 82		sta ($82),y			sta (ptr_dst),y						; and store it in the CLUT
.2358	c8		iny				iny									; incrment y for next color component
.2359	bd af 25	lda $25af,x			lda ballR,x 						; and repeat
.235c	91 82		sta ($82),y			sta (ptr_dst),y
.235e	c8		iny				iny
.235f	bd 97 25	lda $2597,x			lda ballG,x
.2362	91 82		sta ($82),y			sta (ptr_dst),y
.2364	64 01		stz $01				stz MMU_IO_CTRL						; reset mmu IO to zero
.2366	60		rts				rts
.2367					SetTimer:
.2367	e6 d0		inc $d0				inc $d0
.2369	a5 d0		lda $d0				lda $d0
.236b	85 f4		sta $f4				sta kernel.args.timer.absolute		; store in timer.absolute paramter
.236d	85 f5		sta $f5				sta kernel.args.timer.cookie		; saved as a cookie to the kernel (same as frame number)
.236f	a9 00		lda #$00			lda #kernel.args.timer.FRAMES		; set the Timer to Frames
.2371	85 f3		sta $f3				sta kernel.args.timer.units			; store in units parameter
.2373	20 f0 ff	jsr $fff0			jsr kernel.Clock.SetTimer			; jsr to Kernel routine to set timer
.2376	60		rts				rts
.2377					setBalls:
.2377	ad 27 26	lda $2627			lda speedBase
.237a	a2 17		ldx #$17			ldx #23
.237c	9d d7 24	sta $24d7,x			sta ballSdF,X
.237f	ad 28 26	lda $2628			lda speedBase+1
.2382	9d ef 24	sta $24ef,x			sta ballSdL,X
.2385	ca		dex				dex
.2386					sbLoop:
.2386	18		clc				clc									; Then we'll add the speed ratio to each ball up the chain
.2387	bd d8 24	lda $24d8,x			lda ballSdF+1,X						; so each ball is faster than the previous.
.238a	6d 29 26	adc $2629			adc speedRatio						; save these values in our speed table
.238d	9d d7 24	sta $24d7,x			sta ballSdF,X
.2390	bd f0 24	lda $24f0,x			lda ballSdL+1,X
.2393	69 00		adc #$00			adc #$00
.2395	9d ef 24	sta $24ef,x			sta ballSdL,X
.2398	ca		dex				dex
.2399	30 02		bmi $239d			bmi sbDone
.239b	80 e9		bra $2386			bra sbLoop
.239d					sbDone:
.239d	60		rts				rts
.239e					clrScreen:
.239e	a2 00		ldx #$00			ldx #$00							; set x for indexing
.23a0					csLoop:
.23a0	a9 02		lda #$02			lda #$02							; set the output to character matrix
.23a2	85 01		sta $01				sta MMU_IO_CTRL
.23a4	a9 20		lda #$20			lda #$20							; set a to a blank character
.23a6	9d 00 c0	sta $c000,x			sta $c000+$000,x 					; and save every 240 memory locations
.23a9	9d f0 c0	sta $c0f0,x			sta $c000+$0f0,x 					;
.23ac	9d e0 c1	sta $c1e0,x			sta $c000+$1e0,x 					; We're only going to loop once instead of
.23af	9d d0 c2	sta $c2d0,x			sta $c000+$2d0,x 					; nesting loops
.23b2	9d c0 c3	sta $c3c0,x			sta $c000+$3c0,x
.23b5	a9 03		lda #$03			lda #$03							; set the output to the color matrix
.23b7	85 01		sta $01				sta MMU_IO_CTRL
.23b9	a9 f0		lda #$f0			lda #$f0							; pick white
.23bb	9d 00 c0	sta $c000,x			sta $c000+$000,x 					; do the same save groups
.23be	9d f0 c0	sta $c0f0,x			sta $c000+$0f0,x
.23c1	9d e0 c1	sta $c1e0,x			sta $c000+$1e0,x
.23c4	9d d0 c2	sta $c2d0,x			sta $c000+$2d0,x
.23c7	9d c0 c3	sta $c3c0,x			sta $c000+$3c0,x
.23ca	e8		inx				inx									; inc x
.23cb	e0 f1		cpx #$f1			cpx #$f1 							; and check if we've hit 241
.23cd	90 d1		bcc $23a0			bcc csLoop							; if less, continue looping
.23cf	64 01		stz $01				stz MMU_IO_CTRL						; reset IO to 0
.23d1	60		rts				rts
.23d2					printMenu:
.23d2	a2 00		ldx #$00			ldx #$00
.23d4					pMenuLoop:
.23d4	bd 41 29	lda $2941,x			lda menu,x
.23d7	c9 ff		cmp #$ff			cmp #$ff
.23d9	f0 1a		beq $23f5			beq pMenuDone
.23db	85 82		sta $82				sta ptr_dst
.23dd	e8		inx				inx
.23de	bd 41 29	lda $2941,x			lda menu,x
.23e1	85 83		sta $83				sta ptr_dst+1
.23e3	e8		inx				inx
.23e4	bd 41 29	lda $2941,x			lda menu,x
.23e7	85 80		sta $80				sta ptr_src
.23e9	e8		inx				inx
.23ea	bd 41 29	lda $2941,x			lda menu,x
.23ed	85 81		sta $81				sta ptr_src+1
.23ef	20 ff 23	jsr $23ff			jsr outputText
.23f2	e8		inx				inx
.23f3	80 df		bra $23d4			bra pMenuLoop
.23f5					pMenuDone:
.23f5	20 13 24	jsr $2413			jsr printSpeed
.23f8	20 40 24	jsr $2440			jsr printGap
.23fb	20 61 24	jsr $2461			jsr printMidiInst
.23fe	60		rts				rts
.23ff					outputText:
.23ff	a9 02		lda #$02			lda #$02
.2401	85 01		sta $01				sta MMU_IO_CTRL
.2403	a0 00		ldy #$00			ldy #$00
.2405					oTextLoop:
.2405	b1 80		lda ($80),y			lda (ptr_src),y
.2407	c9 5e		cmp #$5e			cmp #94
.2409	f0 05		beq $2410			beq oTextDone
.240b	91 82		sta ($82),y			sta (ptr_dst),y
.240d	c8		iny				iny
.240e	80 f5		bra $2405			bra oTextLoop
.2410					oTextDone:
.2410	64 01		stz $01				stz MMU_IO_CTRL
.2412	60		rts				rts
.2413					printSpeed:
.2413	a9 02		lda #$02			lda #$02
.2415	85 01		sta $01				sta MMU_IO_CTRL
.2417	ad 28 26	lda $2628			lda speedbase+1
.241a	29 0f		and #$0f			and #$0f
.241c	aa		tax				tax
.241d	bd 31 26	lda $2631,x			lda hex,x
.2420	8d 61 c1	sta $c161			sta $c161
.2423	ad 27 26	lda $2627			lda speedbase
.2426	4a		lsr a				lsr
.2427	4a		lsr a				lsr
.2428	4a		lsr a				lsr
.2429	4a		lsr a				lsr
.242a	aa		tax				tax
.242b	bd 31 26	lda $2631,x			lda hex,X
.242e	8d 62 c1	sta $c162			sta $c161+1
.2431	ad 27 26	lda $2627			lda speedbase
.2434	29 0f		and #$0f			and #$0f
.2436	aa		tax				tax
.2437	bd 31 26	lda $2631,x			lda hex,x
.243a	8d 63 c1	sta $c163			sta $c161+2
.243d	64 01		stz $01				stz MMU_IO_CTRL
.243f	60		rts				rts
.2440					printgap:
.2440	a9 02		lda #$02			lda #$02
.2442	85 01		sta $01				sta MMU_IO_CTRL
.2444	ad 29 26	lda $2629			lda speedRatio
.2447	4a		lsr a				lsr
.2448	4a		lsr a				lsr
.2449	4a		lsr a				lsr
.244a	4a		lsr a				lsr
.244b	aa		tax				tax
.244c	bd 31 26	lda $2631,x			lda hex,x
.244f	8d b1 c1	sta $c1b1			sta $c1b1
.2452	ad 29 26	lda $2629			lda speedRatio
.2455	29 0f		and #$0f			and #$0f
.2457	aa		tax				tax
.2458	bd 31 26	lda $2631,x			lda hex,x
.245b	8d b2 c1	sta $c1b2			sta $c1b1+1
.245e	64 01		stz $01				stz MMU_IO_CTRL
.2460	60		rts				rts
.2461					printMidiInst:
.2461	ad 2c 26	lda $262c			lda midiInst
.2464	8d 00 de	sta $de00			sta MULU_A_L
.2467	9c 01 de	stz $de01			stz MULU_A_H
.246a	a9 17		lda #$17			lda #23
.246c	8d 02 de	sta $de02			sta MULU_B_L
.246f	9c 03 de	stz $de03			stz MULU_B_H
.2472	18		clc				clc
.2473	ad 10 de	lda $de10			lda MULU_LL
.2476	69 93		adc #$93			adc #<instrumentList
.2478	85 80		sta $80				sta ptr_src
.247a	ad 11 de	lda $de11			lda MULU_LH
.247d	69 30		adc #$30			adc #>instrumentList
.247f	85 81		sta $81				sta ptr_src+1
.2481	a9 33		lda #$33			lda #$33
.2483	85 82		sta $82				sta ptr_dst
.2485	a9 c2		lda #$c2			lda #$c2
.2487	85 83		sta $83				sta ptr_dst+1
.2489	a9 02		lda #$02			lda #$02
.248b	85 01		sta $01				sta MMU_IO_CTRL
.248d	a0 00		ldy #$00			ldy #$00
.248f					pMidiLoop:
.248f	a9 02		lda #$02			lda #$02
.2491	85 01		sta $01				sta MMU_IO_CTRL
.2493	b1 80		lda ($80),y			lda (ptr_src),y
.2495	91 82		sta ($82),y			sta (ptr_dst),y
.2497	e6 01		inc $01				inc MMU_IO_CTRL
.2499	a9 a0		lda #$a0			lda #$a0
.249b	91 82		sta ($82),y			sta (ptr_dst),y
.249d	c8		iny				iny
.249e	c0 17		cpy #$17			cpy #23
.24a0	90 ed		bcc $248f			bcc pMidiLoop
.24a2	64 01		stz $01				stz MMU_IO_CTRL
.24a4	60		rts				rts
.24a5					resetBalls:
.24a5	a2 00		ldx #$00			ldx #00
.24a7					rBallLoop:
.24a7	a9 20		lda #$20			lda #$20
.24a9	9d 1f 25	sta $251f,x			sta ballXLO,X
.24ac	a9 00		lda #$00			lda #$00
.24ae	9d 37 25	sta $2537,x			sta ballxHI,x
.24b1	9d 07 25	sta $2507,x			sta ballXFR,x
.24b4	a9 01		lda #$01			lda #$01
.24b6	9d bf 24	sta $24bf,x			sta ballDir,x
.24b9	e8		inx				inx
.24ba	e0 18		cpx #$18			cpx #24
.24bc	90 e9		bcc $24a7			bcc rBallLoop
.24be	60		rts				rts
>24bf	01 01 01 01 01 01 01 01		ballDir:	.byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
>24c7	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01
>24d7	00 f0 e0 d0 c0 b0 a0 90		ballSdF:	.byte $00,$f0,$e0,$d0,$c0,$b0,$a0,$90,$80,$70,$60,$50,$40,$30,$20,$10,$00,$f0,$e0,$d0,$c0,$b0,$a0,$90
>24df	80 70 60 50 40 30 20 10 00 f0 e0 d0 c0 b0 a0 90
>24ef	02 01 01 01 01 01 01 01		ballSdL:	.byte $02,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00
>24f7	01 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00
>2507	00 00 00 00 00 00 00 00		ballXFR:	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>250f	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>251f	20 20 20 20 20 20 20 20		ballXLO:	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
>2527	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>2537	00 00 00 00 00 00 00 00		ballXHI:	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>253f	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>254f	21 2b 35 3f 49 53 5d 67		ballYLO:	.byte $21,$2b,$35,$3f,$49,$53,$5d,$67,$71,$7b,$85,$8f,$99,$a3,$ad,$b7,$c1,$cb,$d5,$df,$e9,$f3,$fd,$07
>2557	71 7b 85 8f 99 a3 ad b7 c1 cb d5 df e9 f3 fd 07
>2567	00 00 00 00 00 00 00 00		ballYHI:	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01
>256f	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>257f	3c 3b 3a 39 38 37 36 35		ballNote:	.byte 60, 59, 58, 57, 56, 55, 54, 53, 52 ,51 ,50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37
>2587	34 33 32 31 30 2f 2e 2d 2c 2b 2a 29 28 27 26 25
>2597	00 00 00 00 00 00 00 00		ballG:		.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>259f	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>25af	00 00 00 00 00 00 00 00		ballR:		.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>25b7	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>25c7	00 00 00 00 00 00 00 00		ballB:		.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>25cf	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>25df	00 00 00 00 00 00 3f 7f		colorG:		.byte $00,$00,        $00,       $00,     $00, $00,   $3F,   $7F,   $BF,    $FF, $FF,    $FF,     $FF,$FF,      $FF,   $FF,  $FF,   $BF,       $7F, $3F,   $00,  $00,    $00,     $00
>25e7	bf ff ff ff ff ff ff ff ff bf 7f 3f 00 00 00 00
>25f7	ff bf 7f 3f 00 00 00 00		colorR:		.byte $FF,$BF,        $7F,       $3F,     $00, $00,   $00,   $00,   $00,    $00, $00,    $00,     $00,$3F,      $7F,   $BF,  $FF,   $FF,       $FF, $FF,   $FF,  $FF,    $FF,     $FF
>25ff	00 00 00 00 00 3f 7f bf ff ff ff ff ff ff ff ff
>260f	ff ff ff ff ff bf bf bf		colorB:		.byte $FF,$FF,        $FF,       $FF,     $FF, $BF,   $BF,   $BF,   $BF,    $BF, $7F,    $7F,     $7F,$7F,      $3F,   $3F,  $3F,   $3F,       $00, $00,   $00,  $00,    $00,     $00
>2617	bf bf 7f 7f 7f 7f 3f 3f 3f 3f 00 00 00 00 00 00
>2627	90 00				speedBase:		.word $0090 					; The slowest ball speed
>2629	10				speedRatio:		.byte $10						; the amount between balls
>262a	00				resultFR:		.byte $00
>262b	00				resultLO:		.byte $00
>262c	0b				midiInst:		.byte 11
>262d	20				totalColors:	.byte 32
>262e	00 00				spriteLoc:		.word $0000
>2630	00				menuFlag:		.byte $00
>2631	30 31 32 33 34 35 36 37		hex:			.text "0123456789abcdef"
>2639	38 39 61 62 63 64 65 66
.2641					font:
>2641	00 00 00 00 00 00 00 00		.binary "atari.bin"
>2649	00 18 18 18 18 00 18 00 00 66 66 66 00 00 00 00
>2659	00 66 ff 66 66 ff 66 00 18 3e 60 3c 06 7c 18 00
>2669	00 66 6c 18 30 66 46 00 1c 36 1c 38 6f 66 3b 00
>2679	00 18 18 18 00 00 00 00 0c 18 30 30 30 18 0c 00
>2689	30 18 0c 0c 0c 18 30 00 00 66 3c ff 3c 66 00 00
>2699	00 18 18 7e 18 18 00 00 00 00 00 00 00 18 18 30
>26a9	00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>26b9	00 03 06 0c 18 30 60 00 00 3c 66 6e 76 66 3c 00
>26c9	00 18 38 18 18 18 7e 00 00 3c 66 0c 18 30 7e 00
>26d9	00 7e 0c 18 0c 66 3c 00 00 0c 1c 3c 6c 7e 0c 00
>26e9	00 7e 60 7c 06 66 3c 00 00 3c 60 7c 66 66 3c 00
>26f9	00 7e 06 0c 18 30 30 00 00 3c 66 3c 66 66 3c 00
>2709	00 3c 66 3e 06 0c 38 00 00 00 18 00 00 18 00 00
>2719	00 00 18 00 00 18 18 30 0c 18 30 60 30 18 0c 00
>2729	00 00 7e 00 7e 00 00 00 30 18 0c 06 0c 18 30 00
>2739	3c 66 06 0c 18 00 18 00 00 3c 66 6e 6e 60 3e 00
>2749	00 18 3c 66 66 7e 66 00 00 7c 66 7c 66 66 7c 00
>2759	00 3c 66 60 60 66 3c 00 00 78 6c 66 66 6c 78 00
>2769	00 7e 60 7c 60 60 7e 00 00 7e 60 7c 60 60 60 00
>2779	00 3e 60 60 6e 66 3c 00 00 66 66 7e 66 66 66 00
>2789	00 7e 18 18 18 18 7e 00 00 06 06 06 06 66 3c 00
>2799	00 66 6c 78 78 6c 66 00 00 60 60 60 60 60 7e 00
>27a9	00 63 77 7f 6b 63 63 00 00 66 76 7e 7e 6e 66 00
>27b9	00 3c 66 66 66 66 3c 00 00 7c 66 66 7c 60 60 00
>27c9	00 3c 66 66 66 6c 36 00 00 7c 66 66 7c 6c 66 00
>27d9	00 3c 60 3c 06 06 3c 00 00 7e 18 18 18 18 18 00
>27e9	00 66 66 66 66 66 7e 00 00 66 66 66 66 3c 18 00
>27f9	00 63 63 6b 7f 77 63 00 00 66 66 3c 3c 66 66 00
>2809	00 66 66 3c 18 18 18 00 00 7e 0c 18 30 60 7e 00
>2819	3c 30 30 30 30 30 3c 00 00 60 30 18 0c 06 03 00
>2829	3c 0c 0c 0c 0c 0c 3c 00 00 18 3c 66 00 00 00 00
>2839	33 99 cc 66 33 99 cc 66 00 18 18 18 00 00 00 00
>2849	00 00 3c 06 3e 66 3e 00 00 60 60 7c 66 66 7c 00
>2859	00 00 3c 60 60 60 3c 00 00 06 06 3e 66 66 3e 00
>2869	00 00 3c 66 7e 60 3c 00 00 0e 18 3e 18 18 18 00
>2879	00 00 3e 66 66 3e 06 7c 00 60 60 7c 66 66 66 00
>2889	00 18 00 38 18 18 3c 00 00 06 00 06 06 06 06 3c
>2899	00 60 60 6c 78 6c 66 00 00 38 18 18 18 18 3c 00
>28a9	00 00 66 7f 7f 6b 63 00 00 00 7c 66 66 66 66 00
>28b9	00 00 3c 66 66 66 3c 00 00 00 7c 66 66 7c 60 60
>28c9	00 00 3e 66 66 3e 06 06 00 00 7c 66 60 60 60 00
>28d9	00 00 3e 60 3c 06 7c 00 00 18 7e 18 18 18 0e 00
>28e9	00 00 66 66 66 66 3e 00 00 00 66 66 66 3c 18 00
>28f9	00 00 63 6b 7f 3e 36 00 00 00 66 3c 18 3c 66 00
>2909	00 00 66 66 66 3e 0c 78 00 00 7e 0c 18 30 7e 00
>2919	0c 10 10 20 10 10 0c 00 10 10 10 10 10 10 10 10
>2929	30 08 08 04 08 08 30 00 00 00 30 49 06 00 00 00
>2939	08 04 04 08 10 10 08 00

;******  Processing file: menu.s

.2941					menu:
>2941	60 c0 5e 29 41 c1 67 29		            .word $c060,mTitle,$c141,mSpeed,$c191,gap,$c1e1,inst,$c3a1,prStart,$c2a9,prTab,$c49f,dfs
>2949	91 c1 88 29 e1 c1 a9 29 a1 c3 cd 29 a9 c2 e4 29
>2959	9f c4 02 2a
>295d	ff				            .byte $ff
>295e	50 45 4e 44 55 4c 55 4d		mTitle:     .text   "PENDULUM^"
>2966	5e
>2967	55 73 65 20 4c 45 46 54		mSpeed:     .text   "Use LEFT/RIGHT to set speed.   $^"
>296f	2f 52 49 47 48 54 20 74 6f 20 73 65 74 20 73 70
>297f	65 65 64 2e 20 20 20 24 5e
>2988	55 73 65 20 55 50 2f 44		gap:        .text   "Use UP/DOWN to set the gap.    $^"
>2990	4f 57 4e 20 74 6f 20 73 65 74 20 74 68 65 20 67
>29a0	61 70 2e 20 20 20 20 24 5e
>29a9	55 73 65 20 49 2f 53 48		inst:       .text   "Use I/SHIFT I to change instrument.^"
>29b1	49 46 54 20 49 20 74 6f 20 63 68 61 6e 67 65 20
>29c1	69 6e 73 74 72 75 6d 65 6e 74 2e 5e
>29cd	50 52 45 53 53 20 52 45		prStart:    .text   "PRESS RETURN TO START.^"
>29d5	54 55 52 4e 20 54 4f 20 53 54 41 52 54 2e 5e
>29e4	54 41 42 20 77 69 6c 6c		prTab:      .text   "TAB will return to this menu.^"
>29ec	20 72 65 74 75 72 6e 20 74 6f 20 74 68 69 73 20
>29fc	6d 65 6e 75 2e 5e
>2a02	44 65 66 69 61 6e 63 65		dfs:        .text   "DefianceStudios^"
>2a0a	53 74 75 64 69 6f 73 5e
>2a12	ff				.byte $ff

;******  Return to file: pendulum.asm


;******  Processing file: ball.s

.2a13					CLUT0:
>2a13	00 00 00 ff				.byte	$0,$0,$0,$ff
>2a17	ff ff ff ff				.byte	$ff,$ff,$ff,$ff
>2a1b	3c 28 45 ff				.byte	$3c,$28,$45,$ff
>2a1f	31 39 66 ff				.byte	$31,$39,$66,$ff
>2a23	3b 56 8f ff				.byte	$3b,$56,$8f,$ff
>2a27	26 71 df ff				.byte	$26,$71,$df,$ff
>2a2b	66 a0 d9 ff				.byte	$66,$a0,$d9,$ff
>2a2f	9a c3 ee ff				.byte	$9a,$c3,$ee,$ff
>2a33	36 f2 fb ff				.byte	$36,$f2,$fb,$ff
>2a37	50 e5 99 ff				.byte	$50,$e5,$99,$ff
>2a3b	30 be 6a ff				.byte	$30,$be,$6a,$ff
>2a3f	6e 94 37 ff				.byte	$6e,$94,$37,$ff
>2a43	2f 69 4b ff				.byte	$2f,$69,$4b,$ff
>2a47	24 4b 52 ff				.byte	$24,$4b,$52,$ff
>2a4b	39 3c 32 ff				.byte	$39,$3c,$32,$ff
>2a4f	74 3f 3f ff				.byte	$74,$3f,$3f,$ff
>2a53	82 60 30 ff				.byte	$82,$60,$30,$ff
>2a57	e1 6e 5b ff				.byte	$e1,$6e,$5b,$ff
>2a5b	ff 9b 63 ff				.byte	$ff,$9b,$63,$ff
>2a5f	e4 cd 5f ff				.byte	$e4,$cd,$5f,$ff
>2a63	fc db cb ff				.byte	$fc,$db,$cb,$ff
>2a67	ba 7b d7 ff				.byte	$ba,$7b,$d7,$ff
>2a6b	b7 ad 9b ff				.byte	$b7,$ad,$9b,$ff
>2a6f	87 7e 84 ff				.byte	$87,$7e,$84,$ff
>2a73	6a 6a 69 ff				.byte	$6a,$6a,$69,$ff
>2a77	52 56 59 ff				.byte	$52,$56,$59,$ff
>2a7b	8a 42 76 ff				.byte	$8a,$42,$76,$ff
>2a7f	32 32 ac ff				.byte	$32,$32,$ac,$ff
>2a83	63 57 d9 ff				.byte	$63,$57,$d9,$ff
>2a87	ba 7b d7 ff				.byte	$ba,$7b,$d7,$ff
>2a8b	4a 97 8f ff				.byte	$4a,$97,$8f,$ff
>2a8f	30 6f 8a ff				.byte	$30,$6f,$8a,$ff
.2a93					sprite1:
>2a93	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2a9b	00 01 02 02 02 02 01 00			.byte	$0,$1,$2,$2,$2,$2,$1,$0
>2aa3	01 02 02 02 02 02 02 01			.byte	$1,$2,$2,$2,$2,$2,$2,$1
>2aab	01 02 02 02 02 02 02 01			.byte	$1,$2,$2,$2,$2,$2,$2,$1
>2ab3	01 02 02 02 02 02 02 01			.byte	$1,$2,$2,$2,$2,$2,$2,$1
>2abb	01 02 02 02 02 02 02 01			.byte	$1,$2,$2,$2,$2,$2,$2,$1
>2ac3	00 01 02 02 02 02 01 00			.byte	$0,$1,$2,$2,$2,$2,$1,$0
>2acb	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2ad3					sprite2:
>2ad3	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2adb	00 01 03 03 03 03 01 00			.byte	$0,$1,$3,$3,$3,$3,$1,$0
>2ae3	01 03 03 03 03 03 03 01			.byte	$1,$3,$3,$3,$3,$3,$3,$1
>2aeb	01 03 03 03 03 03 03 01			.byte	$1,$3,$3,$3,$3,$3,$3,$1
>2af3	01 03 03 03 03 03 03 01			.byte	$1,$3,$3,$3,$3,$3,$3,$1
>2afb	01 03 03 03 03 03 03 01			.byte	$1,$3,$3,$3,$3,$3,$3,$1
>2b03	00 01 03 03 03 03 01 00			.byte	$0,$1,$3,$3,$3,$3,$1,$0
>2b0b	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2b13					sprite3:
>2b13	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2b1b	00 01 04 04 04 04 01 00			.byte	$0,$1,$4,$4,$4,$4,$1,$0
>2b23	01 04 04 04 04 04 04 01			.byte	$1,$4,$4,$4,$4,$4,$4,$1
>2b2b	01 04 04 04 04 04 04 01			.byte	$1,$4,$4,$4,$4,$4,$4,$1
>2b33	01 04 04 04 04 04 04 01			.byte	$1,$4,$4,$4,$4,$4,$4,$1
>2b3b	01 04 04 04 04 04 04 01			.byte	$1,$4,$4,$4,$4,$4,$4,$1
>2b43	00 01 04 04 04 04 01 00			.byte	$0,$1,$4,$4,$4,$4,$1,$0
>2b4b	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2b53					sprite4:
>2b53	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2b5b	00 01 05 05 05 05 01 00			.byte	$0,$1,$5,$5,$5,$5,$1,$0
>2b63	01 05 05 05 05 05 05 01			.byte	$1,$5,$5,$5,$5,$5,$5,$1
>2b6b	01 05 05 05 05 05 05 01			.byte	$1,$5,$5,$5,$5,$5,$5,$1
>2b73	01 05 05 05 05 05 05 01			.byte	$1,$5,$5,$5,$5,$5,$5,$1
>2b7b	01 05 05 05 05 05 05 01			.byte	$1,$5,$5,$5,$5,$5,$5,$1
>2b83	00 01 05 05 05 05 01 00			.byte	$0,$1,$5,$5,$5,$5,$1,$0
>2b8b	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2b93					sprite5:
>2b93	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2b9b	00 01 06 06 06 06 01 00			.byte	$0,$1,$6,$6,$6,$6,$1,$0
>2ba3	01 06 06 06 06 06 06 01			.byte	$1,$6,$6,$6,$6,$6,$6,$1
>2bab	01 06 06 06 06 06 06 01			.byte	$1,$6,$6,$6,$6,$6,$6,$1
>2bb3	01 06 06 06 06 06 06 01			.byte	$1,$6,$6,$6,$6,$6,$6,$1
>2bbb	01 06 06 06 06 06 06 01			.byte	$1,$6,$6,$6,$6,$6,$6,$1
>2bc3	00 01 06 06 06 06 01 00			.byte	$0,$1,$6,$6,$6,$6,$1,$0
>2bcb	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2bd3					sprite6:
>2bd3	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2bdb	00 01 07 07 07 07 01 00			.byte	$0,$1,$7,$7,$7,$7,$1,$0
>2be3	01 07 07 07 07 07 07 01			.byte	$1,$7,$7,$7,$7,$7,$7,$1
>2beb	01 07 07 07 07 07 07 01			.byte	$1,$7,$7,$7,$7,$7,$7,$1
>2bf3	01 07 07 07 07 07 07 01			.byte	$1,$7,$7,$7,$7,$7,$7,$1
>2bfb	01 07 07 07 07 07 07 01			.byte	$1,$7,$7,$7,$7,$7,$7,$1
>2c03	00 01 07 07 07 07 01 00			.byte	$0,$1,$7,$7,$7,$7,$1,$0
>2c0b	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2c13					sprite7:
>2c13	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2c1b	00 01 08 08 08 08 01 00			.byte	$0,$1,$8,$8,$8,$8,$1,$0
>2c23	01 08 08 08 08 08 08 01			.byte	$1,$8,$8,$8,$8,$8,$8,$1
>2c2b	01 08 08 08 08 08 08 01			.byte	$1,$8,$8,$8,$8,$8,$8,$1
>2c33	01 08 08 08 08 08 08 01			.byte	$1,$8,$8,$8,$8,$8,$8,$1
>2c3b	01 08 08 08 08 08 08 01			.byte	$1,$8,$8,$8,$8,$8,$8,$1
>2c43	00 01 08 08 08 08 01 00			.byte	$0,$1,$8,$8,$8,$8,$1,$0
>2c4b	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2c53					sprite8:
>2c53	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2c5b	00 01 09 09 09 09 01 00			.byte	$0,$1,$9,$9,$9,$9,$1,$0
>2c63	01 09 09 09 09 09 09 01			.byte	$1,$9,$9,$9,$9,$9,$9,$1
>2c6b	01 09 09 09 09 09 09 01			.byte	$1,$9,$9,$9,$9,$9,$9,$1
>2c73	01 09 09 09 09 09 09 01			.byte	$1,$9,$9,$9,$9,$9,$9,$1
>2c7b	01 09 09 09 09 09 09 01			.byte	$1,$9,$9,$9,$9,$9,$9,$1
>2c83	00 01 09 09 09 09 01 00			.byte	$0,$1,$9,$9,$9,$9,$1,$0
>2c8b	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2c93					sprite9:
>2c93	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2c9b	00 01 0a 0a 0a 0a 01 00			.byte	$0,$1,$a,$a,$a,$a,$1,$0
>2ca3	01 0a 0a 0a 0a 0a 0a 01			.byte	$1,$a,$a,$a,$a,$a,$a,$1
>2cab	01 0a 0a 0a 0a 0a 0a 01			.byte	$1,$a,$a,$a,$a,$a,$a,$1
>2cb3	01 0a 0a 0a 0a 0a 0a 01			.byte	$1,$a,$a,$a,$a,$a,$a,$1
>2cbb	01 0a 0a 0a 0a 0a 0a 01			.byte	$1,$a,$a,$a,$a,$a,$a,$1
>2cc3	00 01 0a 0a 0a 0a 01 00			.byte	$0,$1,$a,$a,$a,$a,$1,$0
>2ccb	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2cd3					sprite10:
>2cd3	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2cdb	00 01 0b 0b 0b 0b 01 00			.byte	$0,$1,$b,$b,$b,$b,$1,$0
>2ce3	01 0b 0b 0b 0b 0b 0b 01			.byte	$1,$b,$b,$b,$b,$b,$b,$1
>2ceb	01 0b 0b 0b 0b 0b 0b 01			.byte	$1,$b,$b,$b,$b,$b,$b,$1
>2cf3	01 0b 0b 0b 0b 0b 0b 01			.byte	$1,$b,$b,$b,$b,$b,$b,$1
>2cfb	01 0b 0b 0b 0b 0b 0b 01			.byte	$1,$b,$b,$b,$b,$b,$b,$1
>2d03	00 01 0b 0b 0b 0b 01 00			.byte	$0,$1,$b,$b,$b,$b,$1,$0
>2d0b	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2d13					sprite11:
>2d13	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2d1b	00 01 0c 0c 0c 0c 01 00			.byte	$0,$1,$c,$c,$c,$c,$1,$0
>2d23	01 0c 0c 0c 0c 0c 0c 01			.byte	$1,$c,$c,$c,$c,$c,$c,$1
>2d2b	01 0c 0c 0c 0c 0c 0c 01			.byte	$1,$c,$c,$c,$c,$c,$c,$1
>2d33	01 0c 0c 0c 0c 0c 0c 01			.byte	$1,$c,$c,$c,$c,$c,$c,$1
>2d3b	01 0c 0c 0c 0c 0c 0c 01			.byte	$1,$c,$c,$c,$c,$c,$c,$1
>2d43	00 01 0c 0c 0c 0c 01 00			.byte	$0,$1,$c,$c,$c,$c,$1,$0
>2d4b	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2d53					sprite12:
>2d53	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2d5b	00 01 0d 0d 0d 0d 01 00			.byte	$0,$1,$d,$d,$d,$d,$1,$0
>2d63	01 0d 0d 0d 0d 0d 0d 01			.byte	$1,$d,$d,$d,$d,$d,$d,$1
>2d6b	01 0d 0d 0d 0d 0d 0d 01			.byte	$1,$d,$d,$d,$d,$d,$d,$1
>2d73	01 0d 0d 0d 0d 0d 0d 01			.byte	$1,$d,$d,$d,$d,$d,$d,$1
>2d7b	01 0d 0d 0d 0d 0d 0d 01			.byte	$1,$d,$d,$d,$d,$d,$d,$1
>2d83	00 01 0d 0d 0d 0d 01 00			.byte	$0,$1,$d,$d,$d,$d,$1,$0
>2d8b	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2d93					sprite13:
>2d93	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2d9b	00 01 0e 0e 0e 0e 01 00			.byte	$0,$1,$e,$e,$e,$e,$1,$0
>2da3	01 0e 0e 0e 0e 0e 0e 01			.byte	$1,$e,$e,$e,$e,$e,$e,$1
>2dab	01 0e 0e 0e 0e 0e 0e 01			.byte	$1,$e,$e,$e,$e,$e,$e,$1
>2db3	01 0e 0e 0e 0e 0e 0e 01			.byte	$1,$e,$e,$e,$e,$e,$e,$1
>2dbb	01 0e 0e 0e 0e 0e 0e 01			.byte	$1,$e,$e,$e,$e,$e,$e,$1
>2dc3	00 01 0e 0e 0e 0e 01 00			.byte	$0,$1,$e,$e,$e,$e,$1,$0
>2dcb	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2dd3					sprite14:
>2dd3	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2ddb	00 01 0f 0f 0f 0f 01 00			.byte	$0,$1,$f,$f,$f,$f,$1,$0
>2de3	01 0f 0f 0f 0f 0f 0f 01			.byte	$1,$f,$f,$f,$f,$f,$f,$1
>2deb	01 0f 0f 0f 0f 0f 0f 01			.byte	$1,$f,$f,$f,$f,$f,$f,$1
>2df3	01 0f 0f 0f 0f 0f 0f 01			.byte	$1,$f,$f,$f,$f,$f,$f,$1
>2dfb	01 0f 0f 0f 0f 0f 0f 01			.byte	$1,$f,$f,$f,$f,$f,$f,$1
>2e03	00 01 0f 0f 0f 0f 01 00			.byte	$0,$1,$f,$f,$f,$f,$1,$0
>2e0b	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2e13					sprite15:
>2e13	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2e1b	00 01 10 10 10 10 01 00			.byte	$0,$1,$10,$10,$10,$10,$1,$0
>2e23	01 10 10 10 10 10 10 01			.byte	$1,$10,$10,$10,$10,$10,$10,$1
>2e2b	01 10 10 10 10 10 10 01			.byte	$1,$10,$10,$10,$10,$10,$10,$1
>2e33	01 10 10 10 10 10 10 01			.byte	$1,$10,$10,$10,$10,$10,$10,$1
>2e3b	01 10 10 10 10 10 10 01			.byte	$1,$10,$10,$10,$10,$10,$10,$1
>2e43	00 01 10 10 10 10 01 00			.byte	$0,$1,$10,$10,$10,$10,$1,$0
>2e4b	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2e53					sprite16:
>2e53	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2e5b	00 01 11 11 11 11 01 00			.byte	$0,$1,$11,$11,$11,$11,$1,$0
>2e63	01 11 11 11 11 11 11 01			.byte	$1,$11,$11,$11,$11,$11,$11,$1
>2e6b	01 11 11 11 11 11 11 01			.byte	$1,$11,$11,$11,$11,$11,$11,$1
>2e73	01 11 11 11 11 11 11 01			.byte	$1,$11,$11,$11,$11,$11,$11,$1
>2e7b	01 11 11 11 11 11 11 01			.byte	$1,$11,$11,$11,$11,$11,$11,$1
>2e83	00 01 11 11 11 11 01 00			.byte	$0,$1,$11,$11,$11,$11,$1,$0
>2e8b	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2e93					sprite17:
>2e93	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2e9b	00 01 12 12 12 12 01 00			.byte	$0,$1,$12,$12,$12,$12,$1,$0
>2ea3	01 12 12 12 12 12 12 01			.byte	$1,$12,$12,$12,$12,$12,$12,$1
>2eab	01 12 12 12 12 12 12 01			.byte	$1,$12,$12,$12,$12,$12,$12,$1
>2eb3	01 12 12 12 12 12 12 01			.byte	$1,$12,$12,$12,$12,$12,$12,$1
>2ebb	01 12 12 12 12 12 12 01			.byte	$1,$12,$12,$12,$12,$12,$12,$1
>2ec3	00 01 12 12 12 12 01 00			.byte	$0,$1,$12,$12,$12,$12,$1,$0
>2ecb	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2ed3					sprite18:
>2ed3	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2edb	00 01 13 13 13 13 01 00			.byte	$0,$1,$13,$13,$13,$13,$1,$0
>2ee3	01 13 13 13 13 13 13 01			.byte	$1,$13,$13,$13,$13,$13,$13,$1
>2eeb	01 13 13 13 13 13 13 01			.byte	$1,$13,$13,$13,$13,$13,$13,$1
>2ef3	01 13 13 13 13 13 13 01			.byte	$1,$13,$13,$13,$13,$13,$13,$1
>2efb	01 13 13 13 13 13 13 01			.byte	$1,$13,$13,$13,$13,$13,$13,$1
>2f03	00 01 13 13 13 13 01 00			.byte	$0,$1,$13,$13,$13,$13,$1,$0
>2f0b	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2f13					sprite19:
>2f13	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2f1b	00 01 14 14 14 14 01 00			.byte	$0,$1,$14,$14,$14,$14,$1,$0
>2f23	01 14 14 14 14 14 14 01			.byte	$1,$14,$14,$14,$14,$14,$14,$1
>2f2b	01 14 14 14 14 14 14 01			.byte	$1,$14,$14,$14,$14,$14,$14,$1
>2f33	01 14 14 14 14 14 14 01			.byte	$1,$14,$14,$14,$14,$14,$14,$1
>2f3b	01 14 14 14 14 14 14 01			.byte	$1,$14,$14,$14,$14,$14,$14,$1
>2f43	00 01 14 14 14 14 01 00			.byte	$0,$1,$14,$14,$14,$14,$1,$0
>2f4b	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2f53					sprite20:
>2f53	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2f5b	00 01 15 15 15 15 01 00			.byte	$0,$1,$15,$15,$15,$15,$1,$0
>2f63	01 15 15 15 15 15 15 01			.byte	$1,$15,$15,$15,$15,$15,$15,$1
>2f6b	01 15 15 15 15 15 15 01			.byte	$1,$15,$15,$15,$15,$15,$15,$1
>2f73	01 15 15 15 15 15 15 01			.byte	$1,$15,$15,$15,$15,$15,$15,$1
>2f7b	01 15 15 15 15 15 15 01			.byte	$1,$15,$15,$15,$15,$15,$15,$1
>2f83	00 01 15 15 15 15 01 00			.byte	$0,$1,$15,$15,$15,$15,$1,$0
>2f8b	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2f93					sprite21:
>2f93	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2f9b	00 01 16 16 16 16 01 00			.byte	$0,$1,$16,$16,$16,$16,$1,$0
>2fa3	01 16 16 16 16 16 16 01			.byte	$1,$16,$16,$16,$16,$16,$16,$1
>2fab	01 16 16 16 16 16 16 01			.byte	$1,$16,$16,$16,$16,$16,$16,$1
>2fb3	01 16 16 16 16 16 16 01			.byte	$1,$16,$16,$16,$16,$16,$16,$1
>2fbb	01 16 16 16 16 16 16 01			.byte	$1,$16,$16,$16,$16,$16,$16,$1
>2fc3	00 01 16 16 16 16 01 00			.byte	$0,$1,$16,$16,$16,$16,$1,$0
>2fcb	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2fd3					sprite22:
>2fd3	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2fdb	00 01 17 17 17 17 01 00			.byte	$0,$1,$17,$17,$17,$17,$1,$0
>2fe3	01 17 17 17 17 17 17 01			.byte	$1,$17,$17,$17,$17,$17,$17,$1
>2feb	01 17 17 17 17 17 17 01			.byte	$1,$17,$17,$17,$17,$17,$17,$1
>2ff3	01 17 17 17 17 17 17 01			.byte	$1,$17,$17,$17,$17,$17,$17,$1
>2ffb	01 17 17 17 17 17 17 01			.byte	$1,$17,$17,$17,$17,$17,$17,$1
>3003	00 01 17 17 17 17 01 00			.byte	$0,$1,$17,$17,$17,$17,$1,$0
>300b	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.3013					sprite23:
>3013	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>301b	00 01 18 18 18 18 01 00			.byte	$0,$1,$18,$18,$18,$18,$1,$0
>3023	01 18 18 18 18 18 18 01			.byte	$1,$18,$18,$18,$18,$18,$18,$1
>302b	01 18 18 18 18 18 18 01			.byte	$1,$18,$18,$18,$18,$18,$18,$1
>3033	01 18 18 18 18 18 18 01			.byte	$1,$18,$18,$18,$18,$18,$18,$1
>303b	01 18 18 18 18 18 18 01			.byte	$1,$18,$18,$18,$18,$18,$18,$1
>3043	00 01 18 18 18 18 01 00			.byte	$0,$1,$18,$18,$18,$18,$1,$0
>304b	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.3053					sprite24:
>3053	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>305b	00 01 19 19 19 19 01 00			.byte	$0,$1,$19,$19,$19,$19,$1,$0
>3063	01 19 19 19 19 19 19 01			.byte	$1,$19,$19,$19,$19,$19,$19,$1
>306b	01 19 19 19 19 19 19 01			.byte	$1,$19,$19,$19,$19,$19,$19,$1
>3073	01 19 19 19 19 19 19 01			.byte	$1,$19,$19,$19,$19,$19,$19,$1
>307b	01 19 19 19 19 19 19 01			.byte	$1,$19,$19,$19,$19,$19,$19,$1
>3083	00 01 19 19 19 19 01 00			.byte	$0,$1,$19,$19,$19,$19,$1,$0
>308b	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0

;******  Return to file: pendulum.asm


;******  Processing file: midi_instruments.s

.3093					instrumentList:
>3093	41 63 6f 75 73 74 69 63		.text "Acoustic Grand Piano   "
>309b	20 47 72 61 6e 64 20 50 69 61 6e 6f 20 20 20
>30aa	42 72 69 67 68 74 20 41		.text "Bright Acoustic Piano  "
>30b2	63 6f 75 73 74 69 63 20 50 69 61 6e 6f 20 20
>30c1	45 6c 65 63 74 72 69 63		.text "Electric Grand Piano   "
>30c9	20 47 72 61 6e 64 20 50 69 61 6e 6f 20 20 20
>30d8	48 6f 6e 6b 79 2d 74 6f		.text "Honky-tonk Piano       "
>30e0	6e 6b 20 50 69 61 6e 6f 20 20 20 20 20 20 20
>30ef	45 6c 65 63 74 72 69 63		.text "Electric Piano 1       "
>30f7	20 50 69 61 6e 6f 20 31 20 20 20 20 20 20 20
>3106	45 6c 65 63 74 72 69 63		.text "Electric Piano 2       "
>310e	20 50 69 61 6e 6f 20 32 20 20 20 20 20 20 20
>311d	48 61 72 70 73 69 63 68		.text "Harpsichord            "
>3125	6f 72 64 20 20 20 20 20 20 20 20 20 20 20 20
>3134	43 6c 61 76 69 20 20 20		.text "Clavi                  "
>313c	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>314b	43 65 6c 65 73 74 61 20		.text "Celesta                "
>3153	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3162	47 6c 6f 63 6b 65 6e 73		.text "Glockenspiel           "
>316a	70 69 65 6c 20 20 20 20 20 20 20 20 20 20 20
>3179	4d 75 73 69 63 20 42 6f		.text "Music Box              "
>3181	78 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3190	56 69 62 72 61 70 68 6f		.text "Vibraphone             "
>3198	6e 65 20 20 20 20 20 20 20 20 20 20 20 20 20
>31a7	4d 61 72 69 6d 62 61 20		.text "Marimba                "
>31af	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>31be	58 79 6c 6f 70 68 6f 6e		.text "Xylophone              "
>31c6	65 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>31d5	54 75 62 75 6c 61 72 20		.text "Tubular Bells          "
>31dd	42 65 6c 6c 73 20 20 20 20 20 20 20 20 20 20
>31ec	44 75 6c 63 69 6d 65 72		.text "Dulcimer               "
>31f4	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3203	44 72 61 77 62 61 72 20		.text "Drawbar Organ          "
>320b	4f 72 67 61 6e 20 20 20 20 20 20 20 20 20 20
>321a	50 65 72 63 75 73 73 69		.text "Percussive Organ       "
>3222	76 65 20 4f 72 67 61 6e 20 20 20 20 20 20 20
>3231	52 6f 63 6b 20 4f 72 67		.text "Rock Organ             "
>3239	61 6e 20 20 20 20 20 20 20 20 20 20 20 20 20
>3248	43 68 75 72 63 68 20 4f		.text "Church Organ           "
>3250	72 67 61 6e 20 20 20 20 20 20 20 20 20 20 20
>325f	52 65 65 64 20 4f 72 67		.text "Reed Organ             "
>3267	61 6e 20 20 20 20 20 20 20 20 20 20 20 20 20
>3276	41 63 63 6f 72 64 69 6f		.text "Accordion              "
>327e	6e 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>328d	48 61 72 6d 6f 6e 69 63		.text "Harmonica              "
>3295	61 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>32a4	54 61 6e 67 6f 20 41 63		.text "Tango Accordion        "
>32ac	63 6f 72 64 69 6f 6e 20 20 20 20 20 20 20 20
>32bb	41 63 6f 75 73 74 69 63		.text "Acoustic Guitar (nylon)"
>32c3	20 47 75 69 74 61 72 20 28 6e 79 6c 6f 6e 29
>32d2	41 63 6f 75 73 74 69 63		.text "Acoustic Guitar (steel)"
>32da	20 47 75 69 74 61 72 20 28 73 74 65 65 6c 29
>32e9	45 6c 65 63 74 72 69 63		.text "Electric Guitar (jazz) "
>32f1	20 47 75 69 74 61 72 20 28 6a 61 7a 7a 29 20
>3300	45 6c 65 63 74 72 69 63		.text "Electric Guitar (clean)"
>3308	20 47 75 69 74 61 72 20 28 63 6c 65 61 6e 29
>3317	45 6c 65 63 74 72 69 63		.text "Electric Guitar (muted)"
>331f	20 47 75 69 74 61 72 20 28 6d 75 74 65 64 29
>332e	4f 76 65 72 64 72 69 76		.text "Overdriven Guitar      "
>3336	65 6e 20 47 75 69 74 61 72 20 20 20 20 20 20
>3345	44 69 73 74 6f 72 74 69		.text "Distortion Guitar      "
>334d	6f 6e 20 47 75 69 74 61 72 20 20 20 20 20 20
>335c	47 75 69 74 61 72 20 68		.text "Guitar harmonics       "
>3364	61 72 6d 6f 6e 69 63 73 20 20 20 20 20 20 20
>3373	41 63 6f 75 73 74 69 63		.text "Acoustic Bass          "
>337b	20 42 61 73 73 20 20 20 20 20 20 20 20 20 20
>338a	45 6c 65 63 74 72 69 63		.text "Electric Bass (finger) "
>3392	20 42 61 73 73 20 28 66 69 6e 67 65 72 29 20
>33a1	45 6c 65 63 74 72 69 63		.text "Electric Bass (pick)   "
>33a9	20 42 61 73 73 20 28 70 69 63 6b 29 20 20 20
>33b8	46 72 65 74 6c 65 73 73		.text "Fretless Bass          "
>33c0	20 42 61 73 73 20 20 20 20 20 20 20 20 20 20
>33cf	53 6c 61 70 20 42 61 73		.text "Slap Bass 1            "
>33d7	73 20 31 20 20 20 20 20 20 20 20 20 20 20 20
>33e6	53 6c 61 70 20 42 61 73		.text "Slap Bass 2            "
>33ee	73 20 32 20 20 20 20 20 20 20 20 20 20 20 20
>33fd	53 79 6e 74 68 20 42 61		.text "Synth Bass 1           "
>3405	73 73 20 31 20 20 20 20 20 20 20 20 20 20 20
>3414	53 79 6e 74 68 20 42 61		.text "Synth Bass 2           "
>341c	73 73 20 32 20 20 20 20 20 20 20 20 20 20 20
>342b	56 69 6f 6c 69 6e 20 20		.text "Violin                 "
>3433	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3442	56 69 6f 6c 61 20 20 20		.text "Viola                  "
>344a	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3459	43 65 6c 6c 6f 20 20 20		.text "Cello                  "
>3461	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3470	43 6f 6e 74 72 61 62 61		.text "Contrabass             "
>3478	73 73 20 20 20 20 20 20 20 20 20 20 20 20 20
>3487	54 72 65 6d 6f 6c 6f 20		.text "Tremolo Strings        "
>348f	53 74 72 69 6e 67 73 20 20 20 20 20 20 20 20
>349e	50 69 7a 7a 69 63 61 74		.text "Pizzicato Strings      "
>34a6	6f 20 53 74 72 69 6e 67 73 20 20 20 20 20 20
>34b5	4f 72 63 68 65 73 74 72		.text "Orchestral Harp        "
>34bd	61 6c 20 48 61 72 70 20 20 20 20 20 20 20 20
>34cc	54 69 6d 70 61 6e 69 20		.text "Timpani                "
>34d4	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>34e3	53 74 72 69 6e 67 20 45		.text "String Ensemble 1      "
>34eb	6e 73 65 6d 62 6c 65 20 31 20 20 20 20 20 20
>34fa	53 74 72 69 6e 67 20 45		.text "String Ensemble 2      "
>3502	6e 73 65 6d 62 6c 65 20 32 20 20 20 20 20 20
>3511	53 79 6e 74 68 53 74 72		.text "SynthStrings 1         "
>3519	69 6e 67 73 20 31 20 20 20 20 20 20 20 20 20
>3528	53 79 6e 74 68 53 74 72		.text "SynthStrings 2         "
>3530	69 6e 67 73 20 32 20 20 20 20 20 20 20 20 20
>353f	43 68 6f 69 72 20 41 61		.text "Choir Aahs             "
>3547	68 73 20 20 20 20 20 20 20 20 20 20 20 20 20
>3556	56 6f 69 63 65 20 4f 6f		.text "Voice Oohs             "
>355e	68 73 20 20 20 20 20 20 20 20 20 20 20 20 20
>356d	53 79 6e 74 68 20 56 6f		.text "Synth Voice            "
>3575	69 63 65 20 20 20 20 20 20 20 20 20 20 20 20
>3584	4f 72 63 68 65 73 74 72		.text "Orchestra Hit          "
>358c	61 20 48 69 74 20 20 20 20 20 20 20 20 20 20
>359b	54 72 75 6d 70 65 74 20		.text "Trumpet                "
>35a3	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>35b2	54 72 6f 6d 62 6f 6e 65		.text "Trombone               "
>35ba	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>35c9	54 75 62 61 20 20 20 20		.text "Tuba                   "
>35d1	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>35e0	4d 75 74 65 64 20 54 72		.text "Muted Trumpet          "
>35e8	75 6d 70 65 74 20 20 20 20 20 20 20 20 20 20
>35f7	46 72 65 6e 63 68 20 48		.text "French Horn            "
>35ff	6f 72 6e 20 20 20 20 20 20 20 20 20 20 20 20
>360e	42 72 61 73 73 20 53 65		.text "Brass Section          "
>3616	63 74 69 6f 6e 20 20 20 20 20 20 20 20 20 20
>3625	53 79 6e 74 68 42 72 61		.text "SynthBrass 1           "
>362d	73 73 20 31 20 20 20 20 20 20 20 20 20 20 20
>363c	53 79 6e 74 68 42 72 61		.text "SynthBrass 2           "
>3644	73 73 20 32 20 20 20 20 20 20 20 20 20 20 20
>3653	53 6f 70 72 61 6e 6f 20		.text "Soprano Sax            "
>365b	53 61 78 20 20 20 20 20 20 20 20 20 20 20 20
>366a	41 6c 74 6f 20 53 61 78		.text "Alto Sax               "
>3672	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3681	54 65 6e 6f 72 20 53 61		.text "Tenor Sax              "
>3689	78 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3698	42 61 72 69 74 6f 6e 65		.text "Baritone Sax           "
>36a0	20 53 61 78 20 20 20 20 20 20 20 20 20 20 20
>36af	4f 62 6f 65 20 20 20 20		.text "Oboe                   "
>36b7	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>36c6	45 6e 67 6c 69 73 68 20		.text "English Horn           "
>36ce	48 6f 72 6e 20 20 20 20 20 20 20 20 20 20 20
>36dd	42 61 73 73 6f 6f 6e 20		.text "Bassoon                "
>36e5	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>36f4	43 6c 61 72 69 6e 65 74		.text "Clarinet               "
>36fc	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>370b	50 69 63 63 6f 6c 6f 20		.text "Piccolo                "
>3713	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3722	46 6c 75 74 65 20 20 20		.text "Flute                  "
>372a	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3739	52 65 63 6f 72 64 65 72		.text "Recorder               "
>3741	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3750	50 61 6e 20 46 6c 75 74		.text "Pan Flute              "
>3758	65 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3767	42 6c 6f 77 6e 20 42 6f		.text "Blown Bottle           "
>376f	74 74 6c 65 20 20 20 20 20 20 20 20 20 20 20
>377e	53 68 61 6b 75 68 61 63		.text "Shakuhachi             "
>3786	68 69 20 20 20 20 20 20 20 20 20 20 20 20 20
>3795	57 68 69 73 74 6c 65 20		.text "Whistle                "
>379d	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>37ac	4f 63 61 72 69 6e 61 20		.text "Ocarina                "
>37b4	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>37c3	4c 65 61 64 20 31 20 28		.text "Lead 1 (square)        "
>37cb	73 71 75 61 72 65 29 20 20 20 20 20 20 20 20
>37da	4c 65 61 64 20 32 20 28		.text "Lead 2 (sawtooth)      "
>37e2	73 61 77 74 6f 6f 74 68 29 20 20 20 20 20 20
>37f1	4c 65 61 64 20 33 20 28		.text "Lead 3 (calliope)      "
>37f9	63 61 6c 6c 69 6f 70 65 29 20 20 20 20 20 20
>3808	4c 65 61 64 20 34 20 28		.text "Lead 4 (chiff)         "
>3810	63 68 69 66 66 29 20 20 20 20 20 20 20 20 20
>381f	4c 65 61 64 20 35 20 28		.text "Lead 5 (charang)       "
>3827	63 68 61 72 61 6e 67 29 20 20 20 20 20 20 20
>3836	4c 65 61 64 20 36 20 28		.text "Lead 6 (voice)         "
>383e	76 6f 69 63 65 29 20 20 20 20 20 20 20 20 20
>384d	4c 65 61 64 20 37 20 28		.text "Lead 7 (fifths)        "
>3855	66 69 66 74 68 73 29 20 20 20 20 20 20 20 20
>3864	4c 65 61 64 20 38 20 28		.text "Lead 8 (bass + lead)   "
>386c	62 61 73 73 20 2b 20 6c 65 61 64 29 20 20 20
>387b	50 61 64 20 31 20 28 6e		.text "Pad 1 (new age)        "
>3883	65 77 20 61 67 65 29 20 20 20 20 20 20 20 20
>3892	50 61 64 20 32 20 28 77		.text "Pad 2 (warm)           "
>389a	61 72 6d 29 20 20 20 20 20 20 20 20 20 20 20
>38a9	50 61 64 20 33 20 28 70		.text "Pad 3 (polysynth)      "
>38b1	6f 6c 79 73 79 6e 74 68 29 20 20 20 20 20 20
>38c0	50 61 64 20 34 20 28 63		.text "Pad 4 (choir)          "
>38c8	68 6f 69 72 29 20 20 20 20 20 20 20 20 20 20
>38d7	50 61 64 20 35 20 28 62		.text "Pad 5 (bowed)          "
>38df	6f 77 65 64 29 20 20 20 20 20 20 20 20 20 20
>38ee	50 61 64 20 36 20 28 6d		.text "Pad 6 (metallic)       "
>38f6	65 74 61 6c 6c 69 63 29 20 20 20 20 20 20 20
>3905	50 61 64 20 37 20 28 68		.text "Pad 7 (halo)           "
>390d	61 6c 6f 29 20 20 20 20 20 20 20 20 20 20 20
>391c	50 61 64 20 38 20 28 73		.text "Pad 8 (sweep)          "
>3924	77 65 65 70 29 20 20 20 20 20 20 20 20 20 20
>3933	46 58 20 31 20 28 72 61		.text "FX 1 (rain)            "
>393b	69 6e 29 20 20 20 20 20 20 20 20 20 20 20 20
>394a	46 58 20 32 20 28 73 6f		.text "FX 2 (soundtrack)      "
>3952	75 6e 64 74 72 61 63 6b 29 20 20 20 20 20 20
>3961	46 58 20 33 20 28 63 72		.text "FX 3 (crystal)         "
>3969	79 73 74 61 6c 29 20 20 20 20 20 20 20 20 20
>3978	46 58 20 34 20 28 61 74		.text "FX 4 (atmosphere)      "
>3980	6d 6f 73 70 68 65 72 65 29 20 20 20 20 20 20
>398f	46 58 20 35 20 28 62 72		.text "FX 5 (brightness)      "
>3997	69 67 68 74 6e 65 73 73 29 20 20 20 20 20 20
>39a6	46 58 20 36 20 28 67 6f		.text "FX 6 (goblins)         "
>39ae	62 6c 69 6e 73 29 20 20 20 20 20 20 20 20 20
>39bd	46 58 20 37 20 28 65 63		.text "FX 7 (echoes)          "
>39c5	68 6f 65 73 29 20 20 20 20 20 20 20 20 20 20
>39d4	46 58 20 38 20 28 73 63		.text "FX 8 (sci-fi)          "
>39dc	69 2d 66 69 29 20 20 20 20 20 20 20 20 20 20
>39eb	53 69 74 61 72 20 20 20		.text "Sitar                  "
>39f3	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3a02	42 61 6e 6a 6f 20 20 20		.text "Banjo                  "
>3a0a	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3a19	53 68 61 6d 69 73 65 6e		.text "Shamisen               "
>3a21	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3a30	4b 6f 74 6f 20 20 20 20		.text "Koto                   "
>3a38	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3a47	4b 61 6c 69 6d 62 61 20		.text "Kalimba                "
>3a4f	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3a5e	42 61 67 20 70 69 70 65		.text "Bag pipe               "
>3a66	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3a75	46 69 64 64 6c 65 20 20		.text "Fiddle                 "
>3a7d	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3a8c	53 68 61 6e 61 69 20 20		.text "Shanai                 "
>3a94	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3aa3	54 69 6e 6b 6c 65 20 42		.text "Tinkle Bell            "
>3aab	65 6c 6c 20 20 20 20 20 20 20 20 20 20 20 20
>3aba	41 67 6f 67 6f 20 20 20		.text "Agogo                  "
>3ac2	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3ad1	53 74 65 65 6c 20 44 72		.text "Steel Drums            "
>3ad9	75 6d 73 20 20 20 20 20 20 20 20 20 20 20 20
>3ae8	57 6f 6f 64 62 6c 6f 63		.text "Woodblock              "
>3af0	6b 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3aff	54 61 69 6b 6f 20 44 72		.text "Taiko Drum             "
>3b07	75 6d 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b16	4d 65 6c 6f 64 69 63 20		.text "Melodic Tom            "
>3b1e	54 6f 6d 20 20 20 20 20 20 20 20 20 20 20 20
>3b2d	53 79 6e 74 68 20 44 72		.text "Synth Drum             "
>3b35	75 6d 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b44	52 65 76 65 72 73 65 20		.text "Reverse Cymbal         "
>3b4c	43 79 6d 62 61 6c 20 20 20 20 20 20 20 20 20
>3b5b	47 75 69 74 61 72 20 46		.text "Guitar Fret Noise      "
>3b63	72 65 74 20 4e 6f 69 73 65 20 20 20 20 20 20
>3b72	42 72 65 61 74 68 20 4e		.text "Breath Noise           "
>3b7a	6f 69 73 65 20 20 20 20 20 20 20 20 20 20 20
>3b89	53 65 61 73 68 6f 72 65		.text "Seashore               "
>3b91	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3ba0	42 69 72 64 20 54 77 65		.text "Bird Tweet             "
>3ba8	65 74 20 20 20 20 20 20 20 20 20 20 20 20 20
>3bb7	54 65 6c 65 70 68 6f 6e		.text "Telephone Ring         "
>3bbf	65 20 52 69 6e 67 20 20 20 20 20 20 20 20 20
>3bce	48 65 6c 69 63 6f 70 74		.text "Helicopter             "
>3bd6	65 72 20 20 20 20 20 20 20 20 20 20 20 20 20
>3be5	41 70 70 6c 61 75 73 65		.text "Applause               "
>3bed	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3bfc	47 75 6e 73 68 6f 74 20		.text "Gunshot                "
>3c04	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20

;******  Return to file: pendulum.asm


;******  End of listing
