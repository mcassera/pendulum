
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -L PendulumDump.txt --output-exec=start --intel-hex --output pendulum.hex pendulum.asm
; Sat Apr 05 15:12:12 2025

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: pendulum.asm


;******  Processing file: setup.asm

=$01					MMU_IO_CTRL 	= $01						;MMU I/O Control
=$d000					VKY_MSTR_CTRL_0 = $d000						; Vicky Master Control Register 0
=$d001					VKY_MSTR_CTRL_1 = $d001						; Vicky Master Control Register 1
=$d004					VKY_BRDR_CTRL   = $d004						; Vicky Border Control Register
=$d00d					VKY_BKG_COL_B   = $d00d						; Vicky Graphics Background Color Blue
=$d00e					VKY_BKG_COL_G   = $d00e						; Vicky Graphics Background Color Green
=$d00f					VKY_BKG_COL_R   = $d00f						; Vicky Graphics Background Color Red
=$d002					VKY_LAYER_CTRL_0= $d002
=$d003					VKY_LAYER_CTRL_1= $d003
=$d280					VKY_TS0_AD_L	= $d280						; Vicky Tile 0 Image Start Address LOW BYTE
=$d281					VKY_TS0_AD_M	= $d281						; Vicky Tile 0 Image Start Address MEDIUM BYTE
=$d282					VKY_TS0_AD_H	= $d282						; Vicky Tile 0 Image Start Address HIGH BYTE
=$d284					VKY_TS1_AD_L	= $d284						; Vicky Tile 1 Image Start Address LOW BYTE
=$d285					VKY_TS1_AD_M	= $d285						; Vicky Tile 1 Image Start Address MEDIUM BYTE
=$d286					VKY_TS1_AD_H	= $d286						; Vicky Tile 1 Image Start Address HIGH BYTE
=$d288					VKY_TS2_AD_L	= $d288						; Vicky Tile 2 Image Start Address LOW BYTE
=$d289					VKY_TS2_AD_M	= $d289						; Vicky Tile 2 Image Start Address MEDIUM BYTE
=$d28a					VKY_TS2_AD_H	= $d28a						; Vicky Tile 2 Image Start Address HIGH BYTE
=$d200					VKY_TM0_CTRL	= $d200						; Tile Map 0 Control
=$d201					VKY_TM0_AD_L	= $d201						; Tile Map 0 Start Address LOW BYTE
=$d202					VKY_TM0_AD_M	= $d202						; Tile Map 0 Start Address MEDIUM BYTE
=$d203					VKY_TM0_AD_H	= $d203						; Tile Map 0 Start Address HIGH BYTE
=$d204					VKY_TM0_SZ_X	= $d204						; Tile Map 0 Size X
=$d206					VKY_TM0_SZ_Y	= $d206						; Tile Map 0 Size Y
=$d208					VKY_TM0_POS_X_L = $d208						; Tile Map 0 X Position & Scroll LOW BYTE
=$d209					VKY_TM0_POS_X_H = $d209						; Tile Map 0 X Position & Scroll HIGH BYTE
=$d20a					VKY_TM0_POS_Y_L = $d20a						; Tile Map 0 Y Position & Scroll LOW BYTE
=$d20b					VKY_TM0_POS_Y_H = $d20b						; Tile Map 0 Y Position & Scroll HIGH BYTE
=$d20c					VKY_TM1_CTRL	= $d20c						; Tile Map 1 Control
=$d20d					VKY_TM1_AD_L	= $d20d						; Tile Map 1 Start Address LOW BYTE
=$d20e					VKY_TM1_AD_M	= $d20e						; Tile Map 1 Start Address MEDIUM BYTE
=$d20f					VKY_TM1_AD_H	= $d20f						; Tile Map 1 Start Address HIGH BYTE
=$d210					VKY_TM1_SZ_X	= $d210						; Tile Map 1 Size X
=$d212					VKY_TM1_SZ_Y	= $d212						; Tile Map 1 Size Y
=$d214					VKY_TM1_POS_X_L = $d214						; Tile Map 1 X Position & Scroll LOW BYTE
=$d215					VKY_TM1_POS_X_H = $d215						; Tile Map 1 X Position & Scroll HIGH BYTE
=$d216					VKY_TM1_POS_Y_L = $d216						; Tile Map 1 Y Position & Scroll LOW BYTE
=$d217					VKY_TM1_POS_Y_H = $d217						; Tile Map 1 Y Position & Scroll HIGH BYTE
=$d218					VKY_TM2_CTRL	= $d218						; Tile Map 2 Control
=$d219					VKY_TM2_AD_L	= $d219						; Tile Map 2 Start Address LOW BYTE
=$d21a					VKY_TM2_AD_M	= $d21a						; Tile Map 2 Start Address MEDIUM BYTE
=$d21b					VKY_TM2_AD_H	= $d21b						; Tile Map 2 Start Address HIGH BYTE
=$d21c					VKY_TM2_SZ_X	= $d21c						; Tile Map 2 Size X
=$d21e					VKY_TM2_SZ_Y	= $d21e						; Tile Map 2 Size Y
=$d220					VKY_TM2_POS_X_L = $d220						; Tile Map 2 X Position & Scroll LOW BYTE
=$d221					VKY_TM2_POS_X_H = $d221						; Tile Map 2 X Position & Scroll HIGH BYTE
=$d222					VKY_TM2_POS_Y_L = $d222						; Tile Map 2 Y Position & Scroll LOW BYTE
=$d223					VKY_TM2_POS_Y_H = $d223						; Tile Map 2 Y Position & Scroll HIGH BYTE
=$d900					VKY_SP0         = $d900                     ; start of sprite register locations / each new aprite is a multiple of 8
=$00					SP_CTRL         = $00                       ; control register              7-x, 6/5-size, 4/3-layer, 2/1-lut, 0-enable
=$01					SP_AD_L         = $01                       ; image address location
=$02					SP_AD_M         = $02
=$03					SP_AD_H         = $03
=$04					SP_POS_X_L      = $04                       ; x position
=$05					SP_POS_X_H      = $05
=$06					SP_POS_Y_L      = $06                       ; y position
=$07					SP_POS_Y_H      = $07
=$d9a0					playerSP        = $d9a0                     ; the sprite registers for the player
=$d000					VKY_GR_CLUT_0  	= $d000						; Graphics LUT #0 in I/O page 1
=$d400					VKY_GR_CLUT_1  	= $d400						; Graphics LUT #1 in I/O page 1
=$d400					SID_L1_FREQ_L   = $d400                     ; Left Sid Registers
=$d401					SID_L1_FREQ_H   = $d401
=$d402					SID_L1_PULS_L   = $d402
=$d403					SID_L1_PULS_H   = $d403
=$d404					SID_L1_GATE     = $d404
=$d405					SID_L1_ATDL     = $d405
=$d406					SID_L1_STRL     = $d406
=$d407					SID_L2_FREQ_L   = $d407
=$d408					SID_L2_FREQ_H   = $d408
=$d409					SID_L2_PULS_L   = $d409
=$d40a					SID_L2_PULS_H   = $d40a
=$d40b					SID_L2_GATE     = $d40b
=$d40c					SID_L2_ATDL     = $d40c
=$d40d					SID_L2_STRL     = $d40d
=$d40e					SID_L3_FREQ_L   = $d40e
=$d40f					SID_L3_FREQ_H   = $d40f
=$d410					SID_L3_PULS_L   = $d410
=$d411					SID_L3_PULS_H   = $d411
=$d412					SID_L3_GATE     = $d412
=$d413					SID_L3_ATDL     = $d413
=$d414					SID_L3_STRL     = $d414
=$d415					SID_L_FLT_L     = $d415
=$d416					SID_L_FLT_H     = $d416
=$d417					SID_L_RES       = $d417
=$d418					SID_L_VOL       = $d418
=$d500					SID_R1_FREQ_L   = $d500                     ; Right Sid Registers
=$d501					SID_R1_FREQ_H   = $d501
=$d502					SID_R1_PULS_L   = $d502
=$d503					SID_R1_PULS_H   = $d503
=$d504					SID_R1_GATE     = $d504
=$d505					SID_R1_ATDL     = $d505
=$d506					SID_R1_STRL     = $d506
=$d507					SID_R2_FREQ_L   = $d507
=$d508					SID_R2_FREQ_H   = $d508
=$d509					SID_R2_PULS_L   = $d509
=$d50a					SID_R2_PULS_H   = $d50a
=$d50b					SID_R2_GATE     = $d50b
=$d50c					SID_R2_ATDL     = $d50c
=$d50d					SID_R2_STRL     = $d50d
=$d50e					SID_R3_FREQ_L   = $d50e
=$d50f					SID_R3_FREQ_H   = $d50f
=$d510					SID_R3_PULS_L   = $d510
=$d511					SID_R3_PULS_H   = $d511
=$d512					SID_R3_GATE     = $d512
=$d513					SID_R3_ATDL     = $d513
=$d514					SID_R3_STRL     = $d514
=$d515					SID_R_FLT_L     = $d515
=$d516					SID_R_FLT_H     = $d516
=$d517					SID_R_RES       = $d517
=$d518					SID_R_VOL       = $d518
=$d600					PSG_L           = $d600
=$d610					PSG_R           = $d610
=$d608					PSG_LR          = $d608
=$80					PSG1_FREQ_LO    = %10000000                 ; OR with low 4 bits
=$00					PSG1_FREQ_HI    = %00000000                 ; OR with low 6 bits
=$90					PSG1_VOLUME     = %10010000                 ; OR with low 4 bits / default is full  - 0 = full, f = silent
=$a0					PSG2_FREQ_LO    = %10100000                 ; OR with low 4 bits
=$00					PSG2_FREQ_HI    = %00000000                 ; OR with low 6 bits
=$b0					PSG2_VOLUME     = %10110000                 ; OR with low 4 bits / default is full  - 0 = full, f = silent
=$c0					PSG3_FREQ_LO    = %11000000                 ; OR with low 4 bits
=$00					PSG3_FREQ_HI    = %00000000                 ; OR with low 6 bits
=$d0					PSG3_VOLUME     = %11010000                 ; OR with low 4 bits / default is full  - 0 = full, f = silent
=$dda1					MIDI_COM        = $dda1                     ; midi command
=$fffe					VIRQ			= $fffe						; Pointer to IRQ routine (LOW Byte)
=$d660					INT_PEND_0		= $d660						; Pending register for interrupts 0-7
=$d661					INT_PEND_1		= $d661						; Pending register for interrupts 8-15
=$d66c					INT_MASK_0		= $d66c						; Mask register for interrupts 0-7
=$d66d					INT_MASK_1		= $d66d						; Mask register for interrupts 8-15
=$de00					MULU_A_L		= $de00						; unsigned A LOW byte
=$de01					MULU_A_H		= $de01						; unsigned A HIGH Byte
=$de02					MULU_B_L		= $de02						; unsigned B LOW byte
=$de03					MULU_B_H		= $de03						; unsigned B HIGH byte
=$de10					MULU_LL			= $de10						; A x B byte 0
=$de11					MULU_LH			= $de11						; A x B byte 1
=$de12					MULU_HL			= $de12						; A x B byte 3
=$de13					MULU_HH			= $de13						; A x B byte 4
=$de08					ADD_A_LL		= $de08
=$de09					ADD_A_LH		= $de09
=$de0a					ADD_A_HL		= $de0a
=$de0b					ADD_A_HH		= $de0b
=$de0c					ADD_B_LL		= $de0c
=$de0d					ADD_B_LH		= $de0d
=$de0e					ADD_B_HL		= $de0e
=$de0f					ADD_B_HH		= $de0f
=$de18					ADD_R_LL		= $de18
=$de19					ADD_R_LH		= $de19
=$de1a					ADD_R_HL		= $de1a
=$de1b					ADD_R_HH		= $de1b
=$d6a6					Random_Reg		= $d6a6
=$d6a4					Random_L		= $d6a4
=$80					ptr_src			= $80						; A pointer to read data
=$82					ptr_dst			= $82						; A pointer to write data

;******  Return to file: pendulum.asm

.1ffd					start:
.1ffd	4c 0b 20	jmp $200b			jmp SC								; Start of the program - We put this jump here so you can load the PGZ into the computer.

;******  Processing file: api.asm

>ff00					NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04					ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08					ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c					Yield       .fill   4   ; Give unused time to the kernel.
>ff10					Putch       .fill   4   ; deprecated
>ff14					RunBlock    .fill   4   ; Chain to resident program by block ID.
>ff18					RunNamed    .fill   4   ; Chain to resident program by name.
>ff1c					            .fill   4   ; reserved
>ff20					List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24					GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28					GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c					Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30					Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34					Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38					Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c					List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40					GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44					MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48					CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c					Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50					Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54					ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58					WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c					Open        .fill   4   ; Open the given file for read, create, or append.
>ff60					Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64					Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68					Close       .fill   4   ; Close an open file.
>ff6c					Rename      .fill   4   ; Rename a closed file.
>ff70					Delete      .fill   4   ; Delete a closed file.
>ff74					Seek        .fill   4   ; Seek to a specific position in a file.
>ff78					Open        .fill   4   ; Open a directory for reading.
>ff7c					Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff80					Close       .fill   4   ; Close a directory once finished reading.
>ff84					MkDir       .fill   4   ; Create a directory
>ff88					RmDir       .fill   4   ; Delete a directory
>ff8c					            .fill   4   ; call gate
>ff90					GetIP       .fill   4   ; Get the local IP address.
>ff94					SetIP       .fill   4   ; Set the local IP address.
>ff98					GetDNS      .fill   4   ; Get the configured DNS IP address.
>ff9c					SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa0					SendICMP    .fill   4
>ffa4					Match       .fill   4
>ffa8					Init        .fill   4
>ffac					Send        .fill   4
>ffb0					Recv        .fill   4
>ffb4					Open        .fill   4
>ffb8					Accept      .fill   4
>ffbc					Reject      .fill   4
>ffc0					Send        .fill   4
>ffc4					Recv        .fill   4
>ffc8					Close       .fill   4
>ffcc					Reset       .fill   4   ; Re-init the display
>ffd0					GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ffd4					DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ffd8					DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ffdc					GetTime     .fill   4
>ffe0					SetTime     .fill   4
>ffe4					            .fill   12  ; 65816 vectors
>fff0					SetTimer    .fill   4
.00f0					args
.00f0					events
>00f0					dest        .word       ?   ; GetNextEvent copies event data here
>00f2					pending     .byte       ?   ; Negative count of pending events
.00f3					end
.00f3					run
>00f3					block_id    .byte   ?
.00f3					recv
=$fb					buf         = args.buf
=$fd					buflen      = args.buflen
.00f3					fs
.00f3					format
>00f3					drive       .byte       ?
>00f4					cookie      .byte       ?
=$fb					label       = args.buf
=$fd					label_len   = args.buflen
.00f3					mkfs
>00f3					drive       .byte       ?
>00f4					cookie      .byte       ?
=$fb					label       = args.buf
=$fd					label_len   = args.buflen
.00f3					file
.00f3					open
>00f3					drive       .byte       ?
>00f4					cookie      .byte       ?
=$fb					fname       = args.buf
=$fd					fname_len   = args.buflen
>00f5					mode        .byte       ?
=0					READ        = 0
=1					WRITE       = 1
=2					END         = 2
.00f3					read
>00f3					stream      .byte       ?
>00f4					buflen      .byte       ?
.00f3					write
>00f3					stream      .byte       ?
=$fb					buf         = args.buf
=$fd					buflen      = args.buflen
.00f3					seek
>00f3					stream      .byte       ?
>00f4					position    .dword      ?
.00f3					close
>00f3					stream      .byte       ?
.00f3					rename
>00f3					drive       .byte       ?
>00f4					cookie      .byte       ?
=$fb					old         = args.buf
=$fd					old_len     = args.buflen
=$f8					new         = args.ext
=$fa					new_len     = args.extlen
.00f3					delete
>00f3					drive       .byte       ?
>00f4					cookie      .byte       ?
=$fb					fname       = args.buf
=$fd					fname_len   = args.buflen
>00f5					mode        .byte       ?
=0					READ        = 0
=1					WRITE       = 1
=2					END         = 2
.00f3					directory
.00f3					open
>00f3					drive       .byte       ?
>00f4					cookie      .byte       ?
=$fb					path        = args.buf
=$fd					path_len    = args.buflen
.00f3					read
>00f3					stream      .byte       ?
>00f4					buflen      .byte       ?
.00f3					close
>00f3					stream      .byte       ?
.00f3					mkdir
>00f3					drive       .byte       ?
>00f4					cookie      .byte       ?
=$fb					path        = args.buf
=$fd					path_len    = args.buflen
.00f3					rmdir
>00f3					drive       .byte       ?
>00f4					cookie      .byte       ?
=$fb					path        = args.buf
=$fd					path_len    = args.buflen
.00f3					display
>00f3					x           .byte       ?   ; coordinate or size
>00f4					y           .byte       ?   ; coordinate or size
=$fb					text        = args.buf      ; text
=$f8					color       = args.ext      ; color
=$fb					buf         = args.buf      ; deprecated
=$f8					buf2        = args.ext      ; deprecated
=$fd					buflen      = args.buflen
.00f3					net
=$fb					socket      = args.buf
>00f3					src_port    .word       ?
>00f5					dest_port   .word       ?
>00f7					dest_ip     .fill       4
>00f3					accepted    .byte       ?
=$f8					buf         = args.ext
=$fa					buflen      = args.extlen
.00f3					config
.00f3					timer
>00f3					units       .byte       ?
=0					FRAMES      = 0
=1					SECONDS     = 1
=128					QUERY       = 128
>00f4					absolute    .byte       ?
>00f5					cookie      .byte       ?
=$f8					ext         = $f8
=$fa					extlen      = $fa
=$fb					buf         = $fb
=$fd					buflen      = $fd
=$fe					ptr         = $fe
.0000					events
>0000					dest        .word       ?   ; GetNextEvent copies event data here
>0002					pending     .byte       ?   ; Negative count of pending events
.0003					end
.0003					run
>0003					block_id    .byte   ?
.0003					recv
=$fb					buf         = args.buf
=$fd					buflen      = args.buflen
.0003					fs
.0003					format
>0003					drive       .byte       ?
>0004					cookie      .byte       ?
=$fb					label       = args.buf
=$fd					label_len   = args.buflen
.0003					mkfs
>0003					drive       .byte       ?
>0004					cookie      .byte       ?
=$fb					label       = args.buf
=$fd					label_len   = args.buflen
.0003					file
.0003					open
>0003					drive       .byte       ?
>0004					cookie      .byte       ?
=$fb					fname       = args.buf
=$fd					fname_len   = args.buflen
>0005					mode        .byte       ?
=0					READ        = 0
=1					WRITE       = 1
=2					END         = 2
.0003					read
>0003					stream      .byte       ?
>0004					buflen      .byte       ?
.0003					write
>0003					stream      .byte       ?
=$fb					buf         = args.buf
=$fd					buflen      = args.buflen
.0003					seek
>0003					stream      .byte       ?
>0004					position    .dword      ?
.0003					close
>0003					stream      .byte       ?
.0003					rename
>0003					drive       .byte       ?
>0004					cookie      .byte       ?
=$fb					old         = args.buf
=$fd					old_len     = args.buflen
=$f8					new         = args.ext
=$fa					new_len     = args.extlen
.0003					delete
>0003					drive       .byte       ?
>0004					cookie      .byte       ?
=$fb					fname       = args.buf
=$fd					fname_len   = args.buflen
>0005					mode        .byte       ?
=0					READ        = 0
=1					WRITE       = 1
=2					END         = 2
.0003					directory
.0003					open
>0003					drive       .byte       ?
>0004					cookie      .byte       ?
=$fb					path        = args.buf
=$fd					path_len    = args.buflen
.0003					read
>0003					stream      .byte       ?
>0004					buflen      .byte       ?
.0003					close
>0003					stream      .byte       ?
.0003					mkdir
>0003					drive       .byte       ?
>0004					cookie      .byte       ?
=$fb					path        = args.buf
=$fd					path_len    = args.buflen
.0003					rmdir
>0003					drive       .byte       ?
>0004					cookie      .byte       ?
=$fb					path        = args.buf
=$fd					path_len    = args.buflen
.0003					display
>0003					x           .byte       ?   ; coordinate or size
>0004					y           .byte       ?   ; coordinate or size
=$fb					text        = args.buf      ; text
=$f8					color       = args.ext      ; color
=$fb					buf         = args.buf      ; deprecated
=$f8					buf2        = args.ext      ; deprecated
=$fd					buflen      = args.buflen
.0003					net
=$fb					socket      = args.buf
>0003					src_port    .word       ?
>0005					dest_port   .word       ?
>0007					dest_ip     .fill       4
>0003					accepted    .byte       ?
=$f8					buf         = args.ext
=$fa					buflen      = args.extlen
.0003					config
.0003					timer
>0003					units       .byte       ?
=0					FRAMES      = 0
=1					SECONDS     = 1
=128					QUERY       = 128
>0004					absolute    .byte       ?
>0005					cookie      .byte       ?
=$f8					ext         = $f8
=$fa					extlen      = $fa
=$fb					buf         = $fb
=$fd					buflen      = $fd
=$fe					ptr         = $fe
>0000					dest        .word       ?   ; GetNextEvent copies event data here
>0002					pending     .byte       ?   ; Negative count of pending events
.0003					end
=$fb					buf         = args.buf
=$fd					buflen      = args.buflen
>0000					block_id    .byte   ?
.0000					format
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					label       = args.buf
=$fd					label_len   = args.buflen
.0000					mkfs
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					label       = args.buf
=$fd					label_len   = args.buflen
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					label       = args.buf
=$fd					label_len   = args.buflen
.0000					open
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					fname       = args.buf
=$fd					fname_len   = args.buflen
>0002					mode        .byte       ?
=0					READ        = 0
=1					WRITE       = 1
=2					END         = 2
.0000					read
>0000					stream      .byte       ?
>0001					buflen      .byte       ?
.0000					write
>0000					stream      .byte       ?
=$fb					buf         = args.buf
=$fd					buflen      = args.buflen
.0000					seek
>0000					stream      .byte       ?
>0001					position    .dword      ?
.0000					close
>0000					stream      .byte       ?
.0000					rename
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					old         = args.buf
=$fd					old_len     = args.buflen
=$f8					new         = args.ext
=$fa					new_len     = args.extlen
.0000					delete
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					fname       = args.buf
=$fd					fname_len   = args.buflen
>0002					mode        .byte       ?
=0					READ        = 0
=1					WRITE       = 1
=2					END         = 2
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					fname       = args.buf
=$fd					fname_len   = args.buflen
>0002					mode        .byte       ?
=0					READ        = 0
=1					WRITE       = 1
=2					END         = 2
>0000					stream      .byte       ?
>0001					buflen      .byte       ?
>0000					stream      .byte       ?
=$fb					buf         = args.buf
=$fd					buflen      = args.buflen
>0000					stream      .byte       ?
>0001					position    .dword      ?
>0000					stream      .byte       ?
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					old         = args.buf
=$fd					old_len     = args.buflen
=$f8					new         = args.ext
=$fa					new_len     = args.extlen
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					fnane       = args.buf
=$fd					fname_len   = args.buflen
.0000					open
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					path        = args.buf
=$fd					path_len    = args.buflen
.0000					read
>0000					stream      .byte       ?
>0001					buflen      .byte       ?
.0000					close
>0000					stream      .byte       ?
.0000					mkdir
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					path        = args.buf
=$fd					path_len    = args.buflen
.0000					rmdir
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					path        = args.buf
=$fd					path_len    = args.buflen
>0000					drive       .byte       ?
>0001					cookie      .byte       ?
=$fb					path        = args.buf
=$fd					path_len    = args.buflen
>0000					stream      .byte       ?
>0001					buflen      .byte       ?
>0000					stream      .byte       ?
>0000					x           .byte       ?   ; coordinate or size
>0001					y           .byte       ?   ; coordinate or size
=$fb					text        = args.buf      ; text
=$f8					color       = args.ext      ; color
=$fb					buf         = args.buf      ; deprecated
=$f8					buf2        = args.ext      ; deprecated
=$fd					buflen      = args.buflen
=$fb					socket      = args.buf
>0000					src_port    .word       ?
>0002					dest_port   .word       ?
>0004					dest_ip     .fill       4
>0000					accepted    .byte       ?
=$f8					buf         = args.ext
=$fa					buflen      = args.extlen
>0000					units       .byte       ?
=0					FRAMES      = 0
=1					SECONDS     = 1
=128					QUERY       = 128
>0001					absolute    .byte       ?
>0002					cookie      .byte       ?
>0000					century     .byte       ?
>0001					year        .byte       ?
>0002					month       .byte       ?
>0003					day         .byte       ?
>0004					hours       .byte       ?
>0005					minutes     .byte       ?
>0006					seconds     .byte       ?
>0007					centis      .byte       ?
.0008					size
>0000					            .word   ?   ; Reserved
>0002					            .word   ?   ; Deprecated
>0004					JOYSTICK    .word   ?   ; Game Controller changes.
>0006					DEVICE      .word   ?   ; Device added/removed.
>0008					PRESSED     .word   ?   ; Key pressed
>000a					RELEASED    .word   ?   ; Key released.
>000c					DELTA       .word   ?   ; Regular mouse move and button state
>000e					CLICKS      .word   ?   ; Click counts
>0010					NAME        .word   ?
>0012					SIZE        .word   ?
>0014					DATA        .word   ?   ; The read request has succeeded.
>0016					WROTE       .word   ?   ; The write request has completed.
>0018					FORMATTED   .word   ?   ; The low-level format has completed.
>001a					ERROR       .word   ?
>001c					SIZE        .word   ?
>001e					CREATED     .word   ?
>0020					CHECKED     .word   ?
>0022					DATA        .word   ?   ; The read request has succeeded.
>0024					WROTE       .word   ?   ; The write request has completed.
>0026					ERROR       .word   ?
>0028					NOT_FOUND   .word   ?   ; The file file was not found.
>002a					OPENED      .word   ?   ; The file was successfully opened.
>002c					DATA        .word   ?   ; The read request has succeeded.
>002e					WROTE       .word   ?   ; The write request has completed.
>0030					EOF         .word   ?   ; All file data has been read.
>0032					CLOSED      .word   ?   ; The close request has completed.
>0034					RENAMED     .word   ?   ; The rename request has completed.
>0036					DELETED     .word   ?   ; The delete request has completed.
>0038					ERROR       .word   ?   ; An error occured; close the file if opened.
>003a					SEEK        .word   ?   ; The seek request has completed.
>003c					OPENED      .word   ?   ; The directory open request succeeded.
>003e					VOLUME      .word   ?   ; A volume record was found.
>0040					FILE        .word   ?   ; A file record was found.
>0042					FREE        .word   ?   ; A file-system free-space record was found.
>0044					EOF         .word   ?   ; All data has been read.
>0046					CLOSED      .word   ?   ; The directory file has been closed.
>0048					ERROR       .word   ?   ; An error occured; user should close.
>004a					CREATED     .word   ?   ; The directory has been created.
>004c					DELETED     .word   ?   ; The directory has been deleted.
>004e					TCP         .word   ?
>0050					UDP         .word   ?
>0052					EXPIRED     .word   ?
>0054					TICK        .word   ?
>0000					type        .byte   ?   ; Enum above
>0001					buf         .byte   ?   ; page id or zero
>0002					ext         .byte   ?   ; page id or zero
.0003					key
>0003					keyboard    .byte   ?   ; Keyboard ID
>0004					raw         .byte   ?   ; Raw key ID
>0005					ascii       .byte   ?   ; ASCII value
>0006					flags       .byte   ?   ; Flags (META)
=$80					META        = $80       ; Meta key; no associated ASCII value.
.0003					mouse
.0003					delta
>0003					x           .byte   ?
>0004					y           .byte   ?
>0005					z           .byte   ?
>0006					buttons     .byte   ?
.0003					clicks
>0003					inner       .byte   ?
>0004					middle      .byte   ?
>0005					outer       .byte   ?
.0003					joystick
>0003					joy0        .byte   ?
>0004					joy1        .byte   ?
.0003					udp
>0003					token       .byte   ?   ; TODO: break out into fields
.0003					tcp
>0003					len         .byte   ?   ; Raw packet length.
.0003					file
>0003					stream      .byte   ?
>0004					cookie      .byte   ?
.0005					data
>0005					requested   .byte   ?   ; Requested number of bytes to read
>0006					read        .byte   ?   ; Number of bytes actually read
.0005					wrote
>0005					requested   .byte   ?   ; Requested number of bytes to read
>0006					wrote       .byte   ?   ; Number of bytes actually read
.0003					directory
>0003					stream      .byte   ?
>0004					cookie      .byte   ?
.0005					volume
>0005					len         .byte   ?   ; Length of volname (in buf)
>0006					flags       .byte   ?   ; block size, text encoding
.0005					file
>0005					len         .byte   ?
>0006					flags       .byte   ?   ; block scale, text encoding, approx size
.0005					free
>0005					flags       .byte   ?   ; block scale, text encoding, approx size
.0003					timer
>0003					value       .byte   ?
>0004					cookie      .byte   ?
>0000					keyboard    .byte   ?   ; Keyboard ID
>0001					raw         .byte   ?   ; Raw key ID
>0002					ascii       .byte   ?   ; ASCII value
>0003					flags       .byte   ?   ; Flags (META)
=$80					META        = $80       ; Meta key; no associated ASCII value.
.0000					delta
>0000					x           .byte   ?
>0001					y           .byte   ?
>0002					z           .byte   ?
>0003					buttons     .byte   ?
.0000					clicks
>0000					inner       .byte   ?
>0001					middle      .byte   ?
>0002					outer       .byte   ?
>0000					x           .byte   ?
>0001					y           .byte   ?
>0002					z           .byte   ?
>0003					buttons     .byte   ?
>0000					inner       .byte   ?
>0001					middle      .byte   ?
>0002					outer       .byte   ?
>0000					joy0        .byte   ?
>0001					joy1        .byte   ?
>0000					stream      .byte   ?
>0001					cookie      .byte   ?
.0002					data
>0002					requested   .byte   ?   ; Requested number of bytes to read
>0003					read        .byte   ?   ; Number of bytes actually read
.0002					wrote
>0002					requested   .byte   ?   ; Requested number of bytes to read
>0003					wrote       .byte   ?   ; Number of bytes actually read
>0000					requested   .byte   ?   ; Requested number of bytes to read
>0001					read        .byte   ?   ; Number of bytes actually read
>0000					requested   .byte   ?   ; Requested number of bytes to read
>0001					wrote       .byte   ?   ; Number of bytes actually read
>0000					stream      .byte   ?
>0001					cookie      .byte   ?
.0002					volume
>0002					len         .byte   ?   ; Length of volname (in buf)
>0003					flags       .byte   ?   ; block size, text encoding
.0002					file
>0002					len         .byte   ?
>0003					flags       .byte   ?   ; block scale, text encoding, approx size
.0002					free
>0002					flags       .byte   ?   ; block scale, text encoding, approx size
>0000					len         .byte   ?   ; Length of volname (in buf)
>0001					flags       .byte   ?   ; block size, text encoding
>0000					len         .byte   ?
>0001					flags       .byte   ?   ; block scale, text encoding, approx size
>0000					flags       .byte   ?   ; block scale, text encoding, approx size
>0000					free        .fill   6   ; blocks used/free
>0000					token       .byte   ?   ; TODO: break out into fields
>0000					len         .byte   ?   ; Raw packet length.
>0000					value       .byte   ?
>0001					cookie      .byte   ?

;******  Return to file: pendulum.asm

.00a0					event:
>00a0					type        .byte   ?   ; Enum above
>00a1					buf         .byte   ?   ; page id or zero
>00a2					ext         .byte   ?   ; page id or zero
.00a3					key
>00a3					keyboard    .byte   ?   ; Keyboard ID
>00a4					raw         .byte   ?   ; Raw key ID
>00a5					ascii       .byte   ?   ; ASCII value
>00a6					flags       .byte   ?   ; Flags (META)
=$80					META        = $80       ; Meta key; no associated ASCII value.
.00a3					mouse
.00a3					delta
>00a3					x           .byte   ?
>00a4					y           .byte   ?
>00a5					z           .byte   ?
>00a6					buttons     .byte   ?
.00a3					clicks
>00a3					inner       .byte   ?
>00a4					middle      .byte   ?
>00a5					outer       .byte   ?
.00a3					joystick
>00a3					joy0        .byte   ?
>00a4					joy1        .byte   ?
.00a3					udp
>00a3					token       .byte   ?   ; TODO: break out into fields
.00a3					tcp
>00a3					len         .byte   ?   ; Raw packet length.
.00a3					file
>00a3					stream      .byte   ?
>00a4					cookie      .byte   ?
.00a5					data
>00a5					requested   .byte   ?   ; Requested number of bytes to read
>00a6					read        .byte   ?   ; Number of bytes actually read
.00a5					wrote
>00a5					requested   .byte   ?   ; Requested number of bytes to read
>00a6					wrote       .byte   ?   ; Number of bytes actually read
.00a3					directory
>00a3					stream      .byte   ?
>00a4					cookie      .byte   ?
.00a5					volume
>00a5					len         .byte   ?   ; Length of volname (in buf)
>00a6					flags       .byte   ?   ; block size, text encoding
.00a5					file
>00a5					len         .byte   ?
>00a6					flags       .byte   ?   ; block scale, text encoding, approx size
.00a5					free
>00a5					flags       .byte   ?   ; block scale, text encoding, approx size
.00a3					timer
>00a3					value       .byte   ?
>00a4					cookie      .byte   ?
>2000	f2 56						.byte $f2,$56						; Required bytes for the Kernel to identify
>2002	04 01						.byte $04,$01						; how big is the program in 8K sections, What slot to map to
>2004	0b 20						.byte $0b,$20						; the starting address of your program
>2006	00 00 00 00					.byte $00,$00,$00,$00				; reserved
>200a	00						.byte $00							; terminating byte
.200b					SC:
.200b	64 01		stz $01				stz MMU_IO_CTRL						; should do this on every program
.200d	a9 a0		lda #$a0	        lda #<event
.200f	85 f0		sta $f0		        sta kernel.args.events
.2011	a9 00		lda #$00	        lda #>event
.2013	85 f1		sta $f1		        sta kernel.args.events+1
.2015	a9 27		lda #$27			lda #%00100111						; Graphic, Sprites Engine enabled  			|xx|GM|SP|TL|BM|GR|OV|TX|
.2017	8d 00 d0	sta $d000			sta VKY_MSTR_CTRL_0					; Text overlay enabled						| 0| 0| 1| 0| 0| 1| 1| 1|
.201a	a9 06		lda #$06			lda #%00000110						; Text mode options for the overlay 		|xx|xx|FS|FO|MS|2Y|2X|70|
.201c	8d 01 d0	sta $d001			sta VKY_MSTR_CTRL_1					; 320 x 240, 60 Hz, dbl X & Y				| 0| 0| 0| 0| 0| 1| 1| 0|
.201f	9c 04 d0	stz $d004			stz VKY_BRDR_CTRL					; No Border
.2022	a9 00		lda #$00			lda #$00							; Set the background color
.2024	8d 0f d0	sta $d00f			sta VKY_BKG_COL_R
.2027	a9 00		lda #$00			lda #$00
.2029	8d 0e d0	sta $d00e			sta VKY_BKG_COL_G
.202c	a9 00		lda #$00			lda #$00
.202e	8d 0d d0	sta $d00d			sta VKY_BKG_COL_B
.2031	20 a1 23	jsr $23a1			jsr clrScreen
.2034	a9 cd		lda #$cd			lda #<sprite1						; location of the first sprite
.2036	8d 68 26	sta $2668			sta spriteLoc
.2039	a9 2a		lda #$2a			lda #>sprite1
.203b	8d 69 26	sta $2669			sta spriteLoc+1
.203e	a2 00		ldx #$00			ldx #$00							; set x to zero to start
.2040					spriteLoop:
.2040	8a		txa				txa									; transfer to A and multiply by 8
.2041	0a		asl a				asl
.2042	0a		asl a				asl
.2043	0a		asl a				asl
.2044	a8		tay				tay									; transfer result to Y, sprite control data is every 8 bytes
.2045	a9 61		lda #$61			lda #%01100001						; 8x8 sprite, layer 0, lut 0, enable on
.2047	99 00 d9	sta $d900,y			sta VKY_SP0,y 						; from sprite 0 in Vicky indexed to y
.204a	bd 25 25	lda $2525,x			lda ballXLO,x
.204d	99 04 d9	sta $d904,y			sta VKY_SP0+SP_POS_X_L,Y
.2050	a9 00		lda #$00			lda #$00
.2052	99 05 d9	sta $d905,y			sta VKY_SP0+SP_POS_X_H,y
.2055	bd 55 25	lda $2555,x			lda ballYLO,X
.2058	99 06 d9	sta $d906,y			sta VKY_SP0+SP_POS_Y_L,Y
.205b	bd 6d 25	lda $256d,x			lda ballYHI,X
.205e	99 07 d9	sta $d907,y			sta VKY_SP0+SP_POS_Y_H,Y
.2061	ad 68 26	lda $2668			lda spriteLoc
.2064	99 01 d9	sta $d901,y			sta VKY_SP0+SP_AD_L,y
.2067	ad 69 26	lda $2669			lda spriteLoc+1
.206a	99 02 d9	sta $d902,y			sta VKY_SP0+SP_AD_M,y
.206d	a9 00		lda #$00			lda #$00
.206f	99 03 d9	sta $d903,y			sta VKY_SP0+SP_AD_H,y
.2072	18		clc				clc
.2073	ad 68 26	lda $2668			lda spriteLoc						; each ball has its own sprite. 8x8 sprites are 64 bytes
.2076	69 40		adc #$40			adc #64
.2078	8d 68 26	sta $2668			sta spriteLoc
.207b	ad 69 26	lda $2669			lda spriteLoc+1
.207e	69 00		adc #$00			adc #$00
.2080	8d 69 26	sta $2669			sta spriteLoc+1
.2083	e8		inx				inx
.2084	e0 18		cpx #$18			cpx #24
.2086	d0 b8		bne $2040			bne spriteLoop
.2088	a9 01		lda #$01			lda #$01							; Change I/O control to page 1
.208a	85 01		sta $01				sta MMU_IO_CTRL
.208c	a9 4d		lda #$4d			lda #<CLUT0							; Set source pointer to CLUT for color information
.208e	85 80		sta $80				sta ptr_src
.2090	a9 2a		lda #$2a			lda #>CLUT0
.2092	85 81		sta $81				sta ptr_src+1
.2094	a9 00		lda #$00			lda #<VKY_GR_CLUT_0					; Set destination pointer to Graphics CLUT 0
.2096	85 82		sta $82				sta ptr_dst
.2098	a9 d0		lda #$d0			lda #>VKY_GR_CLUT_0
.209a	85 83		sta $83				sta ptr_dst+1
.209c	a2 00		ldx #$00			ldx #$00							; Y is the number of colors to copy, check for 32
.209e	a0 20		ldy #$20			ldy #32
.20a0					makeClut:
.20a0	8c 67 26	sty $2667			sty totalColors
.20a3					color_loop:
.20a3	a0 00		ldy #$00			ldy #$00							; Y points to the color component (Blue Red Green Alpha)
.20a5					comp_loop:
.20a5	b1 80		lda ($80),y			lda (ptr_src),y						; Read byte from our color table
.20a7	91 82		sta ($82),y			sta (ptr_dst),y						; write byte to the Graphic CLUT
.20a9	c8		iny				iny
.20aa	c0 04		cpy #$04			cpy #$04							; Do 4 bytes for one color + Alpha
.20ac	d0 f7		bne $20a5			bne comp_loop
.20ae	e8		inx				inx
.20af	ec 67 26	cpx $2667			cpx totalColors						; Loop for all colors of the CLUT
.20b2	f0 1d		beq $20d1			beq done_lut
.20b4	18		clc				clc									; Move the source pointer to the next Color
.20b5	a5 80		lda $80				lda ptr_src
.20b7	69 04		adc #$04			adc #$04
.20b9	85 80		sta $80				sta ptr_src
.20bb	a5 81		lda $81				lda ptr_src+1
.20bd	69 00		adc #$00			adc #$00
.20bf	85 81		sta $81				sta ptr_src+1
.20c1	18		clc				clc									; Move the destination pointer to the next Color
.20c2	a5 82		lda $82				lda ptr_dst
.20c4	69 04		adc #$04			adc #$04
.20c6	85 82		sta $82				sta ptr_dst
.20c8	a5 83		lda $83				lda ptr_dst+1
.20ca	69 00		adc #$00			adc #$00
.20cc	85 83		sta $83				sta ptr_dst+1
.20ce	4c a3 20	jmp $20a3			jmp color_loop						; and start copying the next color
.20d1					done_lut:
.20d1	64 01		stz $01				stz MMU_IO_CTRL
.20d3					setFont:
.20d3	a9 7b		lda #$7b			lda #<font
.20d5	85 80		sta $80				sta $80
.20d7	a9 26		lda #$26			lda #>font
.20d9	85 81		sta $81				sta $81
.20db	a9 c1		lda #$c1			lda #$c1
.20dd	64 82		stz $82				stz $82
.20df	85 83		sta $83				sta $83
.20e1	a0 00		ldy #$00			ldy #$00
.20e3	a2 03		ldx #$03			ldx #$03
.20e5	a9 01		lda #$01			lda #$01
.20e7	85 01		sta $01				sta MMU_IO_CTRL
.20e9					_sfLoop:
.20e9	b1 80		lda ($80),y			lda ($80),y
.20eb	91 82		sta ($82),y			sta ($82),y
.20ed	c8		iny				iny
.20ee	d0 f9		bne $20e9			bne _sfLoop
.20f0	e6 81		inc $81				inc $81
.20f2	e6 83		inc $83				inc $83
.20f4	ca		dex				dex
.20f5	d0 f2		bne $20e9			bne _sfLoop
.20f7	64 01		stz $01				stz MMU_IO_CTRL
.20f9	20 7a 23	jsr $237a			jsr setBalls
.20fc	20 e2 22	jsr $22e2			jsr setMidiInstrument
.20ff	a9 00		lda #$00			lda #kernel.args.timer.FRAMES		; set the Timer to Frames
.2101	09 80		ora #$80			ora #kernel.args.timer.QUERY		; and query what frame we're on
.2103	85 f3		sta $f3				sta kernel.args.timer.units			; store in units parameter
.2105	20 f0 ff	jsr $fff0			jsr kernel.Clock.SetTimer			; jsr to Kernel Routine
.2108	b0 04		bcs $210e			bcs skipSet							; If Carry set, ignore
.210a	69 01		adc #$01			adc #$01							; if not add 1 to Accumulator for next frame
.210c	85 d0		sta $d0				sta $d0
.210e					skipSet:
.210e	20 6a 23	jsr $236a			jsr SetTimer						; Let's get the kernel set up for the timer
.2111					loop:
.2111	20 17 21	jsr $2117			jsr handle_events					; This is my game loop
.2114	4c 11 21	jmp $2111			jmp loop
.2117					handle_events:
.2117	a5 f2		lda $f2				lda kernel.args.events.pending		; Peek at the queue to see if anything is pending
.2119	10 0b		bpl $2126			bpl done_handle_events				; Nothing to do
.211b	20 00 ff	jsr $ff00			jsr kernel.NextEvent				; Get the next event.
.211e	b0 06		bcs $2126			bcs done_handle_events				; If Carry is set, skip the handler
.2120	20 27 21	jsr $2127			jsr dispatch						; Handle the event
.2123	4c 17 21	jmp $2117			jmp handle_events					; go and check for another event
.2126					done_handle_events:
.2126	60		rts				rts
.2127					dispatch:
.2127	a5 a0		lda $a0				lda event.type						; get the event type from Kernel
.2129	c9 52		cmp #$52			cmp #kernel.event.timer.EXPIRED		; is the event timer.EXPIRED?
.212b	f0 05		beq $2132			beq UpdateScreenJmp					; run the screen update
.212d	c9 08		cmp #$08			cmp #kernel.event.key.PRESSED
.212f	f0 04		beq $2135	        beq keypress
.2131	60		rts				rts
.2132					UpdateScreenJmp
.2132	4c 00 22	jmp $2200			jmp UpdateScreen					; jmp because conditional is tto far
.2135					keypress:
.2135	ad 6a 26	lda $266a			lda menuFlag
.2138	f0 57		beq $2191			beq checkTab
.213a	a5 a6		lda $a6		        lda event.key.flags               	; Once a key is pressed, we can get the ascii value by loading the byte from the
.213c	a5 a5		lda $a5		        lda event.key.ascii                 ; event.key.ascii location assigned by the kernel. We then check to see if it's a
.213e	c9 10		cmp #$10			cmp #16								; These are the ascii characters for the menu input!
.2140	f0 58		beq $219a			beq moreGap
.2142	c9 0e		cmp #$0e			cmp #14
.2144	f0 15		beq $215b			beq lessGapJmp						; TAB does not work here. These do not work when the menu is off.
.2146	c9 06		cmp #$06			cmp #6
.2148	f0 61		beq $21ab			beq moreSpeed
.214a	c9 02		cmp #$02			cmp #2
.214c	f0 79		beq $21c7			beq lessSpeed
.214e	c9 69		cmp #$69			cmp #105
.2150	f0 0c		beq $215e			beq nextInst
.2152	c9 49		cmp #$49			cmp #73
.2154	f0 1c		beq $2172			beq lastInst
.2156	c9 0d		cmp #$0d			cmp #13
.2158	f0 2a		beq $2184			beq restart
.215a					keyDone:
.215a	60		rts				rts
.215b					lessGapJmp
.215b	4c e8 21	jmp $21e8			jmp lessGap							; jmp because conditional is too far away
.215e					nextInst:
.215e	18		clc				clc
.215f	ad 66 26	lda $2666			lda midiInst
.2162	69 01		adc #$01			adc #$01
.2164	c9 34		cmp #$34			cmp #52
.2166	b0 03		bcs $216b			bcs nInstDone
.2168	8d 66 26	sta $2666			sta midiInst
.216b					nInstDone:
.216b	20 64 24	jsr $2464			jsr printMidiInst
.216e	20 e2 22	jsr $22e2			jsr setMidiInstrument
.2171	60		rts				rts
.2172					lastInst:
.2172	38		sec				sec
.2173	ad 66 26	lda $2666			lda midiInst
.2176	e9 01		sbc #$01			sbc #$01
.2178	30 03		bmi $217d			bmi lInstDone
.217a	8d 66 26	sta $2666			sta midiInst
.217d					lInstDone:
.217d	20 64 24	jsr $2464			jsr printMidiInst
.2180	20 e2 22	jsr $22e2			jsr setMidiInstrument
.2183	60		rts				rts
.2184					restart:
.2184	20 a1 23	jsr $23a1			jsr clrScreen						; and restarts the balls from 0
.2187	20 ab 24	jsr $24ab			jsr resetBalls
.218a	20 7a 23	jsr $237a			jsr setBalls
.218d	9c 6a 26	stz $266a			stz menuFlag
.2190	60		rts				rts
.2191					checkTab:
.2191	a5 a6		lda $a6				lda event.key.flags               	; Once a key is pressed, we can get the ascii value by loading the byte from the
.2193	a5 a5		lda $a5				lda event.key.ascii                 ; event.key.ascii location assigned by the kernel. We then check to see if it's a
.2195	c9 09		cmp #$09			cmp #9
.2197	f0 60		beq $21f9			beq runMenu
.2199	60		rts				rts
.219a					moreGap:
.219a	18		clc				clc									; This does not take effect until RETURN is hit
.219b	ad 63 26	lda $2663			lda speedRatio
.219e	69 04		adc #$04			adc #$04
.21a0	c9 44		cmp #$44			cmp #$44
.21a2	b0 03		bcs $21a7			bcs topGap
.21a4	8d 63 26	sta $2663			sta speedRatio
.21a7					topGap:
.21a7	20 43 24	jsr $2443			jsr printGap
.21aa	60		rts				rts
.21ab					moreSpeed:
.21ab	18		clc				clc									; will adjust with the gap setting once RETURN is hit
.21ac	ad 61 26	lda $2661			lda speedBase
.21af	69 08		adc #$08			adc #$08
.21b1	8d 61 26	sta $2661			sta speedBase
.21b4	ad 62 26	lda $2662			lda speedBase+1
.21b7	69 00		adc #$00			adc #$00
.21b9	8d 62 26	sta $2662			sta speedbase+1
.21bc	c9 03		cmp #$03			cmp #$03
.21be	d0 03		bne $21c3			bne mSDone
.21c0	9c 61 26	stz $2661			stz speedBase
.21c3					mSDone:
.21c3	20 16 24	jsr $2416			jsr printSpeed
.21c6	60		rts				rts
.21c7					lessSpeed:
.21c7	38		sec				sec									; will adjust once the RETURN is hit.
.21c8	ad 61 26	lda $2661			lda speedBase
.21cb	e9 08		sbc #$08			sbc #$08
.21cd	8d 61 26	sta $2661			sta speedbase
.21d0	ad 62 26	lda $2662			lda speedbase+1
.21d3	e9 00		sbc #$00			sbc #$00
.21d5	8d 62 26	sta $2662			sta speedbase+1
.21d8	d0 0a		bne $21e4			bne lSpeedDone
.21da					checkSpeedLO:
.21da	ad 61 26	lda $2661			lda speedBase
.21dd	d0 05		bne $21e4			bne lSpeedDone
.21df	a9 08		lda #$08			lda #$08
.21e1	8d 61 26	sta $2661			sta speedBase
.21e4					lSpeedDone:
.21e4	20 16 24	jsr $2416			jsr printSpeed
.21e7	60		rts				rts
.21e8					lessGap:
.21e8	38		sec				sec									; take affect until RETURN is hit.
.21e9	ad 63 26	lda $2663			lda speedRatio
.21ec	e9 04		sbc #$04			sbc #$04
.21ee	c9 04		cmp #$04			cmp #$04
.21f0	90 03		bcc $21f5			bcc bottomGap
.21f2	8d 63 26	sta $2663			sta speedRatio
.21f5					bottomGap:
.21f5	20 43 24	jsr $2443			jsr printGap
.21f8	60		rts				rts
.21f9					runMenu:
.21f9	20 d5 23	jsr $23d5			jsr printMenu
.21fc	ee 6a 26	inc $266a			inc menuFlag
.21ff	60		rts				rts
.2200					UpdateScreen:
.2200	20 6a 23	jsr $236a			jsr SetTimer						; reset timer for next SOF
.2203	20 07 22	jsr $2207			jsr moveBalls						; move the balls
.2206					noMove:
.2206	60		rts				rts
.2207					moveBalls:
.2207	a2 00		ldx #$00			ldx #$00							; set X to zero to loop 24 balls
.2209					mbLoop:
.2209	8a		txa				txa									; transfer x to A
.220a	0a		asl a				asl									; and multiply by 8
.220b	0a		asl a				asl 								;		sprite control is 8 bytes large
.220c	0a		asl a				asl									;       this sets y at the start of each sprite
.220d	a8		tay				tay									; 		and store in y
.220e	bd c5 24	lda $24c5,x			lda ballDir,x 						; Get the ball direction 1 for right FF for left
.2211	c9 ff		cmp #$ff			cmp #$ff							; check if we're going left
.2213	f0 37		beq $224c			beq goBack							; if yest, go to left routine
.2215					goForward:
.2215	18		clc				clc									; go right routine
.2216	bd 0d 25	lda $250d,x			lda ballXFR,x						; we're going to add the speed to the X paramter
.2219	7d dd 24	adc $24dd,x			adc ballSdF,x 						; using a single byte fixed point fraction
.221c	9d 0d 25	sta $250d,x			sta ballXFR,x
.221f	bd 25 25	lda $2525,x			lda ballXLO,x
.2222	7d f5 24	adc $24f5,x			adc ballSdL,x
.2225	9d 25 25	sta $2525,x			sta ballXLO,x
.2228	bd 3d 25	lda $253d,x			lda ballXHI,x
.222b	69 00		adc #$00			adc #$00
.222d	9d 3d 25	sta $253d,x			sta ballxHI,x
.2230	bd 25 25	lda $2525,x			lda ballXLO,x 						; see if we hit the right side of the screen
.2233	c9 59		cmp #$59			cmp #$59
.2235	90 4a		bcc $2281			bcc placeBall						; no, let's set the sprite on the screen
.2237	bd 3d 25	lda $253d,x			lda ballxHI,x 						; need to check HI byte as well
.223a	f0 45		beq $2281			beq placeBall						; no, place sprite on screen
.223c	a9 ff		lda #$ff			lda #$ff							; yes, change the direction flag to $ff
.223e	9d c5 24	sta $24c5,x			sta ballDir,x
.2241	20 9c 22	jsr $229c			jsr reverseBack
.2244	20 f1 22	jsr $22f1			jsr makeMusic						; hit the note on the SAM chip
.2247	20 02 23	jsr $2302			jsr makeColor						; fill the ball with the correct color
.224a	80 35		bra $2281			bra placeBall						; and drop down to the opposite direction
.224c					goBack:
.224c	38		sec				sec 								; go left direction
.224d	bd 0d 25	lda $250d,x			lda ballXFR,x						; subtract the ball speed from the x potition
.2250	fd dd 24	sbc $24dd,x			sbc ballSdF,x
.2253	9d 0d 25	sta $250d,x			sta ballXFR,x
.2256	bd 25 25	lda $2525,x			lda ballXLO,x
.2259	fd f5 24	sbc $24f5,x			sbc ballSdL,x
.225c	9d 25 25	sta $2525,x			sta ballXLO,x
.225f	bd 3d 25	lda $253d,x			lda ballXHI,x
.2262	e9 00		sbc #$00			sbc #$00
.2264	9d 3d 25	sta $253d,x			sta ballxHI,x
.2267	bd 25 25	lda $2525,x			lda ballXLO,x 						; check if we hit the left side of the screen
.226a	c9 1f		cmp #$1f			cmp #$1f
.226c	b0 13		bcs $2281			bcs placeBall						; no, place the sprite
.226e	bd 3d 25	lda $253d,x			lda ballxHI,x 						; we need to check the hi byte too
.2271	d0 0e		bne $2281			bne placeBall						; no, place the sprite
.2273	a9 01		lda #$01			lda #$01							; change the ball direction to right
.2275	9d c5 24	sta $24c5,x			sta ballDir,x
.2278	20 bf 22	jsr $22bf			jsr reverseForward
.227b	20 f1 22	jsr $22f1			jsr makeMusic						; hit the note on the SAM chip
.227e	20 02 23	jsr $2302			jsr makeColor						; fill the ball with the correct color
.2281					placeBall:
.2281	bd 25 25	lda $2525,x			lda ballXLO,X						; set the sprite position parameter
.2284	99 04 d9	sta $d904,y			sta VKY_SP0+SP_POS_X_L,Y
.2287	bd 3d 25	lda $253d,x			lda ballxHI,X
.228a	99 05 d9	sta $d905,y			sta VKY_SP0+SP_POS_X_H,y
.228d	20 15 23	jsr $2315			jsr dropColor						; reduce the color intesity as it travels away from the edge
.2290	20 43 23	jsr $2343			jsr assignColor						; and assign the color to the CLUT
.2293	e8		inx				inx									; go to next ball in sequence
.2294	e0 18		cpx #$18			cpx #24								; have we gone through all 24 balls
.2296	f0 03		beq $229b			beq doneBallLoop					; yes skip the jmp command to top
.2298	4c 09 22	jmp $2209			jmp mbLoop
.229b					doneBallLoop:
.229b	60		rts				rts
.229c					reverseBack:
.229c	38		sec				sec
.229d	bd 0d 25	lda $250d,x			lda ballXFR,x
.22a0	e9 00		sbc #$00			sbc #$00
.22a2	8d 64 26	sta $2664			sta resultFR
.22a5	bd 25 25	lda $2525,x			lda ballXLO,x
.22a8	e9 59		sbc #$59			sbc #$59
.22aa	8d 65 26	sta $2665			sta resultLO
.22ad	38		sec				sec
.22ae	a9 00		lda #$00			lda #$00
.22b0	ed 64 26	sbc $2664			sbc resultFR
.22b3	9d 0d 25	sta $250d,x			sta ballXFR,x
.22b6	a9 59		lda #$59			lda #$59
.22b8	ed 65 26	sbc $2665			sbc resultLO
.22bb	9d 25 25	sta $2525,x			sta ballXLO,x
.22be	60		rts				rts
.22bf					reverseForward:
.22bf	38		sec				sec
.22c0	a9 00		lda #$00			lda #$00
.22c2	fd 0d 25	sbc $250d,x			sbc ballXFR,x
.22c5	8d 64 26	sta $2664			sta resultFR
.22c8	a9 1f		lda #$1f			lda #$1f
.22ca	fd 25 25	sbc $2525,x			sbc ballXLO,x
.22cd	8d 65 26	sta $2665			sta resultLO
.22d0	18		clc				clc
.22d1	a9 00		lda #$00			lda #$00
.22d3	6d 64 26	adc $2664			adc resultFR
.22d6	9d 0d 25	sta $250d,x			sta ballXFR,x
.22d9	a9 1f		lda #$1f			lda #$1f
.22db	6d 65 26	adc $2665			adc resultLO
.22de	9d 25 25	sta $2525,x			sta ballXLO,x
.22e1	60		rts				rts
.22e2					setMidiInstrument:
.22e2	a9 c0		lda #$c0			lda #$c0							; set the instrument for channel 0
.22e4	8d a1 dd	sta $dda1			sta MIDI_COM
.22e7	ae 66 26	ldx $2666			ldx midiInst								; this is the instrument number
.22ea	bd e5 25	lda $25e5,x			lda midiTable,x
.22ed	8d a1 dd	sta $dda1			sta MIDI_COM
.22f0	60		rts				rts
.22f1					makeMusic:
.22f1	a9 90		lda #$90			lda #$90							; strike a note on channel 0
.22f3	8d a1 dd	sta $dda1			sta MIDI_COM
.22f6	bd 85 25	lda $2585,x			lda ballNote,X						; send note value based on what ball hit the edge
.22f9	8d a1 dd	sta $dda1			sta MIDI_COM
.22fc	a9 40		lda #$40			lda #$40							; set strike velocity ($40 is the default value)
.22fe	8d a1 dd	sta $dda1			sta MIDI_COM
.2301	60		rts				rts
.2302					makeColor:
.2302	bd 19 26	lda $2619,x			lda colorG,X						; get the reference color
.2305	9d 9d 25	sta $259d,x			sta ballG,X							; and store it in the ball
.2308	bd 31 26	lda $2631,x			lda colorR,X						; for all three colors
.230b	9d b5 25	sta $25b5,x			sta ballR,X
.230e	bd 49 26	lda $2649,x			lda colorB,X
.2311	9d cd 25	sta $25cd,x			sta ballB,X
.2314	60		rts				rts
.2315					dropColor:
.2315	de 9d 25	dec $259d,x			dec ballG,X							; each cycle reduce the color value by one
.2318	de b5 25	dec $25b5,x			dec ballR,x
.231b	de cd 25	dec $25cd,x			dec ballB,x
.231e	bd 9d 25	lda $259d,x			lda ballG,X							; check if we've gone too far
.2321	c9 ff		cmp #$ff			cmp #$ff							; and reset to zero
.2323	d0 05		bne $232a			bne checkRed
.2325	a9 00		lda #$00			lda #$00
.2327	9d 9d 25	sta $259d,x			sta ballG,x
.232a					checkRed:
.232a	bd b5 25	lda $25b5,x			lda ballR,x
.232d	c9 ff		cmp #$ff			cmp #$ff
.232f	d0 05		bne $2336			bne checkBlue
.2331	a9 00		lda #$00			lda #$00
.2333	9d b5 25	sta $25b5,x			sta ballR,x
.2336					checkBlue:
.2336	bd cd 25	lda $25cd,x			lda ballB,x
.2339	c9 ff		cmp #$ff			cmp #$ff
.233b	d0 05		bne $2342			bne colorDone
.233d	a9 00		lda #$00			lda #$00
.233f	9d cd 25	sta $25cd,x			sta ballB,x
.2342					colorDone:
.2342	60		rts				rts
.2343					assignColor:
.2343	a9 01		lda #$01			lda #$01							; Change I/O control to page 1
.2345	85 01		sta $01				sta MMU_IO_CTRL
.2347	8a		txa				txa									; grab which ball we have
.2348	18		clc				clc
.2349	69 02		adc #$02			adc #$02							; and add two for the first color to first ball
.234b	0a		asl a				asl									; then multiply by 4 to get to the right
.234c	0a		asl a				asl									; location for the RGBA bytes for each color
.234d	a8		tay				tay									; and transfer to Y for indirect indexing
.234e	a9 00		lda #$00			lda #<VKY_GR_CLUT_0					; Set destination pointer to Graphics CLUT 0
.2350	85 82		sta $82				sta ptr_dst
.2352	a9 d0		lda #$d0			lda #>VKY_GR_CLUT_0
.2354	85 83		sta $83				sta ptr_dst+1
.2356	bd cd 25	lda $25cd,x			lda ballB,x 						; get the ball color
.2359	91 82		sta ($82),y			sta (ptr_dst),y						; and store it in the CLUT
.235b	c8		iny				iny									; incrment y for next color component
.235c	bd b5 25	lda $25b5,x			lda ballR,x 						; and repeat
.235f	91 82		sta ($82),y			sta (ptr_dst),y
.2361	c8		iny				iny
.2362	bd 9d 25	lda $259d,x			lda ballG,x
.2365	91 82		sta ($82),y			sta (ptr_dst),y
.2367	64 01		stz $01				stz MMU_IO_CTRL						; reset mmu IO to zero
.2369	60		rts				rts
.236a					SetTimer:
.236a	e6 d0		inc $d0				inc $d0
.236c	a5 d0		lda $d0				lda $d0
.236e	85 f4		sta $f4				sta kernel.args.timer.absolute		; store in timer.absolute paramter
.2370	85 f5		sta $f5				sta kernel.args.timer.cookie		; saved as a cookie to the kernel (same as frame number)
.2372	a9 00		lda #$00			lda #kernel.args.timer.FRAMES		; set the Timer to Frames
.2374	85 f3		sta $f3				sta kernel.args.timer.units			; store in units parameter
.2376	20 f0 ff	jsr $fff0			jsr kernel.Clock.SetTimer			; jsr to Kernel routine to set timer
.2379	60		rts				rts
.237a					setBalls:
.237a	ad 61 26	lda $2661			lda speedBase
.237d	a2 17		ldx #$17			ldx #23
.237f	9d dd 24	sta $24dd,x			sta ballSdF,X
.2382	ad 62 26	lda $2662			lda speedBase+1
.2385	9d f5 24	sta $24f5,x			sta ballSdL,X
.2388	ca		dex				dex
.2389					sbLoop:
.2389	18		clc				clc									; Then we'll add the speed ratio to each ball up the chain
.238a	bd de 24	lda $24de,x			lda ballSdF+1,X						; so each ball is faster than the previous.
.238d	6d 63 26	adc $2663			adc speedRatio						; save these values in our speed table
.2390	9d dd 24	sta $24dd,x			sta ballSdF,X
.2393	bd f6 24	lda $24f6,x			lda ballSdL+1,X
.2396	69 00		adc #$00			adc #$00
.2398	9d f5 24	sta $24f5,x			sta ballSdL,X
.239b	ca		dex				dex
.239c	30 02		bmi $23a0			bmi sbDone
.239e	80 e9		bra $2389			bra sbLoop
.23a0					sbDone:
.23a0	60		rts				rts
.23a1					clrScreen:
.23a1	a2 00		ldx #$00			ldx #$00							; set x for indexing
.23a3					csLoop:
.23a3	a9 02		lda #$02			lda #$02							; set the output to character matrix
.23a5	85 01		sta $01				sta MMU_IO_CTRL
.23a7	a9 20		lda #$20			lda #$20							; set a to a blank character
.23a9	9d 00 c0	sta $c000,x			sta $c000+$000,x 					; and save every 240 memory locations
.23ac	9d f0 c0	sta $c0f0,x			sta $c000+$0f0,x 					;
.23af	9d e0 c1	sta $c1e0,x			sta $c000+$1e0,x 					; We're only going to loop once instead of
.23b2	9d d0 c2	sta $c2d0,x			sta $c000+$2d0,x 					; nesting loops
.23b5	9d c0 c3	sta $c3c0,x			sta $c000+$3c0,x
.23b8	a9 03		lda #$03			lda #$03							; set the output to the color matrix
.23ba	85 01		sta $01				sta MMU_IO_CTRL
.23bc	a9 f0		lda #$f0			lda #$f0							; pick white
.23be	9d 00 c0	sta $c000,x			sta $c000+$000,x 					; do the same save groups
.23c1	9d f0 c0	sta $c0f0,x			sta $c000+$0f0,x
.23c4	9d e0 c1	sta $c1e0,x			sta $c000+$1e0,x
.23c7	9d d0 c2	sta $c2d0,x			sta $c000+$2d0,x
.23ca	9d c0 c3	sta $c3c0,x			sta $c000+$3c0,x
.23cd	e8		inx				inx									; inc x
.23ce	e0 f1		cpx #$f1			cpx #$f1 							; and check if we've hit 241
.23d0	90 d1		bcc $23a3			bcc csLoop							; if less, continue looping
.23d2	64 01		stz $01				stz MMU_IO_CTRL						; reset IO to 0
.23d4	60		rts				rts
.23d5					printMenu:
.23d5	a2 00		ldx #$00			ldx #$00
.23d7					pMenuLoop:
.23d7	bd 7b 29	lda $297b,x			lda menu,x
.23da	c9 ff		cmp #$ff			cmp #$ff
.23dc	f0 1a		beq $23f8			beq pMenuDone
.23de	85 82		sta $82				sta ptr_dst
.23e0	e8		inx				inx
.23e1	bd 7b 29	lda $297b,x			lda menu,x
.23e4	85 83		sta $83				sta ptr_dst+1
.23e6	e8		inx				inx
.23e7	bd 7b 29	lda $297b,x			lda menu,x
.23ea	85 80		sta $80				sta ptr_src
.23ec	e8		inx				inx
.23ed	bd 7b 29	lda $297b,x			lda menu,x
.23f0	85 81		sta $81				sta ptr_src+1
.23f2	20 02 24	jsr $2402			jsr outputText
.23f5	e8		inx				inx
.23f6	80 df		bra $23d7			bra pMenuLoop
.23f8					pMenuDone:
.23f8	20 16 24	jsr $2416			jsr printSpeed
.23fb	20 43 24	jsr $2443			jsr printGap
.23fe	20 64 24	jsr $2464			jsr printMidiInst
.2401	60		rts				rts
.2402					outputText:
.2402	a9 02		lda #$02			lda #$02
.2404	85 01		sta $01				sta MMU_IO_CTRL
.2406	a0 00		ldy #$00			ldy #$00
.2408					oTextLoop:
.2408	b1 80		lda ($80),y			lda (ptr_src),y
.240a	c9 5e		cmp #$5e			cmp #94
.240c	f0 05		beq $2413			beq oTextDone
.240e	91 82		sta ($82),y			sta (ptr_dst),y
.2410	c8		iny				iny
.2411	80 f5		bra $2408			bra oTextLoop
.2413					oTextDone:
.2413	64 01		stz $01				stz MMU_IO_CTRL
.2415	60		rts				rts
.2416					printSpeed:
.2416	a9 02		lda #$02			lda #$02
.2418	85 01		sta $01				sta MMU_IO_CTRL
.241a	ad 62 26	lda $2662			lda speedbase+1
.241d	29 0f		and #$0f			and #$0f
.241f	aa		tax				tax
.2420	bd 6b 26	lda $266b,x			lda hex,x
.2423	8d 61 c1	sta $c161			sta $c161
.2426	ad 61 26	lda $2661			lda speedbase
.2429	4a		lsr a				lsr
.242a	4a		lsr a				lsr
.242b	4a		lsr a				lsr
.242c	4a		lsr a				lsr
.242d	aa		tax				tax
.242e	bd 6b 26	lda $266b,x			lda hex,X
.2431	8d 62 c1	sta $c162			sta $c161+1
.2434	ad 61 26	lda $2661			lda speedbase
.2437	29 0f		and #$0f			and #$0f
.2439	aa		tax				tax
.243a	bd 6b 26	lda $266b,x			lda hex,x
.243d	8d 63 c1	sta $c163			sta $c161+2
.2440	64 01		stz $01				stz MMU_IO_CTRL
.2442	60		rts				rts
.2443					printgap:
.2443	a9 02		lda #$02			lda #$02
.2445	85 01		sta $01				sta MMU_IO_CTRL
.2447	ad 63 26	lda $2663			lda speedRatio
.244a	4a		lsr a				lsr
.244b	4a		lsr a				lsr
.244c	4a		lsr a				lsr
.244d	4a		lsr a				lsr
.244e	aa		tax				tax
.244f	bd 6b 26	lda $266b,x			lda hex,x
.2452	8d b1 c1	sta $c1b1			sta $c1b1
.2455	ad 63 26	lda $2663			lda speedRatio
.2458	29 0f		and #$0f			and #$0f
.245a	aa		tax				tax
.245b	bd 6b 26	lda $266b,x			lda hex,x
.245e	8d b2 c1	sta $c1b2			sta $c1b1+1
.2461	64 01		stz $01				stz MMU_IO_CTRL
.2463	60		rts				rts
.2464					printMidiInst:
.2464	ae 66 26	ldx $2666			ldx midiInst
.2467	bd e5 25	lda $25e5,x			lda midiTable,x
.246a	8d 00 de	sta $de00			sta MULU_A_L
.246d	9c 01 de	stz $de01			stz MULU_A_H
.2470	a9 17		lda #$17			lda #23
.2472	8d 02 de	sta $de02			sta MULU_B_L
.2475	9c 03 de	stz $de03			stz MULU_B_H
.2478	18		clc				clc
.2479	ad 10 de	lda $de10			lda MULU_LL
.247c	69 cd		adc #$cd			adc #<instrumentList
.247e	85 80		sta $80				sta ptr_src
.2480	ad 11 de	lda $de11			lda MULU_LH
.2483	69 30		adc #$30			adc #>instrumentList
.2485	85 81		sta $81				sta ptr_src+1
.2487	a9 33		lda #$33			lda #$33
.2489	85 82		sta $82				sta ptr_dst
.248b	a9 c2		lda #$c2			lda #$c2
.248d	85 83		sta $83				sta ptr_dst+1
.248f	a9 02		lda #$02			lda #$02
.2491	85 01		sta $01				sta MMU_IO_CTRL
.2493	a0 00		ldy #$00			ldy #$00
.2495					pMidiLoop:
.2495	a9 02		lda #$02			lda #$02
.2497	85 01		sta $01				sta MMU_IO_CTRL
.2499	b1 80		lda ($80),y			lda (ptr_src),y
.249b	91 82		sta ($82),y			sta (ptr_dst),y
.249d	e6 01		inc $01				inc MMU_IO_CTRL
.249f	a9 b0		lda #$b0			lda #$b0
.24a1	91 82		sta ($82),y			sta (ptr_dst),y
.24a3	c8		iny				iny
.24a4	c0 17		cpy #$17			cpy #23
.24a6	90 ed		bcc $2495			bcc pMidiLoop
.24a8	64 01		stz $01				stz MMU_IO_CTRL
.24aa	60		rts				rts
.24ab					resetBalls:
.24ab	a2 00		ldx #$00			ldx #00
.24ad					rBallLoop:
.24ad	a9 20		lda #$20			lda #$20
.24af	9d 25 25	sta $2525,x			sta ballXLO,X
.24b2	a9 00		lda #$00			lda #$00
.24b4	9d 3d 25	sta $253d,x			sta ballxHI,x
.24b7	9d 0d 25	sta $250d,x			sta ballXFR,x
.24ba	a9 01		lda #$01			lda #$01
.24bc	9d c5 24	sta $24c5,x			sta ballDir,x
.24bf	e8		inx				inx
.24c0	e0 18		cpx #$18			cpx #24
.24c2	90 e9		bcc $24ad			bcc rBallLoop
.24c4	60		rts				rts
>24c5	01 01 01 01 01 01 01 01		ballDir:	.byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
>24cd	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01
>24dd	00 f0 e0 d0 c0 b0 a0 90		ballSdF:	.byte $00,$f0,$e0,$d0,$c0,$b0,$a0,$90,$80,$70,$60,$50,$40,$30,$20,$10,$00,$f0,$e0,$d0,$c0,$b0,$a0,$90
>24e5	80 70 60 50 40 30 20 10 00 f0 e0 d0 c0 b0 a0 90
>24f5	02 01 01 01 01 01 01 01		ballSdL:	.byte $02,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00
>24fd	01 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00
>250d	00 00 00 00 00 00 00 00		ballXFR:	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>2515	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>2525	20 20 20 20 20 20 20 20		ballXLO:	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
>252d	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>253d	00 00 00 00 00 00 00 00		ballXHI:	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>2545	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>2555	21 2b 35 3f 49 53 5d 67		ballYLO:	.byte $21,$2b,$35,$3f,$49,$53,$5d,$67,$71,$7b,$85,$8f,$99,$a3,$ad,$b7,$c1,$cb,$d5,$df,$e9,$f3,$fd,$07
>255d	71 7b 85 8f 99 a3 ad b7 c1 cb d5 df e9 f3 fd 07
>256d	00 00 00 00 00 00 00 00		ballYHI:	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01
>2575	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>2585	3c 3b 3a 39 38 37 36 35		ballNote:	.byte 60, 59, 58, 57, 56, 55, 54, 53, 52 ,51 ,50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37
>258d	34 33 32 31 30 2f 2e 2d 2c 2b 2a 29 28 27 26 25
>259d	00 00 00 00 00 00 00 00		ballG:		.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>25a5	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>25b5	00 00 00 00 00 00 00 00		ballR:		.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>25bd	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>25cd	00 00 00 00 00 00 00 00		ballB:		.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>25d5	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>25e5	00 01 02 03 04 05 06 07		midiTable:	.byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,24,25,26,27,28,32,33,34,35,36,37,38,39,45,46,47     ;31
>25ed	08 09 0a 0b 0c 0d 0e 0f 18 19 1a 1b 1c 20 21 22
>25fd	23 24 25 26 27 2d 2e 2f
>2605	58 60 62 63 64 67 68 69					.byte 88,96,98,99,100,103,104,105,106,107,108,112,113,114,115,116,117,118,123,127				;51
>260d	6a 6b 6c 70 71 72 73 74 75 76 7b 7f
>2619	00 00 00 00 00 00 3f 7f		colorG:		.byte $00,$00,        $00,       $00,     $00, $00,   $3F,   $7F,   $BF,    $FF, $FF,    $FF,     $FF,$FF,      $FF,   $FF,  $FF,   $BF,       $7F, $3F,   $00,  $00,    $00,     $00
>2621	bf ff ff ff ff ff ff ff ff bf 7f 3f 00 00 00 00
>2631	ff bf 7f 3f 00 00 00 00		colorR:		.byte $FF,$BF,        $7F,       $3F,     $00, $00,   $00,   $00,   $00,    $00, $00,    $00,     $00,$3F,      $7F,   $BF,  $FF,   $FF,       $FF, $FF,   $FF,  $FF,    $FF,     $FF
>2639	00 00 00 00 00 3f 7f bf ff ff ff ff ff ff ff ff
>2649	ff ff ff ff ff bf bf bf		colorB:		.byte $FF,$FF,        $FF,       $FF,     $FF, $BF,   $BF,   $BF,   $BF,    $BF, $7F,    $7F,     $7F,$7F,      $3F,   $3F,  $3F,   $3F,       $00, $00,   $00,  $00,    $00,     $00
>2651	bf bf 7f 7f 7f 7f 3f 3f 3f 3f 00 00 00 00 00 00
>2661	90 00				speedBase:		.word $0090 					; The slowest ball speed
>2663	10				speedRatio:		.byte $10						; the amount between balls
>2664	00				resultFR:		.byte $00
>2665	00				resultLO:		.byte $00
>2666	0b				midiInst:		.byte 11
>2667	20				totalColors:	.byte 32
>2668	00 00				spriteLoc:		.word $0000
>266a	00				menuFlag:		.byte $00
>266b	30 31 32 33 34 35 36 37		hex:			.text "0123456789abcdef"
>2673	38 39 61 62 63 64 65 66
.267b					font:
>267b	00 00 00 00 00 00 00 00		.binary "atari.bin"
>2683	00 18 18 18 18 00 18 00 00 66 66 66 00 00 00 00
>2693	00 66 ff 66 66 ff 66 00 18 3e 60 3c 06 7c 18 00
>26a3	00 66 6c 18 30 66 46 00 1c 36 1c 38 6f 66 3b 00
>26b3	00 18 18 18 00 00 00 00 0c 18 30 30 30 18 0c 00
>26c3	30 18 0c 0c 0c 18 30 00 00 66 3c ff 3c 66 00 00
>26d3	00 18 18 7e 18 18 00 00 00 00 00 00 00 18 18 30
>26e3	00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>26f3	00 03 06 0c 18 30 60 00 00 3c 66 6e 76 66 3c 00
>2703	00 18 38 18 18 18 7e 00 00 3c 66 0c 18 30 7e 00
>2713	00 7e 0c 18 0c 66 3c 00 00 0c 1c 3c 6c 7e 0c 00
>2723	00 7e 60 7c 06 66 3c 00 00 3c 60 7c 66 66 3c 00
>2733	00 7e 06 0c 18 30 30 00 00 3c 66 3c 66 66 3c 00
>2743	00 3c 66 3e 06 0c 38 00 00 00 18 00 00 18 00 00
>2753	00 00 18 00 00 18 18 30 0c 18 30 60 30 18 0c 00
>2763	00 00 7e 00 7e 00 00 00 30 18 0c 06 0c 18 30 00
>2773	3c 66 06 0c 18 00 18 00 00 3c 66 6e 6e 60 3e 00
>2783	00 18 3c 66 66 7e 66 00 00 7c 66 7c 66 66 7c 00
>2793	00 3c 66 60 60 66 3c 00 00 78 6c 66 66 6c 78 00
>27a3	00 7e 60 7c 60 60 7e 00 00 7e 60 7c 60 60 60 00
>27b3	00 3e 60 60 6e 66 3c 00 00 66 66 7e 66 66 66 00
>27c3	00 7e 18 18 18 18 7e 00 00 06 06 06 06 66 3c 00
>27d3	00 66 6c 78 78 6c 66 00 00 60 60 60 60 60 7e 00
>27e3	00 63 77 7f 6b 63 63 00 00 66 76 7e 7e 6e 66 00
>27f3	00 3c 66 66 66 66 3c 00 00 7c 66 66 7c 60 60 00
>2803	00 3c 66 66 66 6c 36 00 00 7c 66 66 7c 6c 66 00
>2813	00 3c 60 3c 06 06 3c 00 00 7e 18 18 18 18 18 00
>2823	00 66 66 66 66 66 7e 00 00 66 66 66 66 3c 18 00
>2833	00 63 63 6b 7f 77 63 00 00 66 66 3c 3c 66 66 00
>2843	00 66 66 3c 18 18 18 00 00 7e 0c 18 30 60 7e 00
>2853	3c 30 30 30 30 30 3c 00 00 60 30 18 0c 06 03 00
>2863	3c 0c 0c 0c 0c 0c 3c 00 00 18 3c 66 00 00 00 00
>2873	33 99 cc 66 33 99 cc 66 00 18 18 18 00 00 00 00
>2883	00 00 3c 06 3e 66 3e 00 00 60 60 7c 66 66 7c 00
>2893	00 00 3c 60 60 60 3c 00 00 06 06 3e 66 66 3e 00
>28a3	00 00 3c 66 7e 60 3c 00 00 0e 18 3e 18 18 18 00
>28b3	00 00 3e 66 66 3e 06 7c 00 60 60 7c 66 66 66 00
>28c3	00 18 00 38 18 18 3c 00 00 06 00 06 06 06 06 3c
>28d3	00 60 60 6c 78 6c 66 00 00 38 18 18 18 18 3c 00
>28e3	00 00 66 7f 7f 6b 63 00 00 00 7c 66 66 66 66 00
>28f3	00 00 3c 66 66 66 3c 00 00 00 7c 66 66 7c 60 60
>2903	00 00 3e 66 66 3e 06 06 00 00 7c 66 60 60 60 00
>2913	00 00 3e 60 3c 06 7c 00 00 18 7e 18 18 18 0e 00
>2923	00 00 66 66 66 66 3e 00 00 00 66 66 66 3c 18 00
>2933	00 00 63 6b 7f 3e 36 00 00 00 66 3c 18 3c 66 00
>2943	00 00 66 66 66 3e 0c 78 00 00 7e 0c 18 30 7e 00
>2953	0c 10 10 20 10 10 0c 00 10 10 10 10 10 10 10 10
>2963	30 08 08 04 08 08 30 00 00 00 30 49 06 00 00 00
>2973	08 04 04 08 10 10 08 00

;******  Processing file: menu.s

.297b					menu:
>297b	60 c0 98 29 41 c1 a1 29		            .word $c060,mTitle,$c141,mSpeed,$c191,gap,$c1e1,inst,$c3a1,prStart,$c2a9,prTab,$c49f,dfs
>2983	91 c1 c2 29 e1 c1 e3 29 a1 c3 07 2a a9 c2 1e 2a
>2993	9f c4 3c 2a
>2997	ff				            .byte $ff
>2998	50 45 4e 44 55 4c 55 4d		mTitle:     .text   "PENDULUM^"
>29a0	5e
>29a1	55 73 65 20 4c 45 46 54		mSpeed:     .text   "Use LEFT/RIGHT to set speed.   $^"
>29a9	2f 52 49 47 48 54 20 74 6f 20 73 65 74 20 73 70
>29b9	65 65 64 2e 20 20 20 24 5e
>29c2	55 73 65 20 55 50 2f 44		gap:        .text   "Use UP/DOWN to set the gap.    $^"
>29ca	4f 57 4e 20 74 6f 20 73 65 74 20 74 68 65 20 67
>29da	61 70 2e 20 20 20 20 24 5e
>29e3	55 73 65 20 49 2f 53 48		inst:       .text   "Use I/SHIFT I to change instrument.^"
>29eb	49 46 54 20 49 20 74 6f 20 63 68 61 6e 67 65 20
>29fb	69 6e 73 74 72 75 6d 65 6e 74 2e 5e
>2a07	50 52 45 53 53 20 52 45		prStart:    .text   "PRESS RETURN TO START.^"
>2a0f	54 55 52 4e 20 54 4f 20 53 54 41 52 54 2e 5e
>2a1e	54 41 42 20 77 69 6c 6c		prTab:      .text   "TAB will return to this menu.^"
>2a26	20 72 65 74 75 72 6e 20 74 6f 20 74 68 69 73 20
>2a36	6d 65 6e 75 2e 5e
>2a3c	44 65 66 69 61 6e 63 65		dfs:        .text   "DefianceStudios^"
>2a44	53 74 75 64 69 6f 73 5e
>2a4c	ff				.byte $ff

;******  Return to file: pendulum.asm


;******  Processing file: ball.s

.2a4d					CLUT0:
>2a4d	00 00 00 ff				.byte	$0,$0,$0,$ff
>2a51	ff ff ff ff				.byte	$ff,$ff,$ff,$ff
>2a55	3c 28 45 ff				.byte	$3c,$28,$45,$ff
>2a59	31 39 66 ff				.byte	$31,$39,$66,$ff
>2a5d	3b 56 8f ff				.byte	$3b,$56,$8f,$ff
>2a61	26 71 df ff				.byte	$26,$71,$df,$ff
>2a65	66 a0 d9 ff				.byte	$66,$a0,$d9,$ff
>2a69	9a c3 ee ff				.byte	$9a,$c3,$ee,$ff
>2a6d	36 f2 fb ff				.byte	$36,$f2,$fb,$ff
>2a71	50 e5 99 ff				.byte	$50,$e5,$99,$ff
>2a75	30 be 6a ff				.byte	$30,$be,$6a,$ff
>2a79	6e 94 37 ff				.byte	$6e,$94,$37,$ff
>2a7d	2f 69 4b ff				.byte	$2f,$69,$4b,$ff
>2a81	24 4b 52 ff				.byte	$24,$4b,$52,$ff
>2a85	39 3c 32 ff				.byte	$39,$3c,$32,$ff
>2a89	74 3f 3f ff				.byte	$74,$3f,$3f,$ff
>2a8d	82 60 30 ff				.byte	$82,$60,$30,$ff
>2a91	e1 6e 5b ff				.byte	$e1,$6e,$5b,$ff
>2a95	ff 9b 63 ff				.byte	$ff,$9b,$63,$ff
>2a99	e4 cd 5f ff				.byte	$e4,$cd,$5f,$ff
>2a9d	fc db cb ff				.byte	$fc,$db,$cb,$ff
>2aa1	ba 7b d7 ff				.byte	$ba,$7b,$d7,$ff
>2aa5	b7 ad 9b ff				.byte	$b7,$ad,$9b,$ff
>2aa9	87 7e 84 ff				.byte	$87,$7e,$84,$ff
>2aad	6a 6a 69 ff				.byte	$6a,$6a,$69,$ff
>2ab1	52 56 59 ff				.byte	$52,$56,$59,$ff
>2ab5	8a 42 76 ff				.byte	$8a,$42,$76,$ff
>2ab9	32 32 ac ff				.byte	$32,$32,$ac,$ff
>2abd	63 57 d9 ff				.byte	$63,$57,$d9,$ff
>2ac1	ba 7b d7 ff				.byte	$ba,$7b,$d7,$ff
>2ac5	4a 97 8f ff				.byte	$4a,$97,$8f,$ff
>2ac9	30 6f 8a ff				.byte	$30,$6f,$8a,$ff
.2acd					sprite1:
>2acd	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2ad5	00 01 02 02 02 02 01 00			.byte	$0,$1,$2,$2,$2,$2,$1,$0
>2add	01 02 02 02 02 02 02 01			.byte	$1,$2,$2,$2,$2,$2,$2,$1
>2ae5	01 02 02 02 02 02 02 01			.byte	$1,$2,$2,$2,$2,$2,$2,$1
>2aed	01 02 02 02 02 02 02 01			.byte	$1,$2,$2,$2,$2,$2,$2,$1
>2af5	01 02 02 02 02 02 02 01			.byte	$1,$2,$2,$2,$2,$2,$2,$1
>2afd	00 01 02 02 02 02 01 00			.byte	$0,$1,$2,$2,$2,$2,$1,$0
>2b05	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2b0d					sprite2:
>2b0d	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2b15	00 01 03 03 03 03 01 00			.byte	$0,$1,$3,$3,$3,$3,$1,$0
>2b1d	01 03 03 03 03 03 03 01			.byte	$1,$3,$3,$3,$3,$3,$3,$1
>2b25	01 03 03 03 03 03 03 01			.byte	$1,$3,$3,$3,$3,$3,$3,$1
>2b2d	01 03 03 03 03 03 03 01			.byte	$1,$3,$3,$3,$3,$3,$3,$1
>2b35	01 03 03 03 03 03 03 01			.byte	$1,$3,$3,$3,$3,$3,$3,$1
>2b3d	00 01 03 03 03 03 01 00			.byte	$0,$1,$3,$3,$3,$3,$1,$0
>2b45	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2b4d					sprite3:
>2b4d	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2b55	00 01 04 04 04 04 01 00			.byte	$0,$1,$4,$4,$4,$4,$1,$0
>2b5d	01 04 04 04 04 04 04 01			.byte	$1,$4,$4,$4,$4,$4,$4,$1
>2b65	01 04 04 04 04 04 04 01			.byte	$1,$4,$4,$4,$4,$4,$4,$1
>2b6d	01 04 04 04 04 04 04 01			.byte	$1,$4,$4,$4,$4,$4,$4,$1
>2b75	01 04 04 04 04 04 04 01			.byte	$1,$4,$4,$4,$4,$4,$4,$1
>2b7d	00 01 04 04 04 04 01 00			.byte	$0,$1,$4,$4,$4,$4,$1,$0
>2b85	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2b8d					sprite4:
>2b8d	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2b95	00 01 05 05 05 05 01 00			.byte	$0,$1,$5,$5,$5,$5,$1,$0
>2b9d	01 05 05 05 05 05 05 01			.byte	$1,$5,$5,$5,$5,$5,$5,$1
>2ba5	01 05 05 05 05 05 05 01			.byte	$1,$5,$5,$5,$5,$5,$5,$1
>2bad	01 05 05 05 05 05 05 01			.byte	$1,$5,$5,$5,$5,$5,$5,$1
>2bb5	01 05 05 05 05 05 05 01			.byte	$1,$5,$5,$5,$5,$5,$5,$1
>2bbd	00 01 05 05 05 05 01 00			.byte	$0,$1,$5,$5,$5,$5,$1,$0
>2bc5	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2bcd					sprite5:
>2bcd	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2bd5	00 01 06 06 06 06 01 00			.byte	$0,$1,$6,$6,$6,$6,$1,$0
>2bdd	01 06 06 06 06 06 06 01			.byte	$1,$6,$6,$6,$6,$6,$6,$1
>2be5	01 06 06 06 06 06 06 01			.byte	$1,$6,$6,$6,$6,$6,$6,$1
>2bed	01 06 06 06 06 06 06 01			.byte	$1,$6,$6,$6,$6,$6,$6,$1
>2bf5	01 06 06 06 06 06 06 01			.byte	$1,$6,$6,$6,$6,$6,$6,$1
>2bfd	00 01 06 06 06 06 01 00			.byte	$0,$1,$6,$6,$6,$6,$1,$0
>2c05	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2c0d					sprite6:
>2c0d	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2c15	00 01 07 07 07 07 01 00			.byte	$0,$1,$7,$7,$7,$7,$1,$0
>2c1d	01 07 07 07 07 07 07 01			.byte	$1,$7,$7,$7,$7,$7,$7,$1
>2c25	01 07 07 07 07 07 07 01			.byte	$1,$7,$7,$7,$7,$7,$7,$1
>2c2d	01 07 07 07 07 07 07 01			.byte	$1,$7,$7,$7,$7,$7,$7,$1
>2c35	01 07 07 07 07 07 07 01			.byte	$1,$7,$7,$7,$7,$7,$7,$1
>2c3d	00 01 07 07 07 07 01 00			.byte	$0,$1,$7,$7,$7,$7,$1,$0
>2c45	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2c4d					sprite7:
>2c4d	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2c55	00 01 08 08 08 08 01 00			.byte	$0,$1,$8,$8,$8,$8,$1,$0
>2c5d	01 08 08 08 08 08 08 01			.byte	$1,$8,$8,$8,$8,$8,$8,$1
>2c65	01 08 08 08 08 08 08 01			.byte	$1,$8,$8,$8,$8,$8,$8,$1
>2c6d	01 08 08 08 08 08 08 01			.byte	$1,$8,$8,$8,$8,$8,$8,$1
>2c75	01 08 08 08 08 08 08 01			.byte	$1,$8,$8,$8,$8,$8,$8,$1
>2c7d	00 01 08 08 08 08 01 00			.byte	$0,$1,$8,$8,$8,$8,$1,$0
>2c85	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2c8d					sprite8:
>2c8d	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2c95	00 01 09 09 09 09 01 00			.byte	$0,$1,$9,$9,$9,$9,$1,$0
>2c9d	01 09 09 09 09 09 09 01			.byte	$1,$9,$9,$9,$9,$9,$9,$1
>2ca5	01 09 09 09 09 09 09 01			.byte	$1,$9,$9,$9,$9,$9,$9,$1
>2cad	01 09 09 09 09 09 09 01			.byte	$1,$9,$9,$9,$9,$9,$9,$1
>2cb5	01 09 09 09 09 09 09 01			.byte	$1,$9,$9,$9,$9,$9,$9,$1
>2cbd	00 01 09 09 09 09 01 00			.byte	$0,$1,$9,$9,$9,$9,$1,$0
>2cc5	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2ccd					sprite9:
>2ccd	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2cd5	00 01 0a 0a 0a 0a 01 00			.byte	$0,$1,$a,$a,$a,$a,$1,$0
>2cdd	01 0a 0a 0a 0a 0a 0a 01			.byte	$1,$a,$a,$a,$a,$a,$a,$1
>2ce5	01 0a 0a 0a 0a 0a 0a 01			.byte	$1,$a,$a,$a,$a,$a,$a,$1
>2ced	01 0a 0a 0a 0a 0a 0a 01			.byte	$1,$a,$a,$a,$a,$a,$a,$1
>2cf5	01 0a 0a 0a 0a 0a 0a 01			.byte	$1,$a,$a,$a,$a,$a,$a,$1
>2cfd	00 01 0a 0a 0a 0a 01 00			.byte	$0,$1,$a,$a,$a,$a,$1,$0
>2d05	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2d0d					sprite10:
>2d0d	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2d15	00 01 0b 0b 0b 0b 01 00			.byte	$0,$1,$b,$b,$b,$b,$1,$0
>2d1d	01 0b 0b 0b 0b 0b 0b 01			.byte	$1,$b,$b,$b,$b,$b,$b,$1
>2d25	01 0b 0b 0b 0b 0b 0b 01			.byte	$1,$b,$b,$b,$b,$b,$b,$1
>2d2d	01 0b 0b 0b 0b 0b 0b 01			.byte	$1,$b,$b,$b,$b,$b,$b,$1
>2d35	01 0b 0b 0b 0b 0b 0b 01			.byte	$1,$b,$b,$b,$b,$b,$b,$1
>2d3d	00 01 0b 0b 0b 0b 01 00			.byte	$0,$1,$b,$b,$b,$b,$1,$0
>2d45	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2d4d					sprite11:
>2d4d	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2d55	00 01 0c 0c 0c 0c 01 00			.byte	$0,$1,$c,$c,$c,$c,$1,$0
>2d5d	01 0c 0c 0c 0c 0c 0c 01			.byte	$1,$c,$c,$c,$c,$c,$c,$1
>2d65	01 0c 0c 0c 0c 0c 0c 01			.byte	$1,$c,$c,$c,$c,$c,$c,$1
>2d6d	01 0c 0c 0c 0c 0c 0c 01			.byte	$1,$c,$c,$c,$c,$c,$c,$1
>2d75	01 0c 0c 0c 0c 0c 0c 01			.byte	$1,$c,$c,$c,$c,$c,$c,$1
>2d7d	00 01 0c 0c 0c 0c 01 00			.byte	$0,$1,$c,$c,$c,$c,$1,$0
>2d85	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2d8d					sprite12:
>2d8d	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2d95	00 01 0d 0d 0d 0d 01 00			.byte	$0,$1,$d,$d,$d,$d,$1,$0
>2d9d	01 0d 0d 0d 0d 0d 0d 01			.byte	$1,$d,$d,$d,$d,$d,$d,$1
>2da5	01 0d 0d 0d 0d 0d 0d 01			.byte	$1,$d,$d,$d,$d,$d,$d,$1
>2dad	01 0d 0d 0d 0d 0d 0d 01			.byte	$1,$d,$d,$d,$d,$d,$d,$1
>2db5	01 0d 0d 0d 0d 0d 0d 01			.byte	$1,$d,$d,$d,$d,$d,$d,$1
>2dbd	00 01 0d 0d 0d 0d 01 00			.byte	$0,$1,$d,$d,$d,$d,$1,$0
>2dc5	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2dcd					sprite13:
>2dcd	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2dd5	00 01 0e 0e 0e 0e 01 00			.byte	$0,$1,$e,$e,$e,$e,$1,$0
>2ddd	01 0e 0e 0e 0e 0e 0e 01			.byte	$1,$e,$e,$e,$e,$e,$e,$1
>2de5	01 0e 0e 0e 0e 0e 0e 01			.byte	$1,$e,$e,$e,$e,$e,$e,$1
>2ded	01 0e 0e 0e 0e 0e 0e 01			.byte	$1,$e,$e,$e,$e,$e,$e,$1
>2df5	01 0e 0e 0e 0e 0e 0e 01			.byte	$1,$e,$e,$e,$e,$e,$e,$1
>2dfd	00 01 0e 0e 0e 0e 01 00			.byte	$0,$1,$e,$e,$e,$e,$1,$0
>2e05	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2e0d					sprite14:
>2e0d	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2e15	00 01 0f 0f 0f 0f 01 00			.byte	$0,$1,$f,$f,$f,$f,$1,$0
>2e1d	01 0f 0f 0f 0f 0f 0f 01			.byte	$1,$f,$f,$f,$f,$f,$f,$1
>2e25	01 0f 0f 0f 0f 0f 0f 01			.byte	$1,$f,$f,$f,$f,$f,$f,$1
>2e2d	01 0f 0f 0f 0f 0f 0f 01			.byte	$1,$f,$f,$f,$f,$f,$f,$1
>2e35	01 0f 0f 0f 0f 0f 0f 01			.byte	$1,$f,$f,$f,$f,$f,$f,$1
>2e3d	00 01 0f 0f 0f 0f 01 00			.byte	$0,$1,$f,$f,$f,$f,$1,$0
>2e45	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2e4d					sprite15:
>2e4d	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2e55	00 01 10 10 10 10 01 00			.byte	$0,$1,$10,$10,$10,$10,$1,$0
>2e5d	01 10 10 10 10 10 10 01			.byte	$1,$10,$10,$10,$10,$10,$10,$1
>2e65	01 10 10 10 10 10 10 01			.byte	$1,$10,$10,$10,$10,$10,$10,$1
>2e6d	01 10 10 10 10 10 10 01			.byte	$1,$10,$10,$10,$10,$10,$10,$1
>2e75	01 10 10 10 10 10 10 01			.byte	$1,$10,$10,$10,$10,$10,$10,$1
>2e7d	00 01 10 10 10 10 01 00			.byte	$0,$1,$10,$10,$10,$10,$1,$0
>2e85	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2e8d					sprite16:
>2e8d	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2e95	00 01 11 11 11 11 01 00			.byte	$0,$1,$11,$11,$11,$11,$1,$0
>2e9d	01 11 11 11 11 11 11 01			.byte	$1,$11,$11,$11,$11,$11,$11,$1
>2ea5	01 11 11 11 11 11 11 01			.byte	$1,$11,$11,$11,$11,$11,$11,$1
>2ead	01 11 11 11 11 11 11 01			.byte	$1,$11,$11,$11,$11,$11,$11,$1
>2eb5	01 11 11 11 11 11 11 01			.byte	$1,$11,$11,$11,$11,$11,$11,$1
>2ebd	00 01 11 11 11 11 01 00			.byte	$0,$1,$11,$11,$11,$11,$1,$0
>2ec5	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2ecd					sprite17:
>2ecd	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2ed5	00 01 12 12 12 12 01 00			.byte	$0,$1,$12,$12,$12,$12,$1,$0
>2edd	01 12 12 12 12 12 12 01			.byte	$1,$12,$12,$12,$12,$12,$12,$1
>2ee5	01 12 12 12 12 12 12 01			.byte	$1,$12,$12,$12,$12,$12,$12,$1
>2eed	01 12 12 12 12 12 12 01			.byte	$1,$12,$12,$12,$12,$12,$12,$1
>2ef5	01 12 12 12 12 12 12 01			.byte	$1,$12,$12,$12,$12,$12,$12,$1
>2efd	00 01 12 12 12 12 01 00			.byte	$0,$1,$12,$12,$12,$12,$1,$0
>2f05	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2f0d					sprite18:
>2f0d	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2f15	00 01 13 13 13 13 01 00			.byte	$0,$1,$13,$13,$13,$13,$1,$0
>2f1d	01 13 13 13 13 13 13 01			.byte	$1,$13,$13,$13,$13,$13,$13,$1
>2f25	01 13 13 13 13 13 13 01			.byte	$1,$13,$13,$13,$13,$13,$13,$1
>2f2d	01 13 13 13 13 13 13 01			.byte	$1,$13,$13,$13,$13,$13,$13,$1
>2f35	01 13 13 13 13 13 13 01			.byte	$1,$13,$13,$13,$13,$13,$13,$1
>2f3d	00 01 13 13 13 13 01 00			.byte	$0,$1,$13,$13,$13,$13,$1,$0
>2f45	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2f4d					sprite19:
>2f4d	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2f55	00 01 14 14 14 14 01 00			.byte	$0,$1,$14,$14,$14,$14,$1,$0
>2f5d	01 14 14 14 14 14 14 01			.byte	$1,$14,$14,$14,$14,$14,$14,$1
>2f65	01 14 14 14 14 14 14 01			.byte	$1,$14,$14,$14,$14,$14,$14,$1
>2f6d	01 14 14 14 14 14 14 01			.byte	$1,$14,$14,$14,$14,$14,$14,$1
>2f75	01 14 14 14 14 14 14 01			.byte	$1,$14,$14,$14,$14,$14,$14,$1
>2f7d	00 01 14 14 14 14 01 00			.byte	$0,$1,$14,$14,$14,$14,$1,$0
>2f85	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2f8d					sprite20:
>2f8d	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2f95	00 01 15 15 15 15 01 00			.byte	$0,$1,$15,$15,$15,$15,$1,$0
>2f9d	01 15 15 15 15 15 15 01			.byte	$1,$15,$15,$15,$15,$15,$15,$1
>2fa5	01 15 15 15 15 15 15 01			.byte	$1,$15,$15,$15,$15,$15,$15,$1
>2fad	01 15 15 15 15 15 15 01			.byte	$1,$15,$15,$15,$15,$15,$15,$1
>2fb5	01 15 15 15 15 15 15 01			.byte	$1,$15,$15,$15,$15,$15,$15,$1
>2fbd	00 01 15 15 15 15 01 00			.byte	$0,$1,$15,$15,$15,$15,$1,$0
>2fc5	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.2fcd					sprite21:
>2fcd	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>2fd5	00 01 16 16 16 16 01 00			.byte	$0,$1,$16,$16,$16,$16,$1,$0
>2fdd	01 16 16 16 16 16 16 01			.byte	$1,$16,$16,$16,$16,$16,$16,$1
>2fe5	01 16 16 16 16 16 16 01			.byte	$1,$16,$16,$16,$16,$16,$16,$1
>2fed	01 16 16 16 16 16 16 01			.byte	$1,$16,$16,$16,$16,$16,$16,$1
>2ff5	01 16 16 16 16 16 16 01			.byte	$1,$16,$16,$16,$16,$16,$16,$1
>2ffd	00 01 16 16 16 16 01 00			.byte	$0,$1,$16,$16,$16,$16,$1,$0
>3005	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.300d					sprite22:
>300d	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>3015	00 01 17 17 17 17 01 00			.byte	$0,$1,$17,$17,$17,$17,$1,$0
>301d	01 17 17 17 17 17 17 01			.byte	$1,$17,$17,$17,$17,$17,$17,$1
>3025	01 17 17 17 17 17 17 01			.byte	$1,$17,$17,$17,$17,$17,$17,$1
>302d	01 17 17 17 17 17 17 01			.byte	$1,$17,$17,$17,$17,$17,$17,$1
>3035	01 17 17 17 17 17 17 01			.byte	$1,$17,$17,$17,$17,$17,$17,$1
>303d	00 01 17 17 17 17 01 00			.byte	$0,$1,$17,$17,$17,$17,$1,$0
>3045	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.304d					sprite23:
>304d	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>3055	00 01 18 18 18 18 01 00			.byte	$0,$1,$18,$18,$18,$18,$1,$0
>305d	01 18 18 18 18 18 18 01			.byte	$1,$18,$18,$18,$18,$18,$18,$1
>3065	01 18 18 18 18 18 18 01			.byte	$1,$18,$18,$18,$18,$18,$18,$1
>306d	01 18 18 18 18 18 18 01			.byte	$1,$18,$18,$18,$18,$18,$18,$1
>3075	01 18 18 18 18 18 18 01			.byte	$1,$18,$18,$18,$18,$18,$18,$1
>307d	00 01 18 18 18 18 01 00			.byte	$0,$1,$18,$18,$18,$18,$1,$0
>3085	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
.308d					sprite24:
>308d	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0
>3095	00 01 19 19 19 19 01 00			.byte	$0,$1,$19,$19,$19,$19,$1,$0
>309d	01 19 19 19 19 19 19 01			.byte	$1,$19,$19,$19,$19,$19,$19,$1
>30a5	01 19 19 19 19 19 19 01			.byte	$1,$19,$19,$19,$19,$19,$19,$1
>30ad	01 19 19 19 19 19 19 01			.byte	$1,$19,$19,$19,$19,$19,$19,$1
>30b5	01 19 19 19 19 19 19 01			.byte	$1,$19,$19,$19,$19,$19,$19,$1
>30bd	00 01 19 19 19 19 01 00			.byte	$0,$1,$19,$19,$19,$19,$1,$0
>30c5	00 00 01 01 01 01 00 00			.byte	$0,$0,$1,$1,$1,$1,$0,$0

;******  Return to file: pendulum.asm


;******  Processing file: midi_instruments.s

.30cd					instrumentList:
>30cd	41 63 6f 75 73 74 69 63		.text "Acoustic Grand Piano   "
>30d5	20 47 72 61 6e 64 20 50 69 61 6e 6f 20 20 20
>30e4	42 72 69 67 68 74 20 41		.text "Bright Acoustic Piano  "
>30ec	63 6f 75 73 74 69 63 20 50 69 61 6e 6f 20 20
>30fb	45 6c 65 63 74 72 69 63		.text "Electric Grand Piano   "
>3103	20 47 72 61 6e 64 20 50 69 61 6e 6f 20 20 20
>3112	48 6f 6e 6b 79 2d 74 6f		.text "Honky-tonk Piano       "
>311a	6e 6b 20 50 69 61 6e 6f 20 20 20 20 20 20 20
>3129	45 6c 65 63 74 72 69 63		.text "Electric Piano 1       "
>3131	20 50 69 61 6e 6f 20 31 20 20 20 20 20 20 20
>3140	45 6c 65 63 74 72 69 63		.text "Electric Piano 2       "
>3148	20 50 69 61 6e 6f 20 32 20 20 20 20 20 20 20
>3157	48 61 72 70 73 69 63 68		.text "Harpsichord            "
>315f	6f 72 64 20 20 20 20 20 20 20 20 20 20 20 20
>316e	43 6c 61 76 69 20 20 20		.text "Clavi                  "
>3176	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3185	43 65 6c 65 73 74 61 20		.text "Celesta                "
>318d	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>319c	47 6c 6f 63 6b 65 6e 73		.text "Glockenspiel           "
>31a4	70 69 65 6c 20 20 20 20 20 20 20 20 20 20 20
>31b3	4d 75 73 69 63 20 42 6f		.text "Music Box              "
>31bb	78 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>31ca	56 69 62 72 61 70 68 6f		.text "Vibraphone             "
>31d2	6e 65 20 20 20 20 20 20 20 20 20 20 20 20 20
>31e1	4d 61 72 69 6d 62 61 20		.text "Marimba                "
>31e9	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>31f8	58 79 6c 6f 70 68 6f 6e		.text "Xylophone              "
>3200	65 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>320f	54 75 62 75 6c 61 72 20		.text "Tubular Bells          "
>3217	42 65 6c 6c 73 20 20 20 20 20 20 20 20 20 20
>3226	44 75 6c 63 69 6d 65 72		.text "Dulcimer               "
>322e	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>323d	44 72 61 77 62 61 72 20		.text "Drawbar Organ          "
>3245	4f 72 67 61 6e 20 20 20 20 20 20 20 20 20 20
>3254	50 65 72 63 75 73 73 69		.text "Percussive Organ       "
>325c	76 65 20 4f 72 67 61 6e 20 20 20 20 20 20 20
>326b	52 6f 63 6b 20 4f 72 67		.text "Rock Organ             "
>3273	61 6e 20 20 20 20 20 20 20 20 20 20 20 20 20
>3282	43 68 75 72 63 68 20 4f		.text "Church Organ           "
>328a	72 67 61 6e 20 20 20 20 20 20 20 20 20 20 20
>3299	52 65 65 64 20 4f 72 67		.text "Reed Organ             "
>32a1	61 6e 20 20 20 20 20 20 20 20 20 20 20 20 20
>32b0	41 63 63 6f 72 64 69 6f		.text "Accordion              "
>32b8	6e 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>32c7	48 61 72 6d 6f 6e 69 63		.text "Harmonica              "
>32cf	61 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>32de	54 61 6e 67 6f 20 41 63		.text "Tango Accordion        "
>32e6	63 6f 72 64 69 6f 6e 20 20 20 20 20 20 20 20
>32f5	41 63 6f 75 73 74 69 63		.text "Acoustic Guitar (nylon)"
>32fd	20 47 75 69 74 61 72 20 28 6e 79 6c 6f 6e 29
>330c	41 63 6f 75 73 74 69 63		.text "Acoustic Guitar (steel)"
>3314	20 47 75 69 74 61 72 20 28 73 74 65 65 6c 29
>3323	45 6c 65 63 74 72 69 63		.text "Electric Guitar (jazz) "
>332b	20 47 75 69 74 61 72 20 28 6a 61 7a 7a 29 20
>333a	45 6c 65 63 74 72 69 63		.text "Electric Guitar (clean)"
>3342	20 47 75 69 74 61 72 20 28 63 6c 65 61 6e 29
>3351	45 6c 65 63 74 72 69 63		.text "Electric Guitar (muted)"
>3359	20 47 75 69 74 61 72 20 28 6d 75 74 65 64 29
>3368	4f 76 65 72 64 72 69 76		.text "Overdriven Guitar      "
>3370	65 6e 20 47 75 69 74 61 72 20 20 20 20 20 20
>337f	44 69 73 74 6f 72 74 69		.text "Distortion Guitar      "
>3387	6f 6e 20 47 75 69 74 61 72 20 20 20 20 20 20
>3396	47 75 69 74 61 72 20 68		.text "Guitar harmonics       "
>339e	61 72 6d 6f 6e 69 63 73 20 20 20 20 20 20 20
>33ad	41 63 6f 75 73 74 69 63		.text "Acoustic Bass          "
>33b5	20 42 61 73 73 20 20 20 20 20 20 20 20 20 20
>33c4	45 6c 65 63 74 72 69 63		.text "Electric Bass (finger) "
>33cc	20 42 61 73 73 20 28 66 69 6e 67 65 72 29 20
>33db	45 6c 65 63 74 72 69 63		.text "Electric Bass (pick)   "
>33e3	20 42 61 73 73 20 28 70 69 63 6b 29 20 20 20
>33f2	46 72 65 74 6c 65 73 73		.text "Fretless Bass          "
>33fa	20 42 61 73 73 20 20 20 20 20 20 20 20 20 20
>3409	53 6c 61 70 20 42 61 73		.text "Slap Bass 1            "
>3411	73 20 31 20 20 20 20 20 20 20 20 20 20 20 20
>3420	53 6c 61 70 20 42 61 73		.text "Slap Bass 2            "
>3428	73 20 32 20 20 20 20 20 20 20 20 20 20 20 20
>3437	53 79 6e 74 68 20 42 61		.text "Synth Bass 1           "
>343f	73 73 20 31 20 20 20 20 20 20 20 20 20 20 20
>344e	53 79 6e 74 68 20 42 61		.text "Synth Bass 2           "
>3456	73 73 20 32 20 20 20 20 20 20 20 20 20 20 20
>3465	56 69 6f 6c 69 6e 20 20		.text "Violin                 "
>346d	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>347c	56 69 6f 6c 61 20 20 20		.text "Viola                  "
>3484	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3493	43 65 6c 6c 6f 20 20 20		.text "Cello                  "
>349b	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>34aa	43 6f 6e 74 72 61 62 61		.text "Contrabass             "
>34b2	73 73 20 20 20 20 20 20 20 20 20 20 20 20 20
>34c1	54 72 65 6d 6f 6c 6f 20		.text "Tremolo Strings        "
>34c9	53 74 72 69 6e 67 73 20 20 20 20 20 20 20 20
>34d8	50 69 7a 7a 69 63 61 74		.text "Pizzicato Strings      "
>34e0	6f 20 53 74 72 69 6e 67 73 20 20 20 20 20 20
>34ef	4f 72 63 68 65 73 74 72		.text "Orchestral Harp        "
>34f7	61 6c 20 48 61 72 70 20 20 20 20 20 20 20 20
>3506	54 69 6d 70 61 6e 69 20		.text "Timpani                "
>350e	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>351d	53 74 72 69 6e 67 20 45		.text "String Ensemble 1      "
>3525	6e 73 65 6d 62 6c 65 20 31 20 20 20 20 20 20
>3534	53 74 72 69 6e 67 20 45		.text "String Ensemble 2      "
>353c	6e 73 65 6d 62 6c 65 20 32 20 20 20 20 20 20
>354b	53 79 6e 74 68 53 74 72		.text "SynthStrings 1         "
>3553	69 6e 67 73 20 31 20 20 20 20 20 20 20 20 20
>3562	53 79 6e 74 68 53 74 72		.text "SynthStrings 2         "
>356a	69 6e 67 73 20 32 20 20 20 20 20 20 20 20 20
>3579	43 68 6f 69 72 20 41 61		.text "Choir Aahs             "
>3581	68 73 20 20 20 20 20 20 20 20 20 20 20 20 20
>3590	56 6f 69 63 65 20 4f 6f		.text "Voice Oohs             "
>3598	68 73 20 20 20 20 20 20 20 20 20 20 20 20 20
>35a7	53 79 6e 74 68 20 56 6f		.text "Synth Voice            "
>35af	69 63 65 20 20 20 20 20 20 20 20 20 20 20 20
>35be	4f 72 63 68 65 73 74 72		.text "Orchestra Hit          "
>35c6	61 20 48 69 74 20 20 20 20 20 20 20 20 20 20
>35d5	54 72 75 6d 70 65 74 20		.text "Trumpet                "
>35dd	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>35ec	54 72 6f 6d 62 6f 6e 65		.text "Trombone               "
>35f4	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3603	54 75 62 61 20 20 20 20		.text "Tuba                   "
>360b	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>361a	4d 75 74 65 64 20 54 72		.text "Muted Trumpet          "
>3622	75 6d 70 65 74 20 20 20 20 20 20 20 20 20 20
>3631	46 72 65 6e 63 68 20 48		.text "French Horn            "
>3639	6f 72 6e 20 20 20 20 20 20 20 20 20 20 20 20
>3648	42 72 61 73 73 20 53 65		.text "Brass Section          "
>3650	63 74 69 6f 6e 20 20 20 20 20 20 20 20 20 20
>365f	53 79 6e 74 68 42 72 61		.text "SynthBrass 1           "
>3667	73 73 20 31 20 20 20 20 20 20 20 20 20 20 20
>3676	53 79 6e 74 68 42 72 61		.text "SynthBrass 2           "
>367e	73 73 20 32 20 20 20 20 20 20 20 20 20 20 20
>368d	53 6f 70 72 61 6e 6f 20		.text "Soprano Sax            "
>3695	53 61 78 20 20 20 20 20 20 20 20 20 20 20 20
>36a4	41 6c 74 6f 20 53 61 78		.text "Alto Sax               "
>36ac	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>36bb	54 65 6e 6f 72 20 53 61		.text "Tenor Sax              "
>36c3	78 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>36d2	42 61 72 69 74 6f 6e 65		.text "Baritone Sax           "
>36da	20 53 61 78 20 20 20 20 20 20 20 20 20 20 20
>36e9	4f 62 6f 65 20 20 20 20		.text "Oboe                   "
>36f1	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3700	45 6e 67 6c 69 73 68 20		.text "English Horn           "
>3708	48 6f 72 6e 20 20 20 20 20 20 20 20 20 20 20
>3717	42 61 73 73 6f 6f 6e 20		.text "Bassoon                "
>371f	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>372e	43 6c 61 72 69 6e 65 74		.text "Clarinet               "
>3736	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3745	50 69 63 63 6f 6c 6f 20		.text "Piccolo                "
>374d	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>375c	46 6c 75 74 65 20 20 20		.text "Flute                  "
>3764	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3773	52 65 63 6f 72 64 65 72		.text "Recorder               "
>377b	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>378a	50 61 6e 20 46 6c 75 74		.text "Pan Flute              "
>3792	65 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>37a1	42 6c 6f 77 6e 20 42 6f		.text "Blown Bottle           "
>37a9	74 74 6c 65 20 20 20 20 20 20 20 20 20 20 20
>37b8	53 68 61 6b 75 68 61 63		.text "Shakuhachi             "
>37c0	68 69 20 20 20 20 20 20 20 20 20 20 20 20 20
>37cf	57 68 69 73 74 6c 65 20		.text "Whistle                "
>37d7	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>37e6	4f 63 61 72 69 6e 61 20		.text "Ocarina                "
>37ee	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>37fd	4c 65 61 64 20 31 20 28		.text "Lead 1 (square)        "
>3805	73 71 75 61 72 65 29 20 20 20 20 20 20 20 20
>3814	4c 65 61 64 20 32 20 28		.text "Lead 2 (sawtooth)      "
>381c	73 61 77 74 6f 6f 74 68 29 20 20 20 20 20 20
>382b	4c 65 61 64 20 33 20 28		.text "Lead 3 (calliope)      "
>3833	63 61 6c 6c 69 6f 70 65 29 20 20 20 20 20 20
>3842	4c 65 61 64 20 34 20 28		.text "Lead 4 (chiff)         "
>384a	63 68 69 66 66 29 20 20 20 20 20 20 20 20 20
>3859	4c 65 61 64 20 35 20 28		.text "Lead 5 (charang)       "
>3861	63 68 61 72 61 6e 67 29 20 20 20 20 20 20 20
>3870	4c 65 61 64 20 36 20 28		.text "Lead 6 (voice)         "
>3878	76 6f 69 63 65 29 20 20 20 20 20 20 20 20 20
>3887	4c 65 61 64 20 37 20 28		.text "Lead 7 (fifths)        "
>388f	66 69 66 74 68 73 29 20 20 20 20 20 20 20 20
>389e	4c 65 61 64 20 38 20 28		.text "Lead 8 (bass + lead)   "
>38a6	62 61 73 73 20 2b 20 6c 65 61 64 29 20 20 20
>38b5	50 61 64 20 31 20 28 6e		.text "Pad 1 (new age)        "
>38bd	65 77 20 61 67 65 29 20 20 20 20 20 20 20 20
>38cc	50 61 64 20 32 20 28 77		.text "Pad 2 (warm)           "
>38d4	61 72 6d 29 20 20 20 20 20 20 20 20 20 20 20
>38e3	50 61 64 20 33 20 28 70		.text "Pad 3 (polysynth)      "
>38eb	6f 6c 79 73 79 6e 74 68 29 20 20 20 20 20 20
>38fa	50 61 64 20 34 20 28 63		.text "Pad 4 (choir)          "
>3902	68 6f 69 72 29 20 20 20 20 20 20 20 20 20 20
>3911	50 61 64 20 35 20 28 62		.text "Pad 5 (bowed)          "
>3919	6f 77 65 64 29 20 20 20 20 20 20 20 20 20 20
>3928	50 61 64 20 36 20 28 6d		.text "Pad 6 (metallic)       "
>3930	65 74 61 6c 6c 69 63 29 20 20 20 20 20 20 20
>393f	50 61 64 20 37 20 28 68		.text "Pad 7 (halo)           "
>3947	61 6c 6f 29 20 20 20 20 20 20 20 20 20 20 20
>3956	50 61 64 20 38 20 28 73		.text "Pad 8 (sweep)          "
>395e	77 65 65 70 29 20 20 20 20 20 20 20 20 20 20
>396d	46 58 20 31 20 28 72 61		.text "FX 1 (rain)            "
>3975	69 6e 29 20 20 20 20 20 20 20 20 20 20 20 20
>3984	46 58 20 32 20 28 73 6f		.text "FX 2 (soundtrack)      "
>398c	75 6e 64 74 72 61 63 6b 29 20 20 20 20 20 20
>399b	46 58 20 33 20 28 63 72		.text "FX 3 (crystal)         "
>39a3	79 73 74 61 6c 29 20 20 20 20 20 20 20 20 20
>39b2	46 58 20 34 20 28 61 74		.text "FX 4 (atmosphere)      "
>39ba	6d 6f 73 70 68 65 72 65 29 20 20 20 20 20 20
>39c9	46 58 20 35 20 28 62 72		.text "FX 5 (brightness)      "
>39d1	69 67 68 74 6e 65 73 73 29 20 20 20 20 20 20
>39e0	46 58 20 36 20 28 67 6f		.text "FX 6 (goblins)         "
>39e8	62 6c 69 6e 73 29 20 20 20 20 20 20 20 20 20
>39f7	46 58 20 37 20 28 65 63		.text "FX 7 (echoes)          "
>39ff	68 6f 65 73 29 20 20 20 20 20 20 20 20 20 20
>3a0e	46 58 20 38 20 28 73 63		.text "FX 8 (sci-fi)          "
>3a16	69 2d 66 69 29 20 20 20 20 20 20 20 20 20 20
>3a25	53 69 74 61 72 20 20 20		.text "Sitar                  "
>3a2d	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3a3c	42 61 6e 6a 6f 20 20 20		.text "Banjo                  "
>3a44	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3a53	53 68 61 6d 69 73 65 6e		.text "Shamisen               "
>3a5b	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3a6a	4b 6f 74 6f 20 20 20 20		.text "Koto                   "
>3a72	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3a81	4b 61 6c 69 6d 62 61 20		.text "Kalimba                "
>3a89	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3a98	42 61 67 20 70 69 70 65		.text "Bag pipe               "
>3aa0	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3aaf	46 69 64 64 6c 65 20 20		.text "Fiddle                 "
>3ab7	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3ac6	53 68 61 6e 61 69 20 20		.text "Shanai                 "
>3ace	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3add	54 69 6e 6b 6c 65 20 42		.text "Tinkle Bell            "
>3ae5	65 6c 6c 20 20 20 20 20 20 20 20 20 20 20 20
>3af4	41 67 6f 67 6f 20 20 20		.text "Agogo                  "
>3afc	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0b	53 74 65 65 6c 20 44 72		.text "Steel Drums            "
>3b13	75 6d 73 20 20 20 20 20 20 20 20 20 20 20 20
>3b22	57 6f 6f 64 62 6c 6f 63		.text "Woodblock              "
>3b2a	6b 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b39	54 61 69 6b 6f 20 44 72		.text "Taiko Drum             "
>3b41	75 6d 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b50	4d 65 6c 6f 64 69 63 20		.text "Melodic Tom            "
>3b58	54 6f 6d 20 20 20 20 20 20 20 20 20 20 20 20
>3b67	53 79 6e 74 68 20 44 72		.text "Synth Drum             "
>3b6f	75 6d 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b7e	52 65 76 65 72 73 65 20		.text "Reverse Cymbal         "
>3b86	43 79 6d 62 61 6c 20 20 20 20 20 20 20 20 20
>3b95	47 75 69 74 61 72 20 46		.text "Guitar Fret Noise      "
>3b9d	72 65 74 20 4e 6f 69 73 65 20 20 20 20 20 20
>3bac	42 72 65 61 74 68 20 4e		.text "Breath Noise           "
>3bb4	6f 69 73 65 20 20 20 20 20 20 20 20 20 20 20
>3bc3	53 65 61 73 68 6f 72 65		.text "Seashore               "
>3bcb	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3bda	42 69 72 64 20 54 77 65		.text "Bird Tweet             "
>3be2	65 74 20 20 20 20 20 20 20 20 20 20 20 20 20
>3bf1	54 65 6c 65 70 68 6f 6e		.text "Telephone Ring         "
>3bf9	65 20 52 69 6e 67 20 20 20 20 20 20 20 20 20
>3c08	48 65 6c 69 63 6f 70 74		.text "Helicopter             "
>3c10	65 72 20 20 20 20 20 20 20 20 20 20 20 20 20
>3c1f	41 70 70 6c 61 75 73 65		.text "Applause               "
>3c27	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3c36	47 75 6e 73 68 6f 74 20		.text "Gunshot                "
>3c3e	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20

;******  Return to file: pendulum.asm


;******  End of listing
